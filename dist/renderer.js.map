{"version":3,"file":"renderer.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@phosphor/algorithm/lib/array.js","webpack:///./node_modules/@phosphor/algorithm/lib/chain.js","webpack:///./node_modules/@phosphor/algorithm/lib/empty.js","webpack:///./node_modules/@phosphor/algorithm/lib/filter.js","webpack:///./node_modules/@phosphor/algorithm/lib/find.js","webpack:///./node_modules/@phosphor/algorithm/lib/index.js","webpack:///./node_modules/@phosphor/algorithm/lib/iter.js","webpack:///./node_modules/@phosphor/algorithm/lib/map.js","webpack:///./node_modules/@phosphor/algorithm/lib/range.js","webpack:///./node_modules/@phosphor/algorithm/lib/reduce.js","webpack:///./node_modules/@phosphor/algorithm/lib/repeat.js","webpack:///./node_modules/@phosphor/algorithm/lib/retro.js","webpack:///./node_modules/@phosphor/algorithm/lib/sort.js","webpack:///./node_modules/@phosphor/algorithm/lib/stride.js","webpack:///./node_modules/@phosphor/algorithm/lib/string.js","webpack:///./node_modules/@phosphor/algorithm/lib/take.js","webpack:///./node_modules/@phosphor/algorithm/lib/zip.js","webpack:///./node_modules/@phosphor/collections/lib/index.js","webpack:///./node_modules/@phosphor/collections/lib/linkedlist.js","webpack:///./node_modules/@phosphor/commands/lib/index.js","webpack:///./node_modules/@phosphor/coreutils/lib/index.js","webpack:///./node_modules/@phosphor/coreutils/lib/json.js","webpack:///./node_modules/@phosphor/coreutils/lib/mime.js","webpack:///./node_modules/@phosphor/coreutils/lib/promise.js","webpack:///./node_modules/@phosphor/coreutils/lib/random.js","webpack:///./node_modules/@phosphor/coreutils/lib/token.js","webpack:///./node_modules/@phosphor/coreutils/lib/uuid.js","webpack:///./node_modules/@phosphor/disposable/lib/index.js","webpack:///./node_modules/@phosphor/domutils/lib/element.js","webpack:///./node_modules/@phosphor/domutils/lib/index.js","webpack:///./node_modules/@phosphor/domutils/lib/platform.js","webpack:///./node_modules/@phosphor/domutils/lib/selector.js","webpack:///./node_modules/@phosphor/dragdrop/lib/index.js","webpack:///./node_modules/@phosphor/keyboard/lib/index.js","webpack:///./node_modules/@phosphor/messaging/lib/index.js","webpack:///./node_modules/@phosphor/properties/lib/index.js","webpack:///./node_modules/@phosphor/signaling/lib/index.js","webpack:///./node_modules/@phosphor/virtualdom/lib/index.js","webpack:///./node_modules/@phosphor/widgets/lib/boxengine.js","webpack:///./node_modules/@phosphor/widgets/lib/boxlayout.js","webpack:///./node_modules/@phosphor/widgets/lib/boxpanel.js","webpack:///./node_modules/@phosphor/widgets/lib/commandpalette.js","webpack:///./node_modules/@phosphor/widgets/lib/contextmenu.js","webpack:///./node_modules/@phosphor/widgets/lib/docklayout.js","webpack:///./node_modules/@phosphor/widgets/lib/dockpanel.js","webpack:///./node_modules/@phosphor/widgets/lib/focustracker.js","webpack:///./node_modules/@phosphor/widgets/lib/gridlayout.js","webpack:///./node_modules/@phosphor/widgets/lib/index.js","webpack:///./node_modules/@phosphor/widgets/lib/layout.js","webpack:///./node_modules/@phosphor/widgets/lib/menu.js","webpack:///./node_modules/@phosphor/widgets/lib/menubar.js","webpack:///./node_modules/@phosphor/widgets/lib/panel.js","webpack:///./node_modules/@phosphor/widgets/lib/panellayout.js","webpack:///./node_modules/@phosphor/widgets/lib/scrollbar.js","webpack:///./node_modules/@phosphor/widgets/lib/singletonlayout.js","webpack:///./node_modules/@phosphor/widgets/lib/splitlayout.js","webpack:///./node_modules/@phosphor/widgets/lib/splitpanel.js","webpack:///./node_modules/@phosphor/widgets/lib/stackedlayout.js","webpack:///./node_modules/@phosphor/widgets/lib/stackedpanel.js","webpack:///./node_modules/@phosphor/widgets/lib/tabbar.js","webpack:///./node_modules/@phosphor/widgets/lib/tabpanel.js","webpack:///./node_modules/@phosphor/widgets/lib/title.js","webpack:///./node_modules/@phosphor/widgets/lib/widget.js","webpack:///./src/renderer/style/style.css","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./node_modules/style-loader/lib/addStyles.js","webpack:///./node_modules/style-loader/lib/urls.js","webpack:///src/renderer/dom/index.ts","webpack:///src/renderer/index.ts","webpack:///./src/renderer/style/style.css?0393","webpack:///external \"crypto\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/renderer/index.ts\");\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The namespace for array-specific algorithms.\r\n */\r\nvar ArrayExt;\r\n(function (ArrayExt) {\r\n    /**\r\n     * Find the index of the first occurrence of a value in an array.\r\n     *\r\n     * @param array - The array-like object to search.\r\n     *\r\n     * @param value - The value to locate in the array. Values are\r\n     *   compared using strict `===` equality.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the first occurrence of the value, or `-1`\r\n     *   if the value is not found.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the search will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = ['one', 'two', 'three', 'four', 'one'];\r\n     * ArrayExt.firstIndexOf(data, 'red');        // -1\r\n     * ArrayExt.firstIndexOf(data, 'one');        // 0\r\n     * ArrayExt.firstIndexOf(data, 'one', 1);     // 4\r\n     * ArrayExt.firstIndexOf(data, 'two', 2);     // -1\r\n     * ArrayExt.firstIndexOf(data, 'two', 2, 1);  // 1\r\n     * ```\r\n     */\r\n    function firstIndexOf(array, value, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return -1;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var span;\r\n        if (stop < start) {\r\n            span = (stop + 1) + (n - start);\r\n        }\r\n        else {\r\n            span = stop - start + 1;\r\n        }\r\n        for (var i = 0; i < span; ++i) {\r\n            var j = (start + i) % n;\r\n            if (array[j] === value) {\r\n                return j;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    ArrayExt.firstIndexOf = firstIndexOf;\r\n    /**\r\n     * Find the index of the last occurrence of a value in an array.\r\n     *\r\n     * @param array - The array-like object to search.\r\n     *\r\n     * @param value - The value to locate in the array. Values are\r\n     *   compared using strict `===` equality.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the last occurrence of the value, or `-1`\r\n     *   if the value is not found.\r\n     *\r\n     * #### Notes\r\n     * If `start < stop` the search will wrap at the front of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = ['one', 'two', 'three', 'four', 'one'];\r\n     * ArrayExt.lastIndexOf(data, 'red');        // -1\r\n     * ArrayExt.lastIndexOf(data, 'one');        // 4\r\n     * ArrayExt.lastIndexOf(data, 'one', 1);     // 0\r\n     * ArrayExt.lastIndexOf(data, 'two', 0);     // -1\r\n     * ArrayExt.lastIndexOf(data, 'two', 0, 1);  // 1\r\n     * ```\r\n     */\r\n    function lastIndexOf(array, value, start, stop) {\r\n        if (start === void 0) { start = -1; }\r\n        if (stop === void 0) { stop = 0; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return -1;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var span;\r\n        if (start < stop) {\r\n            span = (start + 1) + (n - stop);\r\n        }\r\n        else {\r\n            span = start - stop + 1;\r\n        }\r\n        for (var i = 0; i < span; ++i) {\r\n            var j = (start - i + n) % n;\r\n            if (array[j] === value) {\r\n                return j;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    ArrayExt.lastIndexOf = lastIndexOf;\r\n    /**\r\n     * Find the index of the first value which matches a predicate.\r\n     *\r\n     * @param array - The array-like object to search.\r\n     *\r\n     * @param fn - The predicate function to apply to the values.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the first matching value, or `-1` if no\r\n     *   matching value is found.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the search will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * Modifying the length of the array while searching.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function isEven(value: number): boolean {\r\n     *   return value % 2 === 0;\r\n     * }\r\n     *\r\n     * let data = [1, 2, 3, 4, 3, 2, 1];\r\n     * ArrayExt.findFirstIndex(data, isEven);       // 1\r\n     * ArrayExt.findFirstIndex(data, isEven, 4);    // 5\r\n     * ArrayExt.findFirstIndex(data, isEven, 6);    // -1\r\n     * ArrayExt.findFirstIndex(data, isEven, 6, 5); // 1\r\n     * ```\r\n     */\r\n    function findFirstIndex(array, fn, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return -1;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var span;\r\n        if (stop < start) {\r\n            span = (stop + 1) + (n - start);\r\n        }\r\n        else {\r\n            span = stop - start + 1;\r\n        }\r\n        for (var i = 0; i < span; ++i) {\r\n            var j = (start + i) % n;\r\n            if (fn(array[j], j)) {\r\n                return j;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    ArrayExt.findFirstIndex = findFirstIndex;\r\n    /**\r\n     * Find the index of the last value which matches a predicate.\r\n     *\r\n     * @param object - The array-like object to search.\r\n     *\r\n     * @param fn - The predicate function to apply to the values.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the last matching value, or `-1` if no\r\n     *   matching value is found.\r\n     *\r\n     * #### Notes\r\n     * If `start < stop` the search will wrap at the front of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * Modifying the length of the array while searching.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function isEven(value: number): boolean {\r\n     *   return value % 2 === 0;\r\n     * }\r\n     *\r\n     * let data = [1, 2, 3, 4, 3, 2, 1];\r\n     * ArrayExt.findLastIndex(data, isEven);        // 5\r\n     * ArrayExt.findLastIndex(data, isEven, 4);     // 3\r\n     * ArrayExt.findLastIndex(data, isEven, 0);     // -1\r\n     * ArrayExt.findLastIndex(data, isEven, 0, 1);  // 5\r\n     * ```\r\n     */\r\n    function findLastIndex(array, fn, start, stop) {\r\n        if (start === void 0) { start = -1; }\r\n        if (stop === void 0) { stop = 0; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return -1;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var d;\r\n        if (start < stop) {\r\n            d = (start + 1) + (n - stop);\r\n        }\r\n        else {\r\n            d = start - stop + 1;\r\n        }\r\n        for (var i = 0; i < d; ++i) {\r\n            var j = (start - i + n) % n;\r\n            if (fn(array[j], j)) {\r\n                return j;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    ArrayExt.findLastIndex = findLastIndex;\r\n    /**\r\n     * Find the first value which matches a predicate.\r\n     *\r\n     * @param array - The array-like object to search.\r\n     *\r\n     * @param fn - The predicate function to apply to the values.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The first matching value, or `undefined` if no matching\r\n     *   value is found.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the search will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * Modifying the length of the array while searching.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function isEven(value: number): boolean {\r\n     *   return value % 2 === 0;\r\n     * }\r\n     *\r\n     * let data = [1, 2, 3, 4, 3, 2, 1];\r\n     * ArrayExt.findFirstValue(data, isEven);       // 2\r\n     * ArrayExt.findFirstValue(data, isEven, 2);    // 4\r\n     * ArrayExt.findFirstValue(data, isEven, 6);    // undefined\r\n     * ArrayExt.findFirstValue(data, isEven, 6, 5); // 2\r\n     * ```\r\n     */\r\n    function findFirstValue(array, fn, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var index = findFirstIndex(array, fn, start, stop);\r\n        return index !== -1 ? array[index] : undefined;\r\n    }\r\n    ArrayExt.findFirstValue = findFirstValue;\r\n    /**\r\n     * Find the last value which matches a predicate.\r\n     *\r\n     * @param object - The array-like object to search.\r\n     *\r\n     * @param fn - The predicate function to apply to the values.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The last matching value, or `undefined` if no matching\r\n     *   value is found.\r\n     *\r\n     * #### Notes\r\n     * If `start < stop` the search will wrap at the front of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * Modifying the length of the array while searching.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function isEven(value: number): boolean {\r\n     *   return value % 2 === 0;\r\n     * }\r\n     *\r\n     * let data = [1, 2, 3, 4, 3, 2, 1];\r\n     * ArrayExt.findLastValue(data, isEven);        // 2\r\n     * ArrayExt.findLastValue(data, isEven, 4);     // 4\r\n     * ArrayExt.findLastValue(data, isEven, 0);     // undefined\r\n     * ArrayExt.findLastValue(data, isEven, 0, 1);  // 2\r\n     * ```\r\n     */\r\n    function findLastValue(array, fn, start, stop) {\r\n        if (start === void 0) { start = -1; }\r\n        if (stop === void 0) { stop = 0; }\r\n        var index = findLastIndex(array, fn, start, stop);\r\n        return index !== -1 ? array[index] : undefined;\r\n    }\r\n    ArrayExt.findLastValue = findLastValue;\r\n    /**\r\n     * Find the index of the first element which compares `>=` to a value.\r\n     *\r\n     * @param array - The sorted array-like object to search.\r\n     *\r\n     * @param value - The value to locate in the array.\r\n     *\r\n     * @param fn - The 3-way comparison function to apply to the values.\r\n     *   It should return `< 0` if an element is less than a value, `0` if\r\n     *   an element is equal to a value, or `> 0` if an element is greater\r\n     *   than a value.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the first element which compares `>=` to the\r\n     *   value, or `length` if there is no such element. If the computed\r\n     *   index for `stop` is less than `start`, then the computed index\r\n     *   for `start` is returned.\r\n     *\r\n     * #### Notes\r\n     * The array must already be sorted in ascending order according to\r\n     * the comparison function.\r\n     *\r\n     * #### Complexity\r\n     * Logarithmic.\r\n     *\r\n     * #### Undefined Behavior\r\n     * Searching a range which is not sorted in ascending order.\r\n     *\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * Modifying the length of the array while searching.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function numberCmp(a: number, b: number): number {\r\n     *   return a - b;\r\n     * }\r\n     *\r\n     * let data = [0, 3, 4, 7, 7, 9];\r\n     * ArrayExt.lowerBound(data, 0, numberCmp);   // 0\r\n     * ArrayExt.lowerBound(data, 6, numberCmp);   // 3\r\n     * ArrayExt.lowerBound(data, 7, numberCmp);   // 3\r\n     * ArrayExt.lowerBound(data, -1, numberCmp);  // 0\r\n     * ArrayExt.lowerBound(data, 10, numberCmp);  // 6\r\n     * ```\r\n     */\r\n    function lowerBound(array, value, fn, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return 0;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var begin = start;\r\n        var span = stop - start + 1;\r\n        while (span > 0) {\r\n            var half = span >> 1;\r\n            var middle = begin + half;\r\n            if (fn(array[middle], value) < 0) {\r\n                begin = middle + 1;\r\n                span -= half + 1;\r\n            }\r\n            else {\r\n                span = half;\r\n            }\r\n        }\r\n        return begin;\r\n    }\r\n    ArrayExt.lowerBound = lowerBound;\r\n    /**\r\n     * Find the index of the first element which compares `>` than a value.\r\n     *\r\n     * @param array - The sorted array-like object to search.\r\n     *\r\n     * @param value - The value to locate in the array.\r\n     *\r\n     * @param fn - The 3-way comparison function to apply to the values.\r\n     *   It should return `< 0` if an element is less than a value, `0` if\r\n     *   an element is equal to a value, or `> 0` if an element is greater\r\n     *   than a value.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the first element which compares `>` than the\r\n     *   value, or `length` if there is no such element. If the computed\r\n     *   index for `stop` is less than `start`, then the computed index\r\n     *   for `start` is returned.\r\n     *\r\n     * #### Notes\r\n     * The array must already be sorted in ascending order according to\r\n     * the comparison function.\r\n     *\r\n     * #### Complexity\r\n     * Logarithmic.\r\n     *\r\n     * #### Undefined Behavior\r\n     * Searching a range which is not sorted in ascending order.\r\n     *\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * Modifying the length of the array while searching.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function numberCmp(a: number, b: number): number {\r\n     *   return a - b;\r\n     * }\r\n     *\r\n     * let data = [0, 3, 4, 7, 7, 9];\r\n     * ArrayExt.upperBound(data, 0, numberCmp);   // 1\r\n     * ArrayExt.upperBound(data, 6, numberCmp);   // 3\r\n     * ArrayExt.upperBound(data, 7, numberCmp);   // 5\r\n     * ArrayExt.upperBound(data, -1, numberCmp);  // 0\r\n     * ArrayExt.upperBound(data, 10, numberCmp);  // 6\r\n     * ```\r\n     */\r\n    function upperBound(array, value, fn, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return 0;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var begin = start;\r\n        var span = stop - start + 1;\r\n        while (span > 0) {\r\n            var half = span >> 1;\r\n            var middle = begin + half;\r\n            if (fn(array[middle], value) > 0) {\r\n                span = half;\r\n            }\r\n            else {\r\n                begin = middle + 1;\r\n                span -= half + 1;\r\n            }\r\n        }\r\n        return begin;\r\n    }\r\n    ArrayExt.upperBound = upperBound;\r\n    /**\r\n     * Move an element in an array from one index to another.\r\n     *\r\n     * @param array - The mutable array-like object of interest.\r\n     *\r\n     * @param fromIndex - The index of the element to move. Negative\r\n     *   values are taken as an offset from the end of the array.\r\n     *\r\n     * @param toIndex - The target index of the element. Negative\r\n     *   values are taken as an offset from the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `fromIndex` or `toIndex` which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from from '@phosphor/algorithm';\r\n     *\r\n     * let data = [0, 1, 2, 3, 4];\r\n     * ArrayExt.move(data, 1, 2);  // [0, 2, 1, 3, 4]\r\n     * ArrayExt.move(data, 4, 2);  // [0, 2, 4, 1, 3]\r\n     * ```\r\n     */\r\n    function move(array, fromIndex, toIndex) {\r\n        var n = array.length;\r\n        if (n <= 1) {\r\n            return;\r\n        }\r\n        if (fromIndex < 0) {\r\n            fromIndex = Math.max(0, fromIndex + n);\r\n        }\r\n        else {\r\n            fromIndex = Math.min(fromIndex, n - 1);\r\n        }\r\n        if (toIndex < 0) {\r\n            toIndex = Math.max(0, toIndex + n);\r\n        }\r\n        else {\r\n            toIndex = Math.min(toIndex, n - 1);\r\n        }\r\n        if (fromIndex === toIndex) {\r\n            return;\r\n        }\r\n        var value = array[fromIndex];\r\n        var d = fromIndex < toIndex ? 1 : -1;\r\n        for (var i = fromIndex; i !== toIndex; i += d) {\r\n            array[i] = array[i + d];\r\n        }\r\n        array[toIndex] = value;\r\n    }\r\n    ArrayExt.move = move;\r\n    /**\r\n     * Reverse an array in-place.\r\n     *\r\n     * @param array - The mutable array-like object of interest.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   reversed, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   reversed, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or  `stop` index which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = [0, 1, 2, 3, 4];\r\n     * ArrayExt.reverse(data, 1, 3);  // [0, 3, 2, 1, 4]\r\n     * ArrayExt.reverse(data, 3);     // [0, 3, 2, 4, 1]\r\n     * ArrayExt.reverse(data);        // [1, 4, 2, 3, 0]\r\n     * ```\r\n     */\r\n    function reverse(array, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n <= 1) {\r\n            return;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        while (start < stop) {\r\n            var a = array[start];\r\n            var b = array[stop];\r\n            array[start++] = b;\r\n            array[stop--] = a;\r\n        }\r\n    }\r\n    ArrayExt.reverse = reverse;\r\n    /**\r\n     * Rotate the elements of an array in-place.\r\n     *\r\n     * @param array - The mutable array-like object of interest.\r\n     *\r\n     * @param delta - The amount of rotation to apply to the elements. A\r\n     *   positive value will rotate the elements to the left. A negative\r\n     *   value will rotate the elements to the right.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   rotated, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   rotated, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `delta`, `start`, or `stop` which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = [0, 1, 2, 3, 4];\r\n     * ArrayExt.rotate(data, 2);        // [2, 3, 4, 0, 1]\r\n     * ArrayExt.rotate(data, -2);       // [0, 1, 2, 3, 4]\r\n     * ArrayExt.rotate(data, 10);       // [0, 1, 2, 3, 4]\r\n     * ArrayExt.rotate(data, 9);        // [4, 0, 1, 2, 3]\r\n     * ArrayExt.rotate(data, 2, 1, 3);  // [4, 2, 0, 1, 3]\r\n     * ```\r\n     */\r\n    function rotate(array, delta, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n <= 1) {\r\n            return;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        if (start >= stop) {\r\n            return;\r\n        }\r\n        var length = stop - start + 1;\r\n        if (delta > 0) {\r\n            delta = delta % length;\r\n        }\r\n        else if (delta < 0) {\r\n            delta = ((delta % length) + length) % length;\r\n        }\r\n        if (delta === 0) {\r\n            return;\r\n        }\r\n        var pivot = start + delta;\r\n        reverse(array, start, pivot - 1);\r\n        reverse(array, pivot, stop);\r\n        reverse(array, start, stop);\r\n    }\r\n    ArrayExt.rotate = rotate;\r\n    /**\r\n     * Fill an array with a static value.\r\n     *\r\n     * @param array - The mutable array-like object to fill.\r\n     *\r\n     * @param value - The static value to use to fill the array.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   filled, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   filled, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the fill will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * A `start` or `stop` which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = ['one', 'two', 'three', 'four'];\r\n     * ArrayExt.fill(data, 'r');        // ['r', 'r', 'r', 'r']\r\n     * ArrayExt.fill(data, 'g', 1);     // ['r', 'g', 'g', 'g']\r\n     * ArrayExt.fill(data, 'b', 2, 3);  // ['r', 'g', 'b', 'b']\r\n     * ArrayExt.fill(data, 'z', 3, 1);  // ['z', 'z', 'b', 'z']\r\n     * ```\r\n     */\r\n    function fill(array, value, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var span;\r\n        if (stop < start) {\r\n            span = (stop + 1) + (n - start);\r\n        }\r\n        else {\r\n            span = stop - start + 1;\r\n        }\r\n        for (var i = 0; i < span; ++i) {\r\n            array[(start + i) % n] = value;\r\n        }\r\n    }\r\n    ArrayExt.fill = fill;\r\n    /**\r\n     * Insert a value into an array at a specific index.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param index - The index at which to insert the value. Negative\r\n     *   values are taken as an offset from the end of the array.\r\n     *\r\n     * @param value - The value to set at the specified index.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * An `index` which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = [0, 1, 2];\r\n     * ArrayExt.insert(data, 0, -1);  // [-1, 0, 1, 2]\r\n     * ArrayExt.insert(data, 2, 12);  // [-1, 0, 12, 1, 2]\r\n     * ArrayExt.insert(data, -1, 7);  // [-1, 0, 12, 1, 7, 2]\r\n     * ArrayExt.insert(data, 6, 19);  // [-1, 0, 12, 1, 7, 2, 19]\r\n     * ```\r\n     */\r\n    function insert(array, index, value) {\r\n        var n = array.length;\r\n        if (index < 0) {\r\n            index = Math.max(0, index + n);\r\n        }\r\n        else {\r\n            index = Math.min(index, n);\r\n        }\r\n        for (var i = n; i > index; --i) {\r\n            array[i] = array[i - 1];\r\n        }\r\n        array[index] = value;\r\n    }\r\n    ArrayExt.insert = insert;\r\n    /**\r\n     * Remove and return a value at a specific index in an array.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param index - The index of the value to remove. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The value at the specified index, or `undefined` if the\r\n     *   index is out of range.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Undefined Behavior\r\n     * An `index` which is non-integral.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = [0, 12, 23, 39, 14, 12, 75];\r\n     * ArrayExt.removeAt(data, 2);   // 23\r\n     * ArrayExt.removeAt(data, -2);  // 12\r\n     * ArrayExt.removeAt(data, 10);  // undefined;\r\n     * ```\r\n     */\r\n    function removeAt(array, index) {\r\n        var n = array.length;\r\n        if (index < 0) {\r\n            index += n;\r\n        }\r\n        if (index < 0 || index >= n) {\r\n            return undefined;\r\n        }\r\n        var value = array[index];\r\n        for (var i = index + 1; i < n; ++i) {\r\n            array[i - 1] = array[i];\r\n        }\r\n        array.length = n - 1;\r\n        return value;\r\n    }\r\n    ArrayExt.removeAt = removeAt;\r\n    /**\r\n     * Remove the first occurrence of a value from an array.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param value - The value to remove from the array. Values are\r\n     *   compared using strict `===` equality.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the removed value, or `-1` if the value\r\n     *   is not contained in the array.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the search will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = [0, 12, 23, 39, 14, 12, 75];\r\n     * ArrayExt.removeFirstOf(data, 12);        // 1\r\n     * ArrayExt.removeFirstOf(data, 17);        // -1\r\n     * ArrayExt.removeFirstOf(data, 39, 3);     // -1\r\n     * ArrayExt.removeFirstOf(data, 39, 3, 2);  // 2\r\n     * ```\r\n     */\r\n    function removeFirstOf(array, value, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var index = firstIndexOf(array, value, start, stop);\r\n        if (index !== -1) {\r\n            removeAt(array, index);\r\n        }\r\n        return index;\r\n    }\r\n    ArrayExt.removeFirstOf = removeFirstOf;\r\n    /**\r\n     * Remove the last occurrence of a value from an array.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param value - The value to remove from the array. Values are\r\n     *   compared using strict `===` equality.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The index of the removed value, or `-1` if the value\r\n     *   is not contained in the array.\r\n     *\r\n     * #### Notes\r\n     * If `start < stop` the search will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = [0, 12, 23, 39, 14, 12, 75];\r\n     * ArrayExt.removeLastOf(data, 12);        // 5\r\n     * ArrayExt.removeLastOf(data, 17);        // -1\r\n     * ArrayExt.removeLastOf(data, 39, 2);     // -1\r\n     * ArrayExt.removeLastOf(data, 39, 2, 3);  // 3\r\n     * ```\r\n     */\r\n    function removeLastOf(array, value, start, stop) {\r\n        if (start === void 0) { start = -1; }\r\n        if (stop === void 0) { stop = 0; }\r\n        var index = lastIndexOf(array, value, start, stop);\r\n        if (index !== -1) {\r\n            removeAt(array, index);\r\n        }\r\n        return index;\r\n    }\r\n    ArrayExt.removeLastOf = removeLastOf;\r\n    /**\r\n     * Remove all occurrences of a value from an array.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param value - The value to remove from the array. Values are\r\n     *   compared using strict `===` equality.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The number of elements removed from the array.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the search will conceptually wrap at the end of\r\n     * the array, however the array will be traversed front-to-back.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * let data = [14, 12, 23, 39, 14, 12, 19, 14];\r\n     * ArrayExt.removeAllOf(data, 12);        // 2\r\n     * ArrayExt.removeAllOf(data, 17);        // 0\r\n     * ArrayExt.removeAllOf(data, 14, 1, 4);  // 1\r\n     * ```\r\n     */\r\n    function removeAllOf(array, value, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return 0;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var count = 0;\r\n        for (var i = 0; i < n; ++i) {\r\n            if (start <= stop && (i >= start && i <= stop) && array[i] === value) {\r\n                count++;\r\n            }\r\n            else if (stop < start && (i <= stop || i >= start) && array[i] === value) {\r\n                count++;\r\n            }\r\n            else if (count > 0) {\r\n                array[i - count] = array[i];\r\n            }\r\n        }\r\n        if (count > 0) {\r\n            array.length = n - count;\r\n        }\r\n        return count;\r\n    }\r\n    ArrayExt.removeAllOf = removeAllOf;\r\n    /**\r\n     * Remove the first occurrence of a value which matches a predicate.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param fn - The predicate function to apply to the values.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The removed `{ index, value }`, which will be `-1` and\r\n     *   `undefined` if the value is not contained in the array.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the search will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function isEven(value: number): boolean {\r\n     *   return value % 2 === 0;\r\n     * }\r\n     *\r\n     * let data = [0, 12, 23, 39, 14, 12, 75];\r\n     * ArrayExt.removeFirstWhere(data, isEven);     // { index: 0, value: 0 }\r\n     * ArrayExt.removeFirstWhere(data, isEven, 2);  // { index: 3, value: 14 }\r\n     * ArrayExt.removeFirstWhere(data, isEven, 4);  // { index: -1, value: undefined }\r\n     * ```\r\n     */\r\n    function removeFirstWhere(array, fn, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var value;\r\n        var index = findFirstIndex(array, fn, start, stop);\r\n        if (index !== -1) {\r\n            value = removeAt(array, index);\r\n        }\r\n        return { index: index, value: value };\r\n    }\r\n    ArrayExt.removeFirstWhere = removeFirstWhere;\r\n    /**\r\n     * Remove the last occurrence of a value which matches a predicate.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param fn - The predicate function to apply to the values.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The removed `{ index, value }`, which will be `-1` and\r\n     *   `undefined` if the value is not contained in the array.\r\n     *\r\n     * #### Notes\r\n     * If `start < stop` the search will wrap at the end of the array.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function isEven(value: number): boolean {\r\n     *   return value % 2 === 0;\r\n     * }\r\n     *\r\n     * let data = [0, 12, 23, 39, 14, 12, 75];\r\n     * ArrayExt.removeLastWhere(data, isEven);        // { index: 5, value: 12 }\r\n     * ArrayExt.removeLastWhere(data, isEven, 2);     // { index: 1, value: 12 }\r\n     * ArrayExt.removeLastWhere(data, isEven, 2, 1);  // { index: -1, value: undefined }\r\n     * ```\r\n     */\r\n    function removeLastWhere(array, fn, start, stop) {\r\n        if (start === void 0) { start = -1; }\r\n        if (stop === void 0) { stop = 0; }\r\n        var value;\r\n        var index = findLastIndex(array, fn, start, stop);\r\n        if (index !== -1) {\r\n            value = removeAt(array, index);\r\n        }\r\n        return { index: index, value: value };\r\n    }\r\n    ArrayExt.removeLastWhere = removeLastWhere;\r\n    /**\r\n     * Remove all occurrences of values which match a predicate.\r\n     *\r\n     * @param array - The array of interest.\r\n     *\r\n     * @param fn - The predicate function to apply to the values.\r\n     *\r\n     * @param start - The index of the first element in the range to be\r\n     *   searched, inclusive. The default value is `0`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @param stop - The index of the last element in the range to be\r\n     *   searched, inclusive. The default value is `-1`. Negative values\r\n     *   are taken as an offset from the end of the array.\r\n     *\r\n     * @returns The number of elements removed from the array.\r\n     *\r\n     * #### Notes\r\n     * If `stop < start` the search will conceptually wrap at the end of\r\n     * the array, however the array will be traversed front-to-back.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { ArrayExt } from '@phosphor/algorithm';\r\n     *\r\n     * function isEven(value: number): boolean {\r\n     *   return value % 2 === 0;\r\n     * }\r\n     *\r\n     * function isNegative(value: number): boolean {\r\n     *   return value < 0;\r\n     * }\r\n     *\r\n     * let data = [0, 12, -13, -9, 23, 39, 14, -15, 12, 75];\r\n     * ArrayExt.removeAllWhere(data, isEven);            // 4\r\n     * ArrayExt.removeAllWhere(data, isNegative, 0, 3);  // 2\r\n     * ```\r\n     */\r\n    function removeAllWhere(array, fn, start, stop) {\r\n        if (start === void 0) { start = 0; }\r\n        if (stop === void 0) { stop = -1; }\r\n        var n = array.length;\r\n        if (n === 0) {\r\n            return 0;\r\n        }\r\n        if (start < 0) {\r\n            start = Math.max(0, start + n);\r\n        }\r\n        else {\r\n            start = Math.min(start, n - 1);\r\n        }\r\n        if (stop < 0) {\r\n            stop = Math.max(0, stop + n);\r\n        }\r\n        else {\r\n            stop = Math.min(stop, n - 1);\r\n        }\r\n        var count = 0;\r\n        for (var i = 0; i < n; ++i) {\r\n            if (start <= stop && (i >= start && i <= stop) && fn(array[i], i)) {\r\n                count++;\r\n            }\r\n            else if (stop < start && (i <= stop || i >= start) && fn(array[i], i)) {\r\n                count++;\r\n            }\r\n            else if (count > 0) {\r\n                array[i - count] = array[i];\r\n            }\r\n        }\r\n        if (count > 0) {\r\n            array.length = n - count;\r\n        }\r\n        return count;\r\n    }\r\n    ArrayExt.removeAllWhere = removeAllWhere;\r\n})(ArrayExt = exports.ArrayExt || (exports.ArrayExt = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Chain together several iterables.\r\n *\r\n * @param objects - The iterable or array-like objects of interest.\r\n *\r\n * @returns An iterator which yields the values of the iterables\r\n *   in the order in which they are supplied.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { chain, toArray } from '@phosphor/algorithm';\r\n *\r\n * let data1 = [1, 2, 3];\r\n * let data2 = [4, 5, 6];\r\n *\r\n * let stream = chain(data1, data2);\r\n *\r\n * toArray(stream);  // [1, 2, 3, 4, 5, 6]\r\n * ```\r\n */\r\nfunction chain() {\r\n    var objects = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        objects[_i] = arguments[_i];\r\n    }\r\n    return new ChainIterator(iter_1.iter(objects.map(iter_1.iter)));\r\n}\r\nexports.chain = chain;\r\n/**\r\n * An iterator which chains together several iterators.\r\n */\r\nvar ChainIterator = (function () {\r\n    /**\r\n     * Construct a new chain iterator.\r\n     *\r\n     * @param source - The iterator of iterators of interest.\r\n     */\r\n    function ChainIterator(source) {\r\n        this._cloned = false;\r\n        this._source = source;\r\n        this._active = undefined;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    ChainIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    ChainIterator.prototype.clone = function () {\r\n        var result = new ChainIterator(this._source.clone());\r\n        result._active = this._active && this._active.clone();\r\n        result._cloned = true;\r\n        this._cloned = true;\r\n        return result;\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    ChainIterator.prototype.next = function () {\r\n        if (this._active === undefined) {\r\n            var active = this._source.next();\r\n            if (active === undefined) {\r\n                return undefined;\r\n            }\r\n            this._active = this._cloned ? active.clone() : active;\r\n        }\r\n        var value = this._active.next();\r\n        if (value !== undefined) {\r\n            return value;\r\n        }\r\n        this._active = undefined;\r\n        return this.next();\r\n    };\r\n    return ChainIterator;\r\n}());\r\nexports.ChainIterator = ChainIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Create an empty iterator.\r\n *\r\n * @returns A new iterator which yields nothing.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { empty, toArray } from '@phosphor/algorithm';\r\n *\r\n * let stream = empty<number>();\r\n *\r\n * toArray(stream);  // []\r\n * ```\r\n */\r\nfunction empty() {\r\n    return new EmptyIterator();\r\n}\r\nexports.empty = empty;\r\n/**\r\n * An iterator which is always empty.\r\n */\r\nvar EmptyIterator = (function () {\r\n    /**\r\n     * Construct a new empty iterator.\r\n     */\r\n    function EmptyIterator() {\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    EmptyIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    EmptyIterator.prototype.clone = function () {\r\n        return new EmptyIterator();\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    EmptyIterator.prototype.next = function () {\r\n        return undefined;\r\n    };\r\n    return EmptyIterator;\r\n}());\r\nexports.EmptyIterator = EmptyIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Filter an iterable for values which pass a test.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @param fn - The predicate function to invoke for each value.\r\n *\r\n * @returns An iterator which yields the values which pass the test.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { filter, toArray } from '@phosphor/algorithm';\r\n *\r\n * let data = [1, 2, 3, 4, 5, 6];\r\n *\r\n * let stream = filter(data, value => value % 2 === 0);\r\n *\r\n * toArray(stream);  // [2, 4, 6]\r\n * ```\r\n */\r\nfunction filter(object, fn) {\r\n    return new FilterIterator(iter_1.iter(object), fn);\r\n}\r\nexports.filter = filter;\r\n/**\r\n * An iterator which yields values which pass a test.\r\n */\r\nvar FilterIterator = (function () {\r\n    /**\r\n     * Construct a new filter iterator.\r\n     *\r\n     * @param source - The iterator of values of interest.\r\n     *\r\n     * @param fn - The predicate function to invoke for each value.\r\n     */\r\n    function FilterIterator(source, fn) {\r\n        this._index = 0;\r\n        this._source = source;\r\n        this._fn = fn;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    FilterIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    FilterIterator.prototype.clone = function () {\r\n        var result = new FilterIterator(this._source.clone(), this._fn);\r\n        result._index = this._index;\r\n        return result;\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    FilterIterator.prototype.next = function () {\r\n        var fn = this._fn;\r\n        var it = this._source;\r\n        var value;\r\n        while ((value = it.next()) !== undefined) {\r\n            if (fn(value, this._index++)) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return FilterIterator;\r\n}());\r\nexports.FilterIterator = FilterIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Find the first value in an iterable which matches a predicate.\r\n *\r\n * @param object - The iterable or array-like object to search.\r\n *\r\n * @param fn - The predicate function to apply to the values.\r\n *\r\n * @returns The first matching value, or `undefined` if no matching\r\n *   value is found.\r\n *\r\n * #### Complexity\r\n * Linear.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { find } from '@phosphor/algorithm';\r\n *\r\n * interface IAnimal { species: string, name: string };\r\n *\r\n * function isCat(value: IAnimal): boolean {\r\n *   return value.species === 'cat';\r\n * }\r\n *\r\n * let data: IAnimal[] = [\r\n *   { species: 'dog', name: 'spot' },\r\n *   { species: 'cat', name: 'fluffy' },\r\n *   { species: 'alligator', name: 'pocho' }\r\n * ];\r\n *\r\n * find(data, isCat).name;  // 'fluffy'\r\n * ```\r\n */\r\nfunction find(object, fn) {\r\n    var index = 0;\r\n    var it = iter_1.iter(object);\r\n    var value;\r\n    while ((value = it.next()) !== undefined) {\r\n        if (fn(value, index++)) {\r\n            return value;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nexports.find = find;\r\n/**\r\n * Find the minimum value in an iterable.\r\n *\r\n * @param object - The iterable or array-like object to search.\r\n *\r\n * @param fn - The 3-way comparison function to apply to the values.\r\n *   It should return `< 0` if the first value is less than the second.\r\n *   `0` if the values are equivalent, or `> 0` if the first value is\r\n *   greater than the second.\r\n *\r\n * @returns The minimum value in the iterable. If multiple values are\r\n *   equivalent to the minimum, the left-most value is returned. If\r\n *   the iterable is empty, this returns `undefined`.\r\n *\r\n * #### Complexity\r\n * Linear.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { min } from '@phosphor/algorithm';\r\n *\r\n * function numberCmp(a: number, b: number): number {\r\n *   return a - b;\r\n * }\r\n *\r\n * min([7, 4, 0, 3, 9, 4], numberCmp);  // 0\r\n * ```\r\n */\r\nfunction min(object, fn) {\r\n    var it = iter_1.iter(object);\r\n    var value = it.next();\r\n    if (value === undefined) {\r\n        return undefined;\r\n    }\r\n    var result = value;\r\n    while ((value = it.next()) !== undefined) {\r\n        if (fn(value, result) < 0) {\r\n            result = value;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.min = min;\r\n/**\r\n * Find the maximum value in an iterable.\r\n *\r\n * @param object - The iterable or array-like object to search.\r\n *\r\n * @param fn - The 3-way comparison function to apply to the values.\r\n *   It should return `< 0` if the first value is less than the second.\r\n *   `0` if the values are equivalent, or `> 0` if the first value is\r\n *   greater than the second.\r\n *\r\n * @returns The maximum value in the iterable. If multiple values are\r\n *   equivalent to the maximum, the left-most value is returned. If\r\n *   the iterable is empty, this returns `undefined`.\r\n *\r\n * #### Complexity\r\n * Linear.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { max } from '@phosphor/algorithm';\r\n *\r\n * function numberCmp(a: number, b: number): number {\r\n *   return a - b;\r\n * }\r\n *\r\n * max([7, 4, 0, 3, 9, 4], numberCmp);  // 9\r\n * ```\r\n */\r\nfunction max(object, fn) {\r\n    var it = iter_1.iter(object);\r\n    var value = it.next();\r\n    if (value === undefined) {\r\n        return undefined;\r\n    }\r\n    var result = value;\r\n    while ((value = it.next()) !== undefined) {\r\n        if (fn(value, result) > 0) {\r\n            result = value;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.max = max;\r\n/**\r\n * Find the minimum and maximum values in an iterable.\r\n *\r\n * @param object - The iterable or array-like object to search.\r\n *\r\n * @param fn - The 3-way comparison function to apply to the values.\r\n *   It should return `< 0` if the first value is less than the second.\r\n *   `0` if the values are equivalent, or `> 0` if the first value is\r\n *   greater than the second.\r\n *\r\n * @returns A 2-tuple of the `[min, max]` values in the iterable. If\r\n *   multiple values are equivalent, the left-most values are returned.\r\n *   If the iterable is empty, this returns `undefined`.\r\n *\r\n * #### Complexity\r\n * Linear.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { minmax } from '@phosphor/algorithm';\r\n *\r\n * function numberCmp(a: number, b: number): number {\r\n *   return a - b;\r\n * }\r\n *\r\n * minmax([7, 4, 0, 3, 9, 4], numberCmp);  // [0, 9]\r\n * ```\r\n */\r\nfunction minmax(object, fn) {\r\n    var it = iter_1.iter(object);\r\n    var value = it.next();\r\n    if (value === undefined) {\r\n        return undefined;\r\n    }\r\n    var vmin = value;\r\n    var vmax = value;\r\n    while ((value = it.next()) !== undefined) {\r\n        if (fn(value, vmin) < 0) {\r\n            vmin = value;\r\n        }\r\n        else if (fn(value, vmax) > 0) {\r\n            vmax = value;\r\n        }\r\n    }\r\n    return [vmin, vmax];\r\n}\r\nexports.minmax = minmax;\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n__export(require(\"./array\"));\r\n__export(require(\"./chain\"));\r\n__export(require(\"./empty\"));\r\n__export(require(\"./filter\"));\r\n__export(require(\"./find\"));\r\n__export(require(\"./iter\"));\r\n__export(require(\"./map\"));\r\n__export(require(\"./range\"));\r\n__export(require(\"./reduce\"));\r\n__export(require(\"./repeat\"));\r\n__export(require(\"./retro\"));\r\n__export(require(\"./sort\"));\r\n__export(require(\"./stride\"));\r\n__export(require(\"./string\"));\r\n__export(require(\"./take\"));\r\n__export(require(\"./zip\"));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Create an iterator for an iterable object.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @returns A new iterator for the given object.\r\n *\r\n * #### Notes\r\n * This function allows iteration algorithms to operate on user-defined\r\n * iterable types and builtin array-like objects in a uniform fashion.\r\n */\r\nfunction iter(object) {\r\n    var it;\r\n    if (typeof object.iter === 'function') {\r\n        it = object.iter();\r\n    }\r\n    else {\r\n        it = new ArrayIterator(object);\r\n    }\r\n    return it;\r\n}\r\nexports.iter = iter;\r\n/**\r\n * Invoke a function for each value in an iterable.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @param fn - The callback function to invoke for each value.\r\n *\r\n * #### Notes\r\n * Iteration can be terminated early by returning `false` from the\r\n * callback function.\r\n *\r\n * #### Complexity\r\n * Linear.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { each } from '@phosphor/algorithm';\r\n *\r\n * let data = [5, 7, 0, -2, 9];\r\n *\r\n * each(data, value => { console.log(value); });\r\n * ```\r\n */\r\nfunction each(object, fn) {\r\n    var index = 0;\r\n    var it = iter(object);\r\n    var value;\r\n    while ((value = it.next()) !== undefined) {\r\n        if (fn(value, index++) === false) {\r\n            return;\r\n        }\r\n    }\r\n}\r\nexports.each = each;\r\n/**\r\n * Test whether all values in an iterable satisfy a predicate.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @param fn - The predicate function to invoke for each value.\r\n *\r\n * @returns `true` if all values pass the test, `false` otherwise.\r\n *\r\n * #### Notes\r\n * Iteration terminates on the first `false` predicate result.\r\n *\r\n * #### Complexity\r\n * Linear.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { every } from '@phosphor/algorithm';\r\n *\r\n * let data = [5, 7, 1];\r\n *\r\n * every(data, value => value % 2 === 0);  // false\r\n * every(data, value => value % 2 === 1);  // true\r\n * ```\r\n */\r\nfunction every(object, fn) {\r\n    var index = 0;\r\n    var it = iter(object);\r\n    var value;\r\n    while ((value = it.next()) !== undefined) {\r\n        if (!fn(value, index++)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.every = every;\r\n/**\r\n * Test whether any value in an iterable satisfies a predicate.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @param fn - The predicate function to invoke for each value.\r\n *\r\n * @returns `true` if any value passes the test, `false` otherwise.\r\n *\r\n * #### Notes\r\n * Iteration terminates on the first `true` predicate result.\r\n *\r\n * #### Complexity\r\n * Linear.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { some } from '@phosphor/algorithm';\r\n *\r\n * let data = [5, 7, 1];\r\n *\r\n * some(data, value => value === 7);  // true\r\n * some(data, value => value === 3);  // false\r\n * ```\r\n */\r\nfunction some(object, fn) {\r\n    var index = 0;\r\n    var it = iter(object);\r\n    var value;\r\n    while ((value = it.next()) !== undefined) {\r\n        if (fn(value, index++)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexports.some = some;\r\n/**\r\n * Create an array from an iterable of values.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @returns A new array of values from the given object.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { iter, toArray } from '@phosphor/algorithm';\r\n *\r\n * let data = [1, 2, 3, 4, 5, 6];\r\n *\r\n * let stream = iter(data);\r\n *\r\n * toArray(stream);  // [1, 2, 3, 4, 5, 6];\r\n * ```\r\n */\r\nfunction toArray(object) {\r\n    var index = 0;\r\n    var result = [];\r\n    var it = iter(object);\r\n    var value;\r\n    while ((value = it.next()) !== undefined) {\r\n        result[index++] = value;\r\n    }\r\n    return result;\r\n}\r\nexports.toArray = toArray;\r\n/**\r\n * An iterator for an array-like object.\r\n *\r\n * #### Notes\r\n * This iterator can be used for any builtin JS array-like object.\r\n */\r\nvar ArrayIterator = (function () {\r\n    /**\r\n     * Construct a new array iterator.\r\n     *\r\n     * @param source - The array-like object of interest.\r\n     */\r\n    function ArrayIterator(source) {\r\n        this._index = 0;\r\n        this._source = source;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    ArrayIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    ArrayIterator.prototype.clone = function () {\r\n        var result = new ArrayIterator(this._source);\r\n        result._index = this._index;\r\n        return result;\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    ArrayIterator.prototype.next = function () {\r\n        if (this._index >= this._source.length) {\r\n            return undefined;\r\n        }\r\n        return this._source[this._index++];\r\n    };\r\n    return ArrayIterator;\r\n}());\r\nexports.ArrayIterator = ArrayIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Transform the values of an iterable with a mapping function.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @param fn - The mapping function to invoke for each value.\r\n *\r\n * @returns An iterator which yields the transformed values.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { map, toArray } from '@phosphor/algorithm';\r\n *\r\n * let data = [1, 2, 3];\r\n *\r\n * let stream = map(data, value => value * 2);\r\n *\r\n * toArray(stream);  // [2, 4, 6]\r\n * ```\r\n */\r\nfunction map(object, fn) {\r\n    return new MapIterator(iter_1.iter(object), fn);\r\n}\r\nexports.map = map;\r\n/**\r\n * An iterator which transforms values using a mapping function.\r\n */\r\nvar MapIterator = (function () {\r\n    /**\r\n     * Construct a new map iterator.\r\n     *\r\n     * @param source - The iterator of values of interest.\r\n     *\r\n     * @param fn - The mapping function to invoke for each value.\r\n     */\r\n    function MapIterator(source, fn) {\r\n        this._index = 0;\r\n        this._source = source;\r\n        this._fn = fn;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    MapIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    MapIterator.prototype.clone = function () {\r\n        var result = new MapIterator(this._source.clone(), this._fn);\r\n        result._index = this._index;\r\n        return result;\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    MapIterator.prototype.next = function () {\r\n        var value = this._source.next();\r\n        if (value === undefined) {\r\n            return undefined;\r\n        }\r\n        return this._fn.call(undefined, value, this._index++);\r\n    };\r\n    return MapIterator;\r\n}());\r\nexports.MapIterator = MapIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Create an iterator of evenly spaced values.\r\n *\r\n * @param start - The starting value for the range, inclusive.\r\n *\r\n * @param stop - The stopping value for the range, exclusive.\r\n *\r\n * @param step - The distance between each value.\r\n *\r\n * @returns An iterator which produces evenly spaced values.\r\n *\r\n * #### Notes\r\n * In the single argument form of `range(stop)`, `start` defaults to\r\n * `0` and `step` defaults to `1`.\r\n *\r\n * In the two argument form of `range(start, stop)`, `step` defaults\r\n * to `1`.\r\n */\r\nfunction range(start, stop, step) {\r\n    if (stop === undefined) {\r\n        return new RangeIterator(0, start, 1);\r\n    }\r\n    if (step === undefined) {\r\n        return new RangeIterator(start, stop, 1);\r\n    }\r\n    return new RangeIterator(start, stop, step);\r\n}\r\nexports.range = range;\r\n/**\r\n * An iterator which produces a range of evenly spaced values.\r\n */\r\nvar RangeIterator = (function () {\r\n    /**\r\n     * Construct a new range iterator.\r\n     *\r\n     * @param start - The starting value for the range, inclusive.\r\n     *\r\n     * @param stop - The stopping value for the range, exclusive.\r\n     *\r\n     * @param step - The distance between each value.\r\n     */\r\n    function RangeIterator(start, stop, step) {\r\n        this._index = 0;\r\n        this._start = start;\r\n        this._stop = stop;\r\n        this._step = step;\r\n        this._length = Private.rangeLength(start, stop, step);\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    RangeIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    RangeIterator.prototype.clone = function () {\r\n        var result = new RangeIterator(this._start, this._stop, this._step);\r\n        result._index = this._index;\r\n        return result;\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    RangeIterator.prototype.next = function () {\r\n        if (this._index >= this._length) {\r\n            return undefined;\r\n        }\r\n        return this._start + this._step * this._index++;\r\n    };\r\n    return RangeIterator;\r\n}());\r\nexports.RangeIterator = RangeIterator;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Compute the effective length of a range.\r\n     *\r\n     * @param start - The starting value for the range, inclusive.\r\n     *\r\n     * @param stop - The stopping value for the range, exclusive.\r\n     *\r\n     * @param step - The distance between each value.\r\n     *\r\n     * @returns The number of steps need to traverse the range.\r\n     */\r\n    function rangeLength(start, stop, step) {\r\n        if (step === 0) {\r\n            return Infinity;\r\n        }\r\n        if (start > stop && step > 0) {\r\n            return 0;\r\n        }\r\n        if (start < stop && step < 0) {\r\n            return 0;\r\n        }\r\n        return Math.ceil((stop - start) / step);\r\n    }\r\n    Private.rangeLength = rangeLength;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\nfunction reduce(object, fn, initial) {\r\n    // Setup the iterator and fetch the first value.\r\n    var index = 0;\r\n    var it = iter_1.iter(object);\r\n    var first = it.next();\r\n    // An empty iterator and no initial value is an error.\r\n    if (first === undefined && initial === undefined) {\r\n        throw new TypeError('Reduce of empty iterable with no initial value.');\r\n    }\r\n    // If the iterator is empty, return the initial value.\r\n    if (first === undefined) {\r\n        return initial;\r\n    }\r\n    // If the iterator has a single item and no initial value, the\r\n    // reducer is not invoked and the first item is the return value.\r\n    var second = it.next();\r\n    if (second === undefined && initial === undefined) {\r\n        return first;\r\n    }\r\n    // If iterator has a single item and an initial value is provided,\r\n    // the reducer is invoked and that result is the return value.\r\n    if (second === undefined) {\r\n        return fn(initial, first, index++);\r\n    }\r\n    // Setup the initial accumlated value.\r\n    var accumulator;\r\n    if (initial === undefined) {\r\n        accumulator = fn(first, second, index++);\r\n    }\r\n    else {\r\n        accumulator = fn(fn(initial, first, index++), second, index++);\r\n    }\r\n    // Iterate the rest of the values, updating the accumulator.\r\n    var next;\r\n    while ((next = it.next()) !== undefined) {\r\n        accumulator = fn(accumulator, next, index++);\r\n    }\r\n    // Return the final accumulated value.\r\n    return accumulator;\r\n}\r\nexports.reduce = reduce;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Create an iterator which repeats a value a number of times.\r\n *\r\n * @param value - The value to repeat.\r\n *\r\n * @param count - The number of times to repeat the value.\r\n *\r\n * @returns A new iterator which repeats the specified value.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { repeat, toArray } from '@phosphor/algorithm';\r\n *\r\n * let stream = repeat(7, 3);\r\n *\r\n * toArray(stream);  // [7, 7, 7]\r\n * ```\r\n */\r\nfunction repeat(value, count) {\r\n    return new RepeatIterator(value, count);\r\n}\r\nexports.repeat = repeat;\r\n/**\r\n * Create an iterator which yields a value a single time.\r\n *\r\n * @param value - The value to wrap in an iterator.\r\n *\r\n * @returns A new iterator which yields the value a single time.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { once, toArray } from '@phosphor/algorithm';\r\n *\r\n * let stream = once(7);\r\n *\r\n * toArray(stream);  // [7]\r\n * ```\r\n */\r\nfunction once(value) {\r\n    return new RepeatIterator(value, 1);\r\n}\r\nexports.once = once;\r\n/**\r\n * An iterator which repeats a value a specified number of times.\r\n */\r\nvar RepeatIterator = (function () {\r\n    /**\r\n     * Construct a new repeat iterator.\r\n     *\r\n     * @param value - The value to repeat.\r\n     *\r\n     * @param count - The number of times to repeat the value.\r\n     */\r\n    function RepeatIterator(value, count) {\r\n        this._value = value;\r\n        this._count = count;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    RepeatIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    RepeatIterator.prototype.clone = function () {\r\n        return new RepeatIterator(this._value, this._count);\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    RepeatIterator.prototype.next = function () {\r\n        if (this._count <= 0) {\r\n            return undefined;\r\n        }\r\n        this._count--;\r\n        return this._value;\r\n    };\r\n    return RepeatIterator;\r\n}());\r\nexports.RepeatIterator = RepeatIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Create an iterator for a retroable object.\r\n *\r\n * @param object - The retroable or array-like object of interest.\r\n *\r\n * @returns An iterator which traverses the object's values in reverse.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { retro, toArray } from '@phosphor/algorithm';\r\n *\r\n * let data = [1, 2, 3, 4, 5, 6];\r\n *\r\n * let stream = retro(data);\r\n *\r\n * toArray(stream);  // [6, 5, 4, 3, 2, 1]\r\n * ```\r\n */\r\nfunction retro(object) {\r\n    var it;\r\n    if (typeof object.retro === 'function') {\r\n        it = object.retro();\r\n    }\r\n    else {\r\n        it = new RetroArrayIterator(object);\r\n    }\r\n    return it;\r\n}\r\nexports.retro = retro;\r\n/**\r\n * An iterator which traverses an array-like object in reverse.\r\n *\r\n * #### Notes\r\n * This iterator can be used for any builtin JS array-like object.\r\n */\r\nvar RetroArrayIterator = (function () {\r\n    /**\r\n     * Construct a new retro iterator.\r\n     *\r\n     * @param source - The array-like object of interest.\r\n     */\r\n    function RetroArrayIterator(source) {\r\n        this._source = source;\r\n        this._index = source.length - 1;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    RetroArrayIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    RetroArrayIterator.prototype.clone = function () {\r\n        var result = new RetroArrayIterator(this._source);\r\n        result._index = this._index;\r\n        return result;\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    RetroArrayIterator.prototype.next = function () {\r\n        if (this._index < 0 || this._index >= this._source.length) {\r\n            return undefined;\r\n        }\r\n        return this._source[this._index--];\r\n    };\r\n    return RetroArrayIterator;\r\n}());\r\nexports.RetroArrayIterator = RetroArrayIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Topologically sort an iterable of edges.\r\n *\r\n * @param edges - The iterable or array-like object of edges to sort.\r\n *   An edge is represented as a 2-tuple of `[fromNode, toNode]`.\r\n *\r\n * @returns The topologically sorted array of nodes.\r\n *\r\n * #### Notes\r\n * If a cycle is present in the graph, the cycle will be ignored and\r\n * the return value will be only approximately sorted.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { topologicSort } from '@phosphor/algorithm';\r\n *\r\n * let data = [\r\n *   ['d', 'e'],\r\n *   ['c', 'd'],\r\n *   ['a', 'b'],\r\n *   ['b', 'c']\r\n * ];\r\n *\r\n * topologicSort(data);  // ['a', 'b', 'c', 'd', 'e']\r\n */\r\nfunction topologicSort(edges) {\r\n    // Setup the shared sorting state.\r\n    var sorted = [];\r\n    var visited = new Set();\r\n    var graph = new Map();\r\n    // Add the edges to the graph.\r\n    iter_1.each(edges, addEdge);\r\n    // Visit each node in the graph.\r\n    graph.forEach(function (v, k) { visit(k); });\r\n    // Return the sorted results.\r\n    return sorted;\r\n    // Add an edge to the graph.\r\n    function addEdge(edge) {\r\n        var fromNode = edge[0], toNode = edge[1];\r\n        var children = graph.get(toNode);\r\n        if (children) {\r\n            children.push(fromNode);\r\n        }\r\n        else {\r\n            graph.set(toNode, [fromNode]);\r\n        }\r\n    }\r\n    // Recursively visit the node.\r\n    function visit(node) {\r\n        if (visited.has(node)) {\r\n            return;\r\n        }\r\n        visited.add(node);\r\n        var children = graph.get(node);\r\n        if (children) {\r\n            children.forEach(visit);\r\n        }\r\n        sorted.push(node);\r\n    }\r\n}\r\nexports.topologicSort = topologicSort;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Iterate over an iterable using a stepped increment.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @param step - The distance to step on each iteration. A value\r\n *   of less than `1` will behave the same as a value of `1`.\r\n *\r\n * @returns An iterator which traverses the iterable step-wise.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { stride, toArray } from '@phosphor/algorithm';\r\n *\r\n * let data = [1, 2, 3, 4, 5, 6];\r\n *\r\n * let stream = stride(data, 2);\r\n *\r\n * toArray(stream);  // [1, 3, 5];\r\n * ```\r\n */\r\nfunction stride(object, step) {\r\n    return new StrideIterator(iter_1.iter(object), step);\r\n}\r\nexports.stride = stride;\r\n/**\r\n * An iterator which traverses a source iterator step-wise.\r\n */\r\nvar StrideIterator = (function () {\r\n    /**\r\n     * Construct a new stride iterator.\r\n     *\r\n     * @param source - The iterator of values of interest.\r\n     *\r\n     * @param step - The distance to step on each iteration. A value\r\n     *   of less than `1` will behave the same as a value of `1`.\r\n     */\r\n    function StrideIterator(source, step) {\r\n        this._source = source;\r\n        this._step = step;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    StrideIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    StrideIterator.prototype.clone = function () {\r\n        return new StrideIterator(this._source.clone(), this._step);\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    StrideIterator.prototype.next = function () {\r\n        var value = this._source.next();\r\n        for (var n = this._step - 1; n > 0; --n) {\r\n            this._source.next();\r\n        }\r\n        return value;\r\n    };\r\n    return StrideIterator;\r\n}());\r\nexports.StrideIterator = StrideIterator;\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The namespace for string-specific algorithms.\r\n */\r\nvar StringExt;\r\n(function (StringExt) {\r\n    /**\r\n     * Find the indices of characters in a source text.\r\n     *\r\n     * @param source - The source text which should be searched.\r\n     *\r\n     * @param query - The characters to locate in the source text.\r\n     *\r\n     * @param start - The index to start the search.\r\n     *\r\n     * @returns The matched indices, or `null` if there is no match.\r\n     *\r\n     * #### Complexity\r\n     * Linear on `sourceText`.\r\n     *\r\n     * #### Notes\r\n     * In order for there to be a match, all of the characters in `query`\r\n     * **must** appear in `source` in the order given by `query`.\r\n     *\r\n     * Characters are matched using strict `===` equality.\r\n     */\r\n    function findIndices(source, query, start) {\r\n        if (start === void 0) { start = 0; }\r\n        var indices = new Array(query.length);\r\n        for (var i = 0, j = start, n = query.length; i < n; ++i, ++j) {\r\n            j = source.indexOf(query[i], j);\r\n            if (j === -1) {\r\n                return null;\r\n            }\r\n            indices[i] = j;\r\n        }\r\n        return indices;\r\n    }\r\n    StringExt.findIndices = findIndices;\r\n    /**\r\n     * A string matcher which uses a sum-of-squares algorithm.\r\n     *\r\n     * @param source - The source text which should be searched.\r\n     *\r\n     * @param query - The characters to locate in the source text.\r\n     *\r\n     * @param start - The index to start the search.\r\n     *\r\n     * @returns The match result, or `null` if there is no match.\r\n     *   A lower `score` represents a stronger match.\r\n     *\r\n     * #### Complexity\r\n     * Linear on `sourceText`.\r\n     *\r\n     * #### Notes\r\n     * This scoring algorithm uses a sum-of-squares approach to determine\r\n     * the score. In order for there to be a match, all of the characters\r\n     * in `query` **must** appear in `source` in order. The index of each\r\n     * matching character is squared and added to the score. This means\r\n     * that early and consecutive character matches are preferred, while\r\n     * late matches are heavily penalized.\r\n     */\r\n    function matchSumOfSquares(source, query, start) {\r\n        if (start === void 0) { start = 0; }\r\n        var indices = findIndices(source, query, start);\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n        var score = 0;\r\n        for (var i = 0, n = indices.length; i < n; ++i) {\r\n            var j = indices[i] - start;\r\n            score += j * j;\r\n        }\r\n        return { score: score, indices: indices };\r\n    }\r\n    StringExt.matchSumOfSquares = matchSumOfSquares;\r\n    /**\r\n     * A string matcher which uses a sum-of-deltas algorithm.\r\n     *\r\n     * @param source - The source text which should be searched.\r\n     *\r\n     * @param query - The characters to locate in the source text.\r\n     *\r\n     * @param start - The index to start the search.\r\n     *\r\n     * @returns The match result, or `null` if there is no match.\r\n     *   A lower `score` represents a stronger match.\r\n     *\r\n     * #### Complexity\r\n     * Linear on `sourceText`.\r\n     *\r\n     * #### Notes\r\n     * This scoring algorithm uses a sum-of-deltas approach to determine\r\n     * the score. In order for there to be a match, all of the characters\r\n     * in `query` **must** appear in `source` in order. The delta between\r\n     * the indices are summed to create the score. This means that groups\r\n     * of matched characters are preferred, while fragmented matches are\r\n     * penalized.\r\n     */\r\n    function matchSumOfDeltas(source, query, start) {\r\n        if (start === void 0) { start = 0; }\r\n        var indices = findIndices(source, query, start);\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n        var score = 0;\r\n        var last = start - 1;\r\n        for (var i = 0, n = indices.length; i < n; ++i) {\r\n            var j = indices[i];\r\n            score += j - last - 1;\r\n            last = j;\r\n        }\r\n        return { score: score, indices: indices };\r\n    }\r\n    StringExt.matchSumOfDeltas = matchSumOfDeltas;\r\n    /**\r\n     * Highlight the matched characters of a source text.\r\n     *\r\n     * @param source - The text which should be highlighted.\r\n     *\r\n     * @param indices - The indices of the matched characters. They must\r\n     *   appear in increasing order and must be in bounds of the source.\r\n     *\r\n     * @param fn - The function to apply to the matched chunks.\r\n     *\r\n     * @returns An array of unmatched and highlighted chunks.\r\n     */\r\n    function highlight(source, indices, fn) {\r\n        // Set up the result array.\r\n        var result = [];\r\n        // Set up the counter variables.\r\n        var k = 0;\r\n        var last = 0;\r\n        var n = indices.length;\r\n        // Iterator over each index.\r\n        while (k < n) {\r\n            // Set up the chunk indices.\r\n            var i = indices[k];\r\n            var j = indices[k];\r\n            // Advance the right chunk index until it's non-contiguous.\r\n            while (++k < n && indices[k] === j + 1) {\r\n                j++;\r\n            }\r\n            // Extract the unmatched text.\r\n            if (last < i) {\r\n                result.push(source.slice(last, i));\r\n            }\r\n            // Extract and highlight the matched text.\r\n            if (i < j + 1) {\r\n                result.push(fn(source.slice(i, j + 1)));\r\n            }\r\n            // Update the last visited index.\r\n            last = j + 1;\r\n        }\r\n        // Extract any remaining unmatched text.\r\n        if (last < source.length) {\r\n            result.push(source.slice(last));\r\n        }\r\n        // Return the highlighted result.\r\n        return result;\r\n    }\r\n    StringExt.highlight = highlight;\r\n})(StringExt = exports.StringExt || (exports.StringExt = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Take a fixed number of items from an iterable.\r\n *\r\n * @param object - The iterable or array-like object of interest.\r\n *\r\n * @param count - The number of items to take from the iterable.\r\n *\r\n * @returns An iterator which yields the specified number of items\r\n *   from the source iterable.\r\n *\r\n * #### Notes\r\n * The returned iterator will exhaust early if the source iterable\r\n * contains an insufficient number of items.\r\n */\r\nfunction take(object, count) {\r\n    return new TakeIterator(iter_1.iter(object), count);\r\n}\r\nexports.take = take;\r\n/**\r\n * An iterator which takes a fixed number of items from a source.\r\n */\r\nvar TakeIterator = (function () {\r\n    /**\r\n     * Construct a new take iterator.\r\n     *\r\n     * @param source - The iterator of interest.\r\n     *\r\n     * @param count - The number of items to take from the source.\r\n     */\r\n    function TakeIterator(source, count) {\r\n        this._source = source;\r\n        this._count = count;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    TakeIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    TakeIterator.prototype.clone = function () {\r\n        return new TakeIterator(this._source.clone(), this._count);\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    TakeIterator.prototype.next = function () {\r\n        if (this._count <= 0) {\r\n            return undefined;\r\n        }\r\n        var value = this._source.next();\r\n        if (value === undefined) {\r\n            return undefined;\r\n        }\r\n        this._count--;\r\n        return value;\r\n    };\r\n    return TakeIterator;\r\n}());\r\nexports.TakeIterator = TakeIterator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar iter_1 = require(\"./iter\");\r\n/**\r\n * Iterate several iterables in lockstep.\r\n *\r\n * @param objects - The iterable or array-like objects of interest.\r\n *\r\n * @returns An iterator which yields successive tuples of values where\r\n *   each value is taken in turn from the provided iterables. It will\r\n *   be as long as the shortest provided iterable.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { zip, toArray } from '@phosphor/algorithm';\r\n *\r\n * let data1 = [1, 2, 3];\r\n * let data2 = [4, 5, 6];\r\n *\r\n * let stream = zip(data1, data2);\r\n *\r\n * toArray(stream);  // [[1, 4], [2, 5], [3, 6]]\r\n * ```\r\n */\r\nfunction zip() {\r\n    var objects = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        objects[_i] = arguments[_i];\r\n    }\r\n    return new ZipIterator(objects.map(iter_1.iter));\r\n}\r\nexports.zip = zip;\r\n/**\r\n * An iterator which iterates several sources in lockstep.\r\n */\r\nvar ZipIterator = (function () {\r\n    /**\r\n     * Construct a new zip iterator.\r\n     *\r\n     * @param source - The iterators of interest.\r\n     */\r\n    function ZipIterator(source) {\r\n        this._source = source;\r\n    }\r\n    /**\r\n     * Get an iterator over the object's values.\r\n     *\r\n     * @returns An iterator which yields the object's values.\r\n     */\r\n    ZipIterator.prototype.iter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * Create an independent clone of the iterator.\r\n     *\r\n     * @returns A new independent clone of the iterator.\r\n     */\r\n    ZipIterator.prototype.clone = function () {\r\n        return new ZipIterator(this._source.map(function (it) { return it.clone(); }));\r\n    };\r\n    /**\r\n     * Get the next value from the iterator.\r\n     *\r\n     * @returns The next value from the iterator, or `undefined`.\r\n     */\r\n    ZipIterator.prototype.next = function () {\r\n        var result = new Array(this._source.length);\r\n        for (var i = 0, n = this._source.length; i < n; ++i) {\r\n            var value = this._source[i].next();\r\n            if (value === undefined) {\r\n                return undefined;\r\n            }\r\n            result[i] = value;\r\n        }\r\n        return result;\r\n    };\r\n    return ZipIterator;\r\n}());\r\nexports.ZipIterator = ZipIterator;\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n__export(require(\"./linkedlist\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\n/**\r\n * A generic doubly-linked list.\r\n */\r\nvar LinkedList = (function () {\r\n    /**\r\n     * Construct a new linked list.\r\n     */\r\n    function LinkedList() {\r\n        this._first = null;\r\n        this._last = null;\r\n        this._length = 0;\r\n    }\r\n    Object.defineProperty(LinkedList.prototype, \"isEmpty\", {\r\n        /**\r\n         * Whether the list is empty.\r\n         *\r\n         * #### Complexity\r\n         * Constant.\r\n         */\r\n        get: function () {\r\n            return this._length === 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LinkedList.prototype, \"length\", {\r\n        /**\r\n         * The length of the list.\r\n         *\r\n         * #### Complexity\r\n         * Constant.\r\n         */\r\n        get: function () {\r\n            return this._length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LinkedList.prototype, \"first\", {\r\n        /**\r\n         * The first value in the list.\r\n         *\r\n         * This is `undefined` if the list is empty.\r\n         *\r\n         * #### Complexity\r\n         * Constant.\r\n         */\r\n        get: function () {\r\n            return this._first ? this._first.value : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LinkedList.prototype, \"last\", {\r\n        /**\r\n         * The last value in the list.\r\n         *\r\n         * This is `undefined` if the list is empty.\r\n         *\r\n         * #### Complexity\r\n         * Constant.\r\n         */\r\n        get: function () {\r\n            return this._last ? this._last.value : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LinkedList.prototype, \"firstNode\", {\r\n        /**\r\n         * The first node in the list.\r\n         *\r\n         * This is `null` if the list is empty.\r\n         *\r\n         * #### Complexity\r\n         * Constant.\r\n         */\r\n        get: function () {\r\n            return this._first;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LinkedList.prototype, \"lastNode\", {\r\n        /**\r\n         * The last node in the list.\r\n         *\r\n         * This is `null` if the list is empty.\r\n         *\r\n         * #### Complexity\r\n         * Constant.\r\n         */\r\n        get: function () {\r\n            return this._last;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create an iterator over the values in the list.\r\n     *\r\n     * @returns A new iterator starting with the first value.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.iter = function () {\r\n        return new LinkedList.ForwardValueIterator(this._first);\r\n    };\r\n    /**\r\n     * Create a reverse iterator over the values in the list.\r\n     *\r\n     * @returns A new iterator starting with the last value.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.retro = function () {\r\n        return new LinkedList.RetroValueIterator(this._last);\r\n    };\r\n    /**\r\n     * Create an iterator over the nodes in the list.\r\n     *\r\n     * @returns A new iterator starting with the first node.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.nodes = function () {\r\n        return new LinkedList.ForwardNodeIterator(this._first);\r\n    };\r\n    /**\r\n     * Create a reverse iterator over the nodes in the list.\r\n     *\r\n     * @returns A new iterator starting with the last node.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.retroNodes = function () {\r\n        return new LinkedList.RetroNodeIterator(this._last);\r\n    };\r\n    /**\r\n     * Add a value to the beginning of the list.\r\n     *\r\n     * @param value - The value to add to the beginning of the list.\r\n     *\r\n     * @returns The list node which holds the value.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.addFirst = function (value) {\r\n        var node = new Private.LinkedListNode(this, value);\r\n        if (!this._first) {\r\n            this._first = node;\r\n            this._last = node;\r\n        }\r\n        else {\r\n            node.next = this._first;\r\n            this._first.prev = node;\r\n            this._first = node;\r\n        }\r\n        this._length++;\r\n        return node;\r\n    };\r\n    /**\r\n     * Add a value to the end of the list.\r\n     *\r\n     * @param value - The value to add to the end of the list.\r\n     *\r\n     * @returns The list node which holds the value.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.addLast = function (value) {\r\n        var node = new Private.LinkedListNode(this, value);\r\n        if (!this._last) {\r\n            this._first = node;\r\n            this._last = node;\r\n        }\r\n        else {\r\n            node.prev = this._last;\r\n            this._last.next = node;\r\n            this._last = node;\r\n        }\r\n        this._length++;\r\n        return node;\r\n    };\r\n    /**\r\n     * Insert a value before a specific node in the list.\r\n     *\r\n     * @param value - The value to insert before the reference node.\r\n     *\r\n     * @param ref - The reference node of interest. If this is `null`,\r\n     *   the value will be added to the beginning of the list.\r\n     *\r\n     * @returns The list node which holds the value.\r\n     *\r\n     * #### Notes\r\n     * The reference node must be owned by the list.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.insertBefore = function (value, ref) {\r\n        if (!ref || ref === this._first) {\r\n            return this.addFirst(value);\r\n        }\r\n        if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\r\n            throw new Error('Reference node is not owned by the list.');\r\n        }\r\n        var node = new Private.LinkedListNode(this, value);\r\n        var _ref = ref;\r\n        var prev = _ref.prev;\r\n        node.next = _ref;\r\n        node.prev = prev;\r\n        _ref.prev = node;\r\n        prev.next = node;\r\n        this._length++;\r\n        return node;\r\n    };\r\n    /**\r\n     * Insert a value after a specific node in the list.\r\n     *\r\n     * @param value - The value to insert after the reference node.\r\n     *\r\n     * @param ref - The reference node of interest. If this is `null`,\r\n     *   the value will be added to the end of the list.\r\n     *\r\n     * @returns The list node which holds the value.\r\n     *\r\n     * #### Notes\r\n     * The reference node must be owned by the list.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.insertAfter = function (value, ref) {\r\n        if (!ref || ref === this._last) {\r\n            return this.addLast(value);\r\n        }\r\n        if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\r\n            throw new Error('Reference node is not owned by the list.');\r\n        }\r\n        var node = new Private.LinkedListNode(this, value);\r\n        var _ref = ref;\r\n        var next = _ref.next;\r\n        node.next = next;\r\n        node.prev = _ref;\r\n        _ref.next = node;\r\n        next.prev = node;\r\n        this._length++;\r\n        return node;\r\n    };\r\n    /**\r\n     * Remove and return the value at the beginning of the list.\r\n     *\r\n     * @returns The removed value, or `undefined` if the list is empty.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.removeFirst = function () {\r\n        var node = this._first;\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (node === this._last) {\r\n            this._first = null;\r\n            this._last = null;\r\n        }\r\n        else {\r\n            this._first = node.next;\r\n            this._first.prev = null;\r\n        }\r\n        node.list = null;\r\n        node.next = null;\r\n        node.prev = null;\r\n        this._length--;\r\n        return node.value;\r\n    };\r\n    /**\r\n     * Remove and return the value at the end of the list.\r\n     *\r\n     * @returns The removed value, or `undefined` if the list is empty.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     */\r\n    LinkedList.prototype.removeLast = function () {\r\n        var node = this._last;\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (node === this._first) {\r\n            this._first = null;\r\n            this._last = null;\r\n        }\r\n        else {\r\n            this._last = node.prev;\r\n            this._last.next = null;\r\n        }\r\n        node.list = null;\r\n        node.next = null;\r\n        node.prev = null;\r\n        this._length--;\r\n        return node.value;\r\n    };\r\n    /**\r\n     * Remove a specific node from the list.\r\n     *\r\n     * @param node - The node to remove from the list.\r\n     *\r\n     * #### Complexity\r\n     * Constant.\r\n     *\r\n     * #### Notes\r\n     * The node must be owned by the list.\r\n     */\r\n    LinkedList.prototype.removeNode = function (node) {\r\n        if (!(node instanceof Private.LinkedListNode) || node.list !== this) {\r\n            throw new Error('Node is not owned by the list.');\r\n        }\r\n        var _node = node;\r\n        if (_node === this._first && _node === this._last) {\r\n            this._first = null;\r\n            this._last = null;\r\n        }\r\n        else if (_node === this._first) {\r\n            this._first = _node.next;\r\n            this._first.prev = null;\r\n        }\r\n        else if (_node === this._last) {\r\n            this._last = _node.prev;\r\n            this._last.next = null;\r\n        }\r\n        else {\r\n            _node.next.prev = _node.prev;\r\n            _node.prev.next = _node.next;\r\n        }\r\n        _node.list = null;\r\n        _node.next = null;\r\n        _node.prev = null;\r\n        this._length--;\r\n    };\r\n    /**\r\n     * Remove all values from the list.\r\n     *\r\n     * #### Complexity\r\n     * Linear.\r\n     */\r\n    LinkedList.prototype.clear = function () {\r\n        var node = this._first;\r\n        while (node) {\r\n            var next = node.next;\r\n            node.list = null;\r\n            node.prev = null;\r\n            node.next = null;\r\n            node = next;\r\n        }\r\n        this._first = null;\r\n        this._last = null;\r\n        this._length = 0;\r\n    };\r\n    return LinkedList;\r\n}());\r\nexports.LinkedList = LinkedList;\r\n/**\r\n * The namespace for the `LinkedList` class statics.\r\n */\r\n(function (LinkedList) {\r\n    /**\r\n     * Create a linked list from an iterable of values.\r\n     *\r\n     * @param values - The iterable or array-like object of interest.\r\n     *\r\n     * @returns A new linked list initialized with the given values.\r\n     */\r\n    function from(values) {\r\n        var list = new LinkedList();\r\n        algorithm_1.each(values, function (value) { list.addLast(value); });\r\n        return list;\r\n    }\r\n    LinkedList.from = from;\r\n    /**\r\n     * A forward iterator for values in a linked list.\r\n     */\r\n    var ForwardValueIterator = (function () {\r\n        /**\r\n         * Construct a forward value iterator.\r\n         *\r\n         * @param node - The first node in the list.\r\n         */\r\n        function ForwardValueIterator(node) {\r\n            this._node = node;\r\n        }\r\n        /**\r\n         * Get an iterator over the object's values.\r\n         *\r\n         * @returns An iterator which yields the object's values.\r\n         */\r\n        ForwardValueIterator.prototype.iter = function () {\r\n            return this;\r\n        };\r\n        /**\r\n         * Create an independent clone of the iterator.\r\n         *\r\n         * @returns A new independent clone of the iterator.\r\n         */\r\n        ForwardValueIterator.prototype.clone = function () {\r\n            return new ForwardValueIterator(this._node);\r\n        };\r\n        /**\r\n         * Get the next value from the iterator.\r\n         *\r\n         * @returns The next value from the iterator, or `undefined`.\r\n         */\r\n        ForwardValueIterator.prototype.next = function () {\r\n            if (!this._node) {\r\n                return undefined;\r\n            }\r\n            var node = this._node;\r\n            this._node = node.next;\r\n            return node.value;\r\n        };\r\n        return ForwardValueIterator;\r\n    }());\r\n    LinkedList.ForwardValueIterator = ForwardValueIterator;\r\n    /**\r\n     * A reverse iterator for values in a linked list.\r\n     */\r\n    var RetroValueIterator = (function () {\r\n        /**\r\n         * Construct a retro value iterator.\r\n         *\r\n         * @param node - The last node in the list.\r\n         */\r\n        function RetroValueIterator(node) {\r\n            this._node = node;\r\n        }\r\n        /**\r\n         * Get an iterator over the object's values.\r\n         *\r\n         * @returns An iterator which yields the object's values.\r\n         */\r\n        RetroValueIterator.prototype.iter = function () {\r\n            return this;\r\n        };\r\n        /**\r\n         * Create an independent clone of the iterator.\r\n         *\r\n         * @returns A new independent clone of the iterator.\r\n         */\r\n        RetroValueIterator.prototype.clone = function () {\r\n            return new RetroValueIterator(this._node);\r\n        };\r\n        /**\r\n         * Get the next value from the iterator.\r\n         *\r\n         * @returns The next value from the iterator, or `undefined`.\r\n         */\r\n        RetroValueIterator.prototype.next = function () {\r\n            if (!this._node) {\r\n                return undefined;\r\n            }\r\n            var node = this._node;\r\n            this._node = node.prev;\r\n            return node.value;\r\n        };\r\n        return RetroValueIterator;\r\n    }());\r\n    LinkedList.RetroValueIterator = RetroValueIterator;\r\n    /**\r\n     * A forward iterator for nodes in a linked list.\r\n     */\r\n    var ForwardNodeIterator = (function () {\r\n        /**\r\n         * Construct a forward node iterator.\r\n         *\r\n         * @param node - The first node in the list.\r\n         */\r\n        function ForwardNodeIterator(node) {\r\n            this._node = node;\r\n        }\r\n        /**\r\n         * Get an iterator over the object's values.\r\n         *\r\n         * @returns An iterator which yields the object's values.\r\n         */\r\n        ForwardNodeIterator.prototype.iter = function () {\r\n            return this;\r\n        };\r\n        /**\r\n         * Create an independent clone of the iterator.\r\n         *\r\n         * @returns A new independent clone of the iterator.\r\n         */\r\n        ForwardNodeIterator.prototype.clone = function () {\r\n            return new ForwardNodeIterator(this._node);\r\n        };\r\n        /**\r\n         * Get the next value from the iterator.\r\n         *\r\n         * @returns The next value from the iterator, or `undefined`.\r\n         */\r\n        ForwardNodeIterator.prototype.next = function () {\r\n            if (!this._node) {\r\n                return undefined;\r\n            }\r\n            var node = this._node;\r\n            this._node = node.next;\r\n            return node;\r\n        };\r\n        return ForwardNodeIterator;\r\n    }());\r\n    LinkedList.ForwardNodeIterator = ForwardNodeIterator;\r\n    /**\r\n     * A reverse iterator for nodes in a linked list.\r\n     */\r\n    var RetroNodeIterator = (function () {\r\n        /**\r\n         * Construct a retro node iterator.\r\n         *\r\n         * @param node - The last node in the list.\r\n         */\r\n        function RetroNodeIterator(node) {\r\n            this._node = node;\r\n        }\r\n        /**\r\n         * Get an iterator over the object's values.\r\n         *\r\n         * @returns An iterator which yields the object's values.\r\n         */\r\n        RetroNodeIterator.prototype.iter = function () {\r\n            return this;\r\n        };\r\n        /**\r\n         * Create an independent clone of the iterator.\r\n         *\r\n         * @returns A new independent clone of the iterator.\r\n         */\r\n        RetroNodeIterator.prototype.clone = function () {\r\n            return new RetroNodeIterator(this._node);\r\n        };\r\n        /**\r\n         * Get the next value from the iterator.\r\n         *\r\n         * @returns The next value from the iterator, or `undefined`.\r\n         */\r\n        RetroNodeIterator.prototype.next = function () {\r\n            if (!this._node) {\r\n                return undefined;\r\n            }\r\n            var node = this._node;\r\n            this._node = node.prev;\r\n            return node;\r\n        };\r\n        return RetroNodeIterator;\r\n    }());\r\n    LinkedList.RetroNodeIterator = RetroNodeIterator;\r\n})(LinkedList = exports.LinkedList || (exports.LinkedList = {}));\r\nexports.LinkedList = LinkedList;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The internal linked list node implementation.\r\n     */\r\n    var LinkedListNode = (function () {\r\n        /**\r\n         * Construct a new linked list node.\r\n         *\r\n         * @param list - The list which owns the node.\r\n         *\r\n         * @param value - The value for the link.\r\n         */\r\n        function LinkedListNode(list, value) {\r\n            /**\r\n             * The linked list which created and owns the node.\r\n             */\r\n            this.list = null;\r\n            /**\r\n             * The next node in the list.\r\n             */\r\n            this.next = null;\r\n            /**\r\n             * The previous node in the list.\r\n             */\r\n            this.prev = null;\r\n            this.list = list;\r\n            this.value = value;\r\n        }\r\n        return LinkedListNode;\r\n    }());\r\n    Private.LinkedListNode = LinkedListNode;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar coreutils_1 = require(\"@phosphor/coreutils\");\r\nvar disposable_1 = require(\"@phosphor/disposable\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar keyboard_1 = require(\"@phosphor/keyboard\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\n/**\r\n * An object which manages a collection of commands.\r\n *\r\n * #### Notes\r\n * A command registry can be used to populate a variety of action-based\r\n * widgets, such as command palettes, menus, and toolbars.\r\n */\r\nvar CommandRegistry = (function () {\r\n    /**\r\n     * Construct a new command registry.\r\n     */\r\n    function CommandRegistry() {\r\n        this._timerID = 0;\r\n        this._replaying = false;\r\n        this._keystrokes = [];\r\n        this._keydownEvents = [];\r\n        this._keyBindings = [];\r\n        this._exactKeyMatch = null;\r\n        this._commands = Object.create(null);\r\n        this._commandChanged = new signaling_1.Signal(this);\r\n        this._commandExecuted = new signaling_1.Signal(this);\r\n        this._keyBindingChanged = new signaling_1.Signal(this);\r\n    }\r\n    Object.defineProperty(CommandRegistry.prototype, \"commandChanged\", {\r\n        /**\r\n         * A signal emitted when a command has changed.\r\n         *\r\n         * #### Notes\r\n         * This signal is useful for visual representations of commands which\r\n         * need to refresh when the state of a relevant command has changed.\r\n         */\r\n        get: function () {\r\n            return this._commandChanged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommandRegistry.prototype, \"commandExecuted\", {\r\n        /**\r\n         * A signal emitted when a command has executed.\r\n         *\r\n         * #### Notes\r\n         * Care should be taken when consuming this signal. It is intended to\r\n         * be used largely for debugging and logging purposes. It should not\r\n         * be (ab)used for general purpose spying on command execution.\r\n         */\r\n        get: function () {\r\n            return this._commandExecuted;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommandRegistry.prototype, \"keyBindingChanged\", {\r\n        /**\r\n         * A signal emitted when a key binding is changed.\r\n         */\r\n        get: function () {\r\n            return this._keyBindingChanged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommandRegistry.prototype, \"keyBindings\", {\r\n        /**\r\n         * A read-only array of the key bindings in the registry.\r\n         */\r\n        get: function () {\r\n            return this._keyBindings;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * List the ids of the registered commands.\r\n     *\r\n     * @returns A new array of the registered command ids.\r\n     */\r\n    CommandRegistry.prototype.listCommands = function () {\r\n        return Object.keys(this._commands);\r\n    };\r\n    /**\r\n     * Test whether a specific command is registered.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @returns `true` if the command is registered, `false` otherwise.\r\n     */\r\n    CommandRegistry.prototype.hasCommand = function (id) {\r\n        return id in this._commands;\r\n    };\r\n    /**\r\n     * Add a command to the registry.\r\n     *\r\n     * @param id - The unique id of the command.\r\n     *\r\n     * @param options - The options for the command.\r\n     *\r\n     * @returns A disposable which will remove the command.\r\n     *\r\n     * @throws An error if the given `id` is already registered.\r\n     */\r\n    CommandRegistry.prototype.addCommand = function (id, options) {\r\n        var _this = this;\r\n        // Throw an error if the id is already registered.\r\n        if (id in this._commands) {\r\n            throw new Error(\"Command '\" + id + \"' already registered.\");\r\n        }\r\n        // Add the command to the registry.\r\n        this._commands[id] = Private.createCommand(options);\r\n        // Emit the `commandChanged` signal.\r\n        this._commandChanged.emit({ id: id, type: 'added' });\r\n        // Return a disposable which will remove the command.\r\n        return new disposable_1.DisposableDelegate(function () {\r\n            // Remove the command from the registry.\r\n            delete _this._commands[id];\r\n            // Emit the `commandChanged` signal.\r\n            _this._commandChanged.emit({ id: id, type: 'removed' });\r\n        });\r\n    };\r\n    /**\r\n     * Notify listeners that the state of a command has changed.\r\n     *\r\n     * @param id - The id of the command which has changed. If more than\r\n     *   one command has changed, this argument should be omitted.\r\n     *\r\n     * @throws An error if the given `id` is not registered.\r\n     *\r\n     * #### Notes\r\n     * This method should be called by the command author whenever the\r\n     * application state changes such that the results of the command\r\n     * metadata functions may have changed.\r\n     *\r\n     * This will cause the `commandChanged` signal to be emitted.\r\n     */\r\n    CommandRegistry.prototype.notifyCommandChanged = function (id) {\r\n        if (id !== undefined && !(id in this._commands)) {\r\n            throw new Error(\"Command '\" + id + \"' is not registered.\");\r\n        }\r\n        this._commandChanged.emit({ id: id, type: id ? 'changed' : 'many-changed' });\r\n    };\r\n    /**\r\n     * Get the display label for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The display label for the command, or an empty string\r\n     *   if the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.label = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.label.call(undefined, args) : '';\r\n    };\r\n    /**\r\n     * Get the mnemonic index for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The mnemonic index for the command, or `-1` if the\r\n     *   command is not registered.\r\n     */\r\n    CommandRegistry.prototype.mnemonic = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.mnemonic.call(undefined, args) : -1;\r\n    };\r\n    /**\r\n     * @deprecated Use `iconClass()` instead.\r\n     */\r\n    CommandRegistry.prototype.icon = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        return this.iconClass(id, args);\r\n    };\r\n    /**\r\n     * Get the icon class for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The icon class for the command, or an empty string if\r\n     *   the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.iconClass = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.iconClass.call(undefined, args) : '';\r\n    };\r\n    /**\r\n     * Get the icon label for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The icon label for the command, or an empty string if\r\n     *   the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.iconLabel = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.iconLabel.call(undefined, args) : '';\r\n    };\r\n    /**\r\n     * Get the short form caption for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The caption for the command, or an empty string if the\r\n     *   command is not registered.\r\n     */\r\n    CommandRegistry.prototype.caption = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.caption.call(undefined, args) : '';\r\n    };\r\n    /**\r\n     * Get the usage help text for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The usage text for the command, or an empty string if\r\n     *   the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.usage = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.usage.call(undefined, args) : '';\r\n    };\r\n    /**\r\n     * Get the extra class name for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The class name for the command, or an empty string if\r\n     *   the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.className = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.className.call(undefined, args) : '';\r\n    };\r\n    /**\r\n     * Get the dataset for a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns The dataset for the command, or an empty dataset if\r\n     *   the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.dataset = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.dataset.call(undefined, args) : {};\r\n    };\r\n    /**\r\n     * Test whether a specific command is enabled.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns A boolean indicating whether the command is enabled,\r\n     *   or `false` if the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.isEnabled = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.isEnabled.call(undefined, args) : false;\r\n    };\r\n    /**\r\n     * Test whether a specific command is toggled.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns A boolean indicating whether the command is toggled,\r\n     *   or `false` if the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.isToggled = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.isToggled.call(undefined, args) : false;\r\n    };\r\n    /**\r\n     * Test whether a specific command is visible.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns A boolean indicating whether the command is visible,\r\n     *   or `false` if the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.isVisible = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        var cmd = this._commands[id];\r\n        return cmd ? cmd.isVisible.call(undefined, args) : false;\r\n    };\r\n    /**\r\n     * Execute a specific command.\r\n     *\r\n     * @param id - The id of the command of interest.\r\n     *\r\n     * @param args - The arguments for the command.\r\n     *\r\n     * @returns A promise which resolves with the result of the command.\r\n     *\r\n     * #### Notes\r\n     * The promise will reject if the command throws an exception,\r\n     * or if the command is not registered.\r\n     */\r\n    CommandRegistry.prototype.execute = function (id, args) {\r\n        if (args === void 0) { args = coreutils_1.JSONExt.emptyObject; }\r\n        // Reject if the command is not registered.\r\n        var cmd = this._commands[id];\r\n        if (!cmd) {\r\n            return Promise.reject(new Error(\"Command '\" + id + \"' not registered.\"));\r\n        }\r\n        // Execute the command and reject if an exception is thrown.\r\n        var value;\r\n        try {\r\n            value = cmd.execute.call(undefined, args);\r\n        }\r\n        catch (err) {\r\n            value = Promise.reject(err);\r\n        }\r\n        // Create the return promise which resolves the result.\r\n        var result = Promise.resolve(value);\r\n        // Emit the command executed signal.\r\n        this._commandExecuted.emit({ id: id, args: args, result: result });\r\n        // Return the result promise to the caller.\r\n        return result;\r\n    };\r\n    /**\r\n     * Add a key binding to the registry.\r\n     *\r\n     * @param options - The options for creating the key binding.\r\n     *\r\n     * @returns A disposable which removes the added key binding.\r\n     *\r\n     * #### Notes\r\n     * If multiple key bindings are registered for the same sequence, the\r\n     * binding with the highest selector specificity is executed first. A\r\n     * tie is broken by using the most recently added key binding.\r\n     *\r\n     * Ambiguous key bindings are resolved with a timeout. As an example,\r\n     * suppose two key bindings are registered: one with the key sequence\r\n     * `['Ctrl D']`, and another with `['Ctrl D', 'Ctrl W']`. If the user\r\n     * presses `Ctrl D`, the first binding cannot be immediately executed\r\n     * since the user may intend to complete the chord with `Ctrl W`. For\r\n     * such cases, a timer is used to allow the chord to be completed. If\r\n     * the chord is not completed before the timeout, the first binding\r\n     * is executed.\r\n     */\r\n    CommandRegistry.prototype.addKeyBinding = function (options) {\r\n        var _this = this;\r\n        // Create the binding for the given options.\r\n        var binding = Private.createKeyBinding(options);\r\n        // Add the key binding to the bindings array.\r\n        this._keyBindings.push(binding);\r\n        // Emit the `bindingChanged` signal.\r\n        this._keyBindingChanged.emit({ binding: binding, type: 'added' });\r\n        // Return a disposable which will remove the binding.\r\n        return new disposable_1.DisposableDelegate(function () {\r\n            // Remove the binding from the array.\r\n            algorithm_1.ArrayExt.removeFirstOf(_this._keyBindings, binding);\r\n            // Emit the `bindingChanged` signal.\r\n            _this._keyBindingChanged.emit({ binding: binding, type: 'removed' });\r\n        });\r\n    };\r\n    /**\r\n     * Process a `'keydown'` event and invoke a matching key binding.\r\n     *\r\n     * @param event - The event object for a `'keydown'` event.\r\n     *\r\n     * #### Notes\r\n     * This should be called in response to a `'keydown'` event in order\r\n     * to invoke the command for the best matching key binding.\r\n     *\r\n     * The registry **does not** install its own listener for `'keydown'`\r\n     * events. This allows the application full control over the nodes\r\n     * and phase for which the registry processes `'keydown'` events.\r\n     */\r\n    CommandRegistry.prototype.processKeydownEvent = function (event) {\r\n        // Bail immediately if playing back keystrokes.\r\n        if (this._replaying) {\r\n            return;\r\n        }\r\n        // Get the normalized keystroke for the event.\r\n        var keystroke = CommandRegistry.keystrokeForKeydownEvent(event);\r\n        // If the keystroke is not valid for the keyboard layout, replay\r\n        // any suppressed events and clear the pending state.\r\n        if (!keystroke) {\r\n            this._replayKeydownEvents();\r\n            this._clearPendingState();\r\n            return;\r\n        }\r\n        // Add the keystroke to the current key sequence.\r\n        this._keystrokes.push(keystroke);\r\n        // Find the exact and partial matches for the key sequence.\r\n        var _a = Private.matchKeyBinding(this._keyBindings, this._keystrokes, event), exact = _a.exact, partial = _a.partial;\r\n        // If there is no exact match and no partial match, replay\r\n        // any suppressed events and clear the pending state.\r\n        if (!exact && !partial) {\r\n            this._replayKeydownEvents();\r\n            this._clearPendingState();\r\n            return;\r\n        }\r\n        // Stop propagation of the event. If there is only a partial match,\r\n        // the event will be replayed if a final exact match never occurs.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // If there is an exact match but no partial match, the exact match\r\n        // can be dispatched immediately. The pending state is cleared so\r\n        // the next key press starts from the default state.\r\n        if (exact && !partial) {\r\n            this._executeKeyBinding(exact);\r\n            this._clearPendingState();\r\n            return;\r\n        }\r\n        // If there is both an exact match and a partial match, the exact\r\n        // match is stored for future dispatch in case the timer expires\r\n        // before a more specific match is triggered.\r\n        if (exact) {\r\n            this._exactKeyMatch = exact;\r\n        }\r\n        // Store the event for possible playback in the future.\r\n        this._keydownEvents.push(event);\r\n        // (Re)start the timer to dispatch the most recent exact match\r\n        // in case the partial match fails to result in an exact match.\r\n        this._startTimer();\r\n    };\r\n    /**\r\n     * Start or restart the pending timeout.\r\n     */\r\n    CommandRegistry.prototype._startTimer = function () {\r\n        var _this = this;\r\n        this._clearTimer();\r\n        this._timerID = setTimeout(function () {\r\n            _this._onPendingTimeout();\r\n        }, Private.CHORD_TIMEOUT);\r\n    };\r\n    /**\r\n     * Clear the pending timeout.\r\n     */\r\n    CommandRegistry.prototype._clearTimer = function () {\r\n        if (this._timerID !== 0) {\r\n            clearTimeout(this._timerID);\r\n            this._timerID = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Replay the keydown events which were suppressed.\r\n     */\r\n    CommandRegistry.prototype._replayKeydownEvents = function () {\r\n        if (this._keydownEvents.length === 0) {\r\n            return;\r\n        }\r\n        this._replaying = true;\r\n        this._keydownEvents.forEach(Private.replayKeyEvent);\r\n        this._replaying = false;\r\n    };\r\n    /**\r\n     * Execute the command for the given key binding.\r\n     *\r\n     * If the command is missing or disabled, a warning will be logged.\r\n     */\r\n    CommandRegistry.prototype._executeKeyBinding = function (binding) {\r\n        var command = binding.command, args = binding.args;\r\n        if (!this.hasCommand(command) || !this.isEnabled(command, args)) {\r\n            var word = this.hasCommand(command) ? 'enabled' : 'registered';\r\n            var keys = binding.keys.join(', ');\r\n            var msg1 = \"Cannot execute key binding '\" + keys + \"':\";\r\n            var msg2 = \"command '\" + command + \"' is not \" + word + \".\";\r\n            console.warn(msg1 + \" \" + msg2);\r\n            return;\r\n        }\r\n        this.execute(command, args);\r\n    };\r\n    /**\r\n     * Clear the internal pending state.\r\n     */\r\n    CommandRegistry.prototype._clearPendingState = function () {\r\n        this._clearTimer();\r\n        this._exactKeyMatch = null;\r\n        this._keystrokes.length = 0;\r\n        this._keydownEvents.length = 0;\r\n    };\r\n    /**\r\n     * Handle the partial match timeout.\r\n     */\r\n    CommandRegistry.prototype._onPendingTimeout = function () {\r\n        this._timerID = 0;\r\n        if (this._exactKeyMatch) {\r\n            this._executeKeyBinding(this._exactKeyMatch);\r\n        }\r\n        else {\r\n            this._replayKeydownEvents();\r\n        }\r\n        this._clearPendingState();\r\n    };\r\n    return CommandRegistry;\r\n}());\r\nexports.CommandRegistry = CommandRegistry;\r\n/**\r\n * The namespace for the `CommandRegistry` class statics.\r\n */\r\n(function (CommandRegistry) {\r\n    /**\r\n     * Parse a keystroke into its constituent components.\r\n     *\r\n     * @param keystroke - The keystroke of interest.\r\n     *\r\n     * @returns The parsed components of the keystroke.\r\n     *\r\n     * #### Notes\r\n     * The keystroke should be of the form:\r\n     *   `[<modifier 1> [<modifier 2> [<modifier N> ]]]<primary key>`\r\n     *\r\n     * The supported modifiers are: `Accel`, `Alt`, `Cmd`, `Ctrl`, and\r\n     * `Shift`. The `Accel` modifier is translated to `Cmd` on Mac and\r\n     * `Ctrl` on all other platforms.\r\n     *\r\n     * The parsing is tolerant and will not throw exceptions. Notably:\r\n     *   - Duplicate modifiers are ignored.\r\n     *   - Extra primary keys are ignored.\r\n     *   - The order of modifiers and primary key is irrelevant.\r\n     *   - The keystroke parts should be separated by whitespace.\r\n     *   - The keystroke is case sensitive.\r\n     */\r\n    function parseKeystroke(keystroke) {\r\n        var key = '';\r\n        var alt = false;\r\n        var cmd = false;\r\n        var ctrl = false;\r\n        var shift = false;\r\n        for (var _i = 0, _a = keystroke.split(/\\s+/); _i < _a.length; _i++) {\r\n            var token = _a[_i];\r\n            if (token === 'Accel') {\r\n                if (domutils_1.Platform.IS_MAC) {\r\n                    cmd = true;\r\n                }\r\n                else {\r\n                    ctrl = true;\r\n                }\r\n            }\r\n            else if (token === 'Alt') {\r\n                alt = true;\r\n            }\r\n            else if (token === 'Cmd') {\r\n                cmd = true;\r\n            }\r\n            else if (token === 'Ctrl') {\r\n                ctrl = true;\r\n            }\r\n            else if (token === 'Shift') {\r\n                shift = true;\r\n            }\r\n            else if (token.length > 0) {\r\n                key = token;\r\n            }\r\n        }\r\n        return { cmd: cmd, ctrl: ctrl, alt: alt, shift: shift, key: key };\r\n    }\r\n    CommandRegistry.parseKeystroke = parseKeystroke;\r\n    /**\r\n     * Normalize a keystroke into a canonical representation.\r\n     *\r\n     * @param keystroke - The keystroke of interest.\r\n     *\r\n     * @returns The normalized representation of the keystroke.\r\n     *\r\n     * #### Notes\r\n     * This normalizes the keystroke by removing duplicate modifiers and\r\n     * extra primary keys, and assembling the parts in a canonical order.\r\n     *\r\n     * The `Cmd` modifier is ignored on non-Mac platforms.\r\n     */\r\n    function normalizeKeystroke(keystroke) {\r\n        var mods = '';\r\n        var parts = parseKeystroke(keystroke);\r\n        if (parts.ctrl) {\r\n            mods += 'Ctrl ';\r\n        }\r\n        if (parts.alt) {\r\n            mods += 'Alt ';\r\n        }\r\n        if (parts.shift) {\r\n            mods += 'Shift ';\r\n        }\r\n        if (parts.cmd && domutils_1.Platform.IS_MAC) {\r\n            mods += 'Cmd ';\r\n        }\r\n        return mods + parts.key;\r\n    }\r\n    CommandRegistry.normalizeKeystroke = normalizeKeystroke;\r\n    /**\r\n     * Create a normalized keystroke for a `'keydown'` event.\r\n     *\r\n     * @param event - The event object for a `'keydown'` event.\r\n     *\r\n     * @returns A normalized keystroke, or an empty string if the event\r\n     *   does not represent a valid keystroke for the given layout.\r\n     */\r\n    function keystrokeForKeydownEvent(event) {\r\n        var key = keyboard_1.getKeyboardLayout().keyForKeydownEvent(event);\r\n        if (!key) {\r\n            return '';\r\n        }\r\n        var mods = '';\r\n        if (event.ctrlKey) {\r\n            mods += 'Ctrl ';\r\n        }\r\n        if (event.altKey) {\r\n            mods += 'Alt ';\r\n        }\r\n        if (event.shiftKey) {\r\n            mods += 'Shift ';\r\n        }\r\n        if (event.metaKey && domutils_1.Platform.IS_MAC) {\r\n            mods += 'Cmd ';\r\n        }\r\n        return mods + key;\r\n    }\r\n    CommandRegistry.keystrokeForKeydownEvent = keystrokeForKeydownEvent;\r\n})(CommandRegistry = exports.CommandRegistry || (exports.CommandRegistry = {}));\r\nexports.CommandRegistry = CommandRegistry;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The timeout in ms for triggering a key binding chord.\r\n     */\r\n    Private.CHORD_TIMEOUT = 1000;\r\n    /**\r\n     * Create a normalized command from an options object.\r\n     */\r\n    function createCommand(options) {\r\n        return {\r\n            execute: options.execute,\r\n            label: asFunc(options.label, emptyStringFunc),\r\n            mnemonic: asFunc(options.mnemonic, negativeOneFunc),\r\n            iconClass: asFunc(options.iconClass || options.icon, emptyStringFunc),\r\n            iconLabel: asFunc(options.iconLabel, emptyStringFunc),\r\n            caption: asFunc(options.caption, emptyStringFunc),\r\n            usage: asFunc(options.usage, emptyStringFunc),\r\n            className: asFunc(options.className, emptyStringFunc),\r\n            dataset: asFunc(options.dataset, emptyDatasetFunc),\r\n            isEnabled: options.isEnabled || trueFunc,\r\n            isToggled: options.isToggled || falseFunc,\r\n            isVisible: options.isVisible || trueFunc\r\n        };\r\n    }\r\n    Private.createCommand = createCommand;\r\n    /**\r\n     * Create a key binding object from key binding options.\r\n     */\r\n    function createKeyBinding(options) {\r\n        return {\r\n            keys: normalizeKeys(options),\r\n            selector: validateSelector(options),\r\n            command: options.command,\r\n            args: options.args || coreutils_1.JSONExt.emptyObject\r\n        };\r\n    }\r\n    Private.createKeyBinding = createKeyBinding;\r\n    /**\r\n     * Find the key bindings which match a key sequence.\r\n     *\r\n     * This returns a match result which contains the best exact matching\r\n     * binding, and a flag which indicates if there are partial matches.\r\n     */\r\n    function matchKeyBinding(bindings, keys, event) {\r\n        // The current best exact match.\r\n        var exact = null;\r\n        // Whether a partial match has been found.\r\n        var partial = false;\r\n        // The match distance for the exact match.\r\n        var distance = Infinity;\r\n        // The specificity for the exact match.\r\n        var specificity = 0;\r\n        // Iterate over the bindings and search for the best match.\r\n        for (var i = 0, n = bindings.length; i < n; ++i) {\r\n            // Lookup the current binding.\r\n            var binding = bindings[i];\r\n            // Check whether the key binding sequence is a match.\r\n            var sqm = matchSequence(binding.keys, keys);\r\n            // If there is no match, the binding is ignored.\r\n            if (sqm === 0 /* None */) {\r\n                continue;\r\n            }\r\n            // If it is a partial match and no other partial match has been\r\n            // found, ensure the selector matches and set the partial flag.\r\n            if (sqm === 2 /* Partial */) {\r\n                if (!partial && targetDistance(binding.selector, event) !== -1) {\r\n                    partial = true;\r\n                }\r\n                continue;\r\n            }\r\n            // Ignore the match if the selector doesn't match, or if the\r\n            // matched node is farther away than the current best match.\r\n            var td = targetDistance(binding.selector, event);\r\n            if (td === -1 || td > distance) {\r\n                continue;\r\n            }\r\n            // Get the specificity for the selector.\r\n            var sp = domutils_1.Selector.calculateSpecificity(binding.selector);\r\n            // Update the best match if this match is stronger.\r\n            if (!exact || td < distance || sp >= specificity) {\r\n                exact = binding;\r\n                distance = td;\r\n                specificity = sp;\r\n            }\r\n        }\r\n        // Return the match result.\r\n        return { exact: exact, partial: partial };\r\n    }\r\n    Private.matchKeyBinding = matchKeyBinding;\r\n    /**\r\n     * Replay a keyboard event.\r\n     *\r\n     * This synthetically dispatches a clone of the keyboard event.\r\n     */\r\n    function replayKeyEvent(event) {\r\n        event.target.dispatchEvent(cloneKeyboardEvent(event));\r\n    }\r\n    Private.replayKeyEvent = replayKeyEvent;\r\n    /**\r\n     * A singleton empty string function.\r\n     */\r\n    var emptyStringFunc = function () { return ''; };\r\n    /**\r\n     * A singleton `-1` number function\r\n     */\r\n    var negativeOneFunc = function () { return -1; };\r\n    /**\r\n     * A singleton true boolean function.\r\n     */\r\n    var trueFunc = function () { return true; };\r\n    /**\r\n     * A singleton false boolean function.\r\n     */\r\n    var falseFunc = function () { return false; };\r\n    /**\r\n     * A singleton empty dataset function.\r\n     */\r\n    var emptyDatasetFunc = function () { return ({}); };\r\n    /**\r\n     * Cast a value or command func to a command func.\r\n     */\r\n    function asFunc(value, dfault) {\r\n        if (value === undefined) {\r\n            return dfault;\r\n        }\r\n        if (typeof value === 'function') {\r\n            return value;\r\n        }\r\n        return function () { return value; };\r\n    }\r\n    /**\r\n     * Get the platform-specific normalized keys for an options object.\r\n     */\r\n    function normalizeKeys(options) {\r\n        var keys;\r\n        if (domutils_1.Platform.IS_WIN) {\r\n            keys = options.winKeys || options.keys;\r\n        }\r\n        else if (domutils_1.Platform.IS_MAC) {\r\n            keys = options.macKeys || options.keys;\r\n        }\r\n        else {\r\n            keys = options.linuxKeys || options.keys;\r\n        }\r\n        return keys.map(CommandRegistry.normalizeKeystroke);\r\n    }\r\n    /**\r\n     * Validate the selector for an options object.\r\n     *\r\n     * This returns the validated selector, or throws if the selector is\r\n     * invalid or contains commas.\r\n     */\r\n    function validateSelector(options) {\r\n        if (options.selector.indexOf(',') !== -1) {\r\n            throw new Error(\"Selector cannot contain commas: \" + options.selector);\r\n        }\r\n        if (!domutils_1.Selector.isValid(options.selector)) {\r\n            throw new Error(\"Invalid selector: \" + options.selector);\r\n        }\r\n        return options.selector;\r\n    }\r\n    ;\r\n    /**\r\n     * Test whether a key binding sequence matches a key sequence.\r\n     *\r\n     * Returns a `SequenceMatch` value indicating the type of match.\r\n     */\r\n    function matchSequence(bindKeys, userKeys) {\r\n        if (bindKeys.length < userKeys.length) {\r\n            return 0 /* None */;\r\n        }\r\n        for (var i = 0, n = userKeys.length; i < n; ++i) {\r\n            if (bindKeys[i] !== userKeys[i]) {\r\n                return 0 /* None */;\r\n            }\r\n        }\r\n        if (bindKeys.length > userKeys.length) {\r\n            return 2 /* Partial */;\r\n        }\r\n        return 1 /* Exact */;\r\n    }\r\n    /**\r\n     * Find the distance from the target node to the first matching node.\r\n     *\r\n     * This traverses the event path from `target` to `currentTarget` and\r\n     * computes the distance from `target` to the first node which matches\r\n     * the CSS selector. If no match is found, `-1` is returned.\r\n     */\r\n    function targetDistance(selector, event) {\r\n        var targ = event.target;\r\n        var curr = event.currentTarget;\r\n        for (var dist = 0; targ !== null; targ = targ.parentElement, ++dist) {\r\n            if (domutils_1.Selector.matches(targ, selector)) {\r\n                return dist;\r\n            }\r\n            if (targ === curr) {\r\n                return -1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    /**\r\n     * Clone a keyboard event.\r\n     */\r\n    function cloneKeyboardEvent(event) {\r\n        // A custom event is required because Chrome nulls out the\r\n        // `keyCode` field in user-generated `KeyboardEvent` types.\r\n        var clone = document.createEvent('Event');\r\n        var bubbles = event.bubbles || true;\r\n        var cancelable = event.cancelable || true;\r\n        clone.initEvent(event.type || 'keydown', bubbles, cancelable);\r\n        clone.key = event.key || '';\r\n        clone.keyCode = event.keyCode || 0;\r\n        clone.which = event.keyCode || 0;\r\n        clone.ctrlKey = event.ctrlKey || false;\r\n        clone.altKey = event.altKey || false;\r\n        clone.shiftKey = event.shiftKey || false;\r\n        clone.metaKey = event.metaKey || false;\r\n        clone.view = event.view || window;\r\n        return clone;\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n__export(require(\"./json\"));\r\n__export(require(\"./mime\"));\r\n__export(require(\"./promise\"));\r\n__export(require(\"./random\"));\r\n__export(require(\"./token\"));\r\n__export(require(\"./uuid\"));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The namespace for JSON-specific functions.\r\n */\r\nvar JSONExt;\r\n(function (JSONExt) {\r\n    /**\r\n     * A shared frozen empty JSONObject\r\n     */\r\n    JSONExt.emptyObject = Object.freeze({});\r\n    /**\r\n     * A shared frozen empty JSONArray\r\n     */\r\n    JSONExt.emptyArray = Object.freeze([]);\r\n    /**\r\n     * Test whether a JSON value is a primitive.\r\n     *\r\n     * @param value - The JSON value of interest.\r\n     *\r\n     * @returns `true` if the value is a primitive,`false` otherwise.\r\n     */\r\n    function isPrimitive(value) {\r\n        return (value === null ||\r\n            typeof value === 'boolean' ||\r\n            typeof value === 'number' ||\r\n            typeof value === 'string');\r\n    }\r\n    JSONExt.isPrimitive = isPrimitive;\r\n    function isArray(value) {\r\n        return Array.isArray(value);\r\n    }\r\n    JSONExt.isArray = isArray;\r\n    function isObject(value) {\r\n        return !isPrimitive(value) && !isArray(value);\r\n    }\r\n    JSONExt.isObject = isObject;\r\n    /**\r\n     * Compare two JSON values for deep equality.\r\n     *\r\n     * @param first - The first JSON value of interest.\r\n     *\r\n     * @param second - The second JSON value of interest.\r\n     *\r\n     * @returns `true` if the values are equivalent, `false` otherwise.\r\n     */\r\n    function deepEqual(first, second) {\r\n        // Check referential and primitive equality first.\r\n        if (first === second) {\r\n            return true;\r\n        }\r\n        // If one is a primitive, the `===` check ruled out the other.\r\n        if (isPrimitive(first) || isPrimitive(second)) {\r\n            return false;\r\n        }\r\n        // Test whether they are arrays.\r\n        var a1 = isArray(first);\r\n        var a2 = isArray(second);\r\n        // Bail if the types are different.\r\n        if (a1 !== a2) {\r\n            return false;\r\n        }\r\n        // If they are both arrays, compare them.\r\n        if (a1 && a2) {\r\n            return deepArrayEqual(first, second);\r\n        }\r\n        // At this point, they must both be objects.\r\n        return deepObjectEqual(first, second);\r\n    }\r\n    JSONExt.deepEqual = deepEqual;\r\n    /**\r\n     * Create a deep copy of a JSON value.\r\n     *\r\n     * @param value - The JSON value to copy.\r\n     *\r\n     * @returns A deep copy of the given JSON value.\r\n     */\r\n    function deepCopy(value) {\r\n        // Do nothing for primitive values.\r\n        if (isPrimitive(value)) {\r\n            return value;\r\n        }\r\n        // Deep copy an array.\r\n        if (isArray(value)) {\r\n            return deepArrayCopy(value);\r\n        }\r\n        // Deep copy an object.\r\n        return deepObjectCopy(value);\r\n    }\r\n    JSONExt.deepCopy = deepCopy;\r\n    /**\r\n     * Compare two JSON arrays for deep equality.\r\n     */\r\n    function deepArrayEqual(first, second) {\r\n        // Check referential equality first.\r\n        if (first === second) {\r\n            return true;\r\n        }\r\n        // Test the arrays for equal length.\r\n        if (first.length !== second.length) {\r\n            return false;\r\n        }\r\n        // Compare the values for equality.\r\n        for (var i = 0, n = first.length; i < n; ++i) {\r\n            if (!deepEqual(first[i], second[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        // At this point, the arrays are equal.\r\n        return true;\r\n    }\r\n    /**\r\n     * Compare two JSON objects for deep equality.\r\n     */\r\n    function deepObjectEqual(first, second) {\r\n        // Check referential equality first.\r\n        if (first === second) {\r\n            return true;\r\n        }\r\n        // Check for the first object's keys in the second object.\r\n        for (var key in first) {\r\n            if (!(key in second)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Check for the second object's keys in the first object.\r\n        for (var key in second) {\r\n            if (!(key in first)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Compare the values for equality.\r\n        for (var key in first) {\r\n            if (!deepEqual(first[key], second[key])) {\r\n                return false;\r\n            }\r\n        }\r\n        // At this point, the objects are equal.\r\n        return true;\r\n    }\r\n    /**\r\n     * Create a deep copy of a JSON array.\r\n     */\r\n    function deepArrayCopy(value) {\r\n        var result = new Array(value.length);\r\n        for (var i = 0, n = value.length; i < n; ++i) {\r\n            result[i] = deepCopy(value[i]);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Create a deep copy of a JSON object.\r\n     */\r\n    function deepObjectCopy(value) {\r\n        var result = {};\r\n        for (var key in value) {\r\n            result[key] = deepCopy(value[key]);\r\n        }\r\n        return result;\r\n    }\r\n})(JSONExt = exports.JSONExt || (exports.JSONExt = {}));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * An object which stores MIME data for general application use.\r\n *\r\n * #### Notes\r\n * This class does not attempt to enforce \"correctness\" of MIME types\r\n * and their associated data. Since this class is designed to transfer\r\n * arbitrary data and objects within the same application, it assumes\r\n * that the user provides correct and accurate data.\r\n */\r\nvar MimeData = (function () {\r\n    function MimeData() {\r\n        this._types = [];\r\n        this._values = [];\r\n    }\r\n    /**\r\n     * Get an array of the MIME types contained within the dataset.\r\n     *\r\n     * @returns A new array of the MIME types, in order of insertion.\r\n     */\r\n    MimeData.prototype.types = function () {\r\n        return this._types.slice();\r\n    };\r\n    /**\r\n     * Test whether the dataset has an entry for the given type.\r\n     *\r\n     * @param mime - The MIME type of interest.\r\n     *\r\n     * @returns `true` if the dataset contains a value for the given\r\n     *   MIME type, `false` otherwise.\r\n     */\r\n    MimeData.prototype.hasData = function (mime) {\r\n        return this._types.indexOf(mime) !== -1;\r\n    };\r\n    /**\r\n     * Get the data value for the given MIME type.\r\n     *\r\n     * @param mime - The MIME type of interest.\r\n     *\r\n     * @returns The value for the given MIME type, or `undefined` if\r\n     *   the dataset does not contain a value for the type.\r\n     */\r\n    MimeData.prototype.getData = function (mime) {\r\n        var i = this._types.indexOf(mime);\r\n        return i !== -1 ? this._values[i] : undefined;\r\n    };\r\n    /**\r\n     * Set the data value for the given MIME type.\r\n     *\r\n     * @param mime - The MIME type of interest.\r\n     *\r\n     * @param data - The data value for the given MIME type.\r\n     *\r\n     * #### Notes\r\n     * This will overwrite any previous entry for the MIME type.\r\n     */\r\n    MimeData.prototype.setData = function (mime, data) {\r\n        this.clearData(mime);\r\n        this._types.push(mime);\r\n        this._values.push(data);\r\n    };\r\n    /**\r\n     * Remove the data entry for the given MIME type.\r\n     *\r\n     * @param mime - The MIME type of interest.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if there is no entry for the given MIME type.\r\n     */\r\n    MimeData.prototype.clearData = function (mime) {\r\n        var i = this._types.indexOf(mime);\r\n        if (i !== -1) {\r\n            this._types.splice(i, 1);\r\n            this._values.splice(i, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Remove all data entries from the dataset.\r\n     */\r\n    MimeData.prototype.clear = function () {\r\n        this._types.length = 0;\r\n        this._values.length = 0;\r\n    };\r\n    return MimeData;\r\n}());\r\nexports.MimeData = MimeData;\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A class which wraps a promise into a delegate object.\r\n *\r\n * #### Notes\r\n * This class is useful when the logic to resolve or reject a promise\r\n * cannot be defined at the point where the promise is created.\r\n */\r\nvar PromiseDelegate = (function () {\r\n    /**\r\n     * Construct a new promise delegate.\r\n     */\r\n    function PromiseDelegate() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this._resolve = resolve;\r\n            _this._reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Resolve the wrapped promise with the given value.\r\n     *\r\n     * @param value - The value to use for resolving the promise.\r\n     */\r\n    PromiseDelegate.prototype.resolve = function (value) {\r\n        var resolve = this._resolve;\r\n        resolve(value);\r\n    };\r\n    /**\r\n     * Reject the wrapped promise with the given value.\r\n     *\r\n     * @reason - The reason for rejecting the promise.\r\n     */\r\n    PromiseDelegate.prototype.reject = function (reason) {\r\n        var reject = this._reject;\r\n        reject(reason);\r\n    };\r\n    return PromiseDelegate;\r\n}());\r\nexports.PromiseDelegate = PromiseDelegate;\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The namespace for random number related functionality.\r\n */\r\nvar Random;\r\n(function (Random) {\r\n    /**\r\n     * A function which generates random bytes.\r\n     *\r\n     * @param buffer - The `Uint8Array` to fill with random bytes.\r\n     *\r\n     * #### Notes\r\n     * A cryptographically strong random number generator will be used if\r\n     * available. Otherwise, `Math.random` will be used as a fallback for\r\n     * randomness.\r\n     *\r\n     * The following RNGs are supported, listed in order of precedence:\r\n     *   - `window.crypto.getRandomValues`\r\n     *   - `window.msCrypto.getRandomValues`\r\n     *   - `require('crypto').randomFillSync\r\n     *   - `require('crypto').randomBytes\r\n     *   - `Math.random`\r\n     */\r\n    Random.getRandomValues = (function () {\r\n        // Look up the crypto module if available.\r\n        var crypto = ((typeof window !== 'undefined' && (window.crypto || window.msCrypto)) ||\r\n            (typeof require !== 'undefined' && require('crypto')) || null);\r\n        // Modern browsers and IE 11\r\n        if (crypto && typeof crypto.getRandomValues === 'function') {\r\n            return function getRandomValues(buffer) {\r\n                return crypto.getRandomValues(buffer);\r\n            };\r\n        }\r\n        // Node 7+\r\n        if (crypto && typeof crypto.randomFillSync === 'function') {\r\n            return function getRandomValues(buffer) {\r\n                return crypto.randomFillSync(buffer);\r\n            };\r\n        }\r\n        // Node 0.10+\r\n        if (crypto && typeof crypto.randomBytes === 'function') {\r\n            return function getRandomValues(buffer) {\r\n                var bytes = crypto.randomBytes(buffer.length);\r\n                for (var i = 0, n = bytes.length; i < n; ++i) {\r\n                    buffer[i] = bytes[i];\r\n                }\r\n            };\r\n        }\r\n        // Fallback\r\n        return function getRandomValues(buffer) {\r\n            var value = 0;\r\n            for (var i = 0, n = buffer.length; i < n; ++i) {\r\n                if (i % 4 === 0) {\r\n                    value = Math.random() * 0xFFFFFFFF >>> 0;\r\n                }\r\n                buffer[i] = value & 0xFF;\r\n                value >>>= 8;\r\n            }\r\n        };\r\n    })();\r\n})(Random = exports.Random || (exports.Random = {}));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A runtime object which captures compile-time type information.\r\n *\r\n * #### Notes\r\n * A token captures the compile-time type of an interface or class in\r\n * an object which can be used at runtime in a type-safe fashion.\r\n */\r\nvar Token = (function () {\r\n    /**\r\n     * Construct a new token.\r\n     *\r\n     * @param name - A human readable name for the token.\r\n     */\r\n    function Token(name) {\r\n        this.name = name;\r\n        this._tokenStructuralPropertyT = null;\r\n    }\r\n    return Token;\r\n}());\r\nexports.Token = Token;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar random_1 = require(\"./random\");\r\n/**\r\n * The namespace for UUID related functionality.\r\n */\r\nvar UUID;\r\n(function (UUID) {\r\n    /**\r\n     * A function which generates UUID v4 identifiers.\r\n     *\r\n     * @returns A new UUID v4 string.\r\n     *\r\n     * #### Notes\r\n     * This implementation complies with RFC 4122.\r\n     *\r\n     * This uses `Random.getRandomValues()` for random bytes, which in\r\n     * turn will use the underlying `crypto` module of the platform if\r\n     * it is available. The fallback for randomness is `Math.random`.\r\n     */\r\n    UUID.uuid4 = (function () {\r\n        // Create a 16 byte array to hold the random values.\r\n        var bytes = new Uint8Array(16);\r\n        // Create a look up table from bytes to hex strings.\r\n        var lut = new Array(256);\r\n        // Pad the single character hex digits with a leading zero.\r\n        for (var i = 0; i < 16; ++i) {\r\n            lut[i] = '0' + i.toString(16);\r\n        }\r\n        // Populate the rest of the hex digits.\r\n        for (var i = 16; i < 256; ++i) {\r\n            lut[i] = i.toString(16);\r\n        }\r\n        // Return a function which generates the UUID.\r\n        return function uuid4() {\r\n            // Get a new batch of random values.\r\n            random_1.Random.getRandomValues(bytes);\r\n            // Set the UUID version number to 4.\r\n            bytes[6] = 0x40 | (bytes[6] & 0x0F);\r\n            // Set the clock sequence bit to the RFC spec.\r\n            bytes[8] = 0x80 | (bytes[8] & 0x3F);\r\n            // Assemble the UUID string.\r\n            return (lut[bytes[0]] +\r\n                lut[bytes[1]] +\r\n                lut[bytes[2]] +\r\n                lut[bytes[3]] +\r\n                '-' +\r\n                lut[bytes[4]] +\r\n                lut[bytes[5]] +\r\n                '-' +\r\n                lut[bytes[6]] +\r\n                lut[bytes[7]] +\r\n                '-' +\r\n                lut[bytes[8]] +\r\n                lut[bytes[9]] +\r\n                '-' +\r\n                lut[bytes[10]] +\r\n                lut[bytes[11]] +\r\n                lut[bytes[12]] +\r\n                lut[bytes[13]] +\r\n                lut[bytes[14]] +\r\n                lut[bytes[15]]);\r\n        };\r\n    })();\r\n})(UUID = exports.UUID || (exports.UUID = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\n/**\r\n * A disposable object which delegates to a callback function.\r\n */\r\nvar DisposableDelegate = (function () {\r\n    /**\r\n     * Construct a new disposable delegate.\r\n     *\r\n     * @param fn - The callback function to invoke on dispose.\r\n     */\r\n    function DisposableDelegate(fn) {\r\n        this._fn = fn;\r\n    }\r\n    Object.defineProperty(DisposableDelegate.prototype, \"isDisposed\", {\r\n        /**\r\n         * Test whether the delegate has been disposed.\r\n         */\r\n        get: function () {\r\n            return !this._fn;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Dispose of the delegate and invoke the callback function.\r\n     */\r\n    DisposableDelegate.prototype.dispose = function () {\r\n        if (!this._fn) {\r\n            return;\r\n        }\r\n        var fn = this._fn;\r\n        this._fn = null;\r\n        fn();\r\n    };\r\n    return DisposableDelegate;\r\n}());\r\nexports.DisposableDelegate = DisposableDelegate;\r\n/**\r\n * An object which manages a collection of disposable items.\r\n */\r\nvar DisposableSet = (function () {\r\n    /**\r\n     * Construct a new disposable set.\r\n     */\r\n    function DisposableSet() {\r\n        this._disposed = false;\r\n        this._items = new Set();\r\n    }\r\n    Object.defineProperty(DisposableSet.prototype, \"isDisposed\", {\r\n        /**\r\n         * Test whether the set has been disposed.\r\n         */\r\n        get: function () {\r\n            return this._disposed;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Dispose of the set and the items it contains.\r\n     *\r\n     * #### Notes\r\n     * Items are disposed in the order they are added to the set.\r\n     */\r\n    DisposableSet.prototype.dispose = function () {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n        this._disposed = true;\r\n        this._items.forEach(function (item) { item.dispose(); });\r\n        this._items.clear();\r\n    };\r\n    /**\r\n     * Test whether the set contains a specific item.\r\n     *\r\n     * @param item - The item of interest.\r\n     *\r\n     * @returns `true` if the set contains the item, `false` otherwise.\r\n     */\r\n    DisposableSet.prototype.contains = function (item) {\r\n        return this._items.has(item);\r\n    };\r\n    /**\r\n     * Add a disposable item to the set.\r\n     *\r\n     * @param item - The item to add to the set.\r\n     *\r\n     * #### Notes\r\n     * If the item is already contained in the set, this is a no-op.\r\n     */\r\n    DisposableSet.prototype.add = function (item) {\r\n        this._items.add(item);\r\n    };\r\n    /**\r\n     * Remove a disposable item from the set.\r\n     *\r\n     * @param item - The item to remove from the set.\r\n     *\r\n     * #### Notes\r\n     * If the item is not contained in the set, this is a no-op.\r\n     */\r\n    DisposableSet.prototype.remove = function (item) {\r\n        this._items.delete(item);\r\n    };\r\n    /**\r\n     * Remove all items from the set.\r\n     */\r\n    DisposableSet.prototype.clear = function () {\r\n        this._items.clear();\r\n    };\r\n    return DisposableSet;\r\n}());\r\nexports.DisposableSet = DisposableSet;\r\n/**\r\n * The namespace for the `DisposableSet` class statics.\r\n */\r\n(function (DisposableSet) {\r\n    /**\r\n     * Create a disposable set from an iterable of items.\r\n     *\r\n     * @param items - The iterable or array-like object of interest.\r\n     *\r\n     * @returns A new disposable initialized with the given items.\r\n     */\r\n    function from(items) {\r\n        var set = new DisposableSet();\r\n        algorithm_1.each(items, function (item) { set.add(item); });\r\n        return set;\r\n    }\r\n    DisposableSet.from = from;\r\n})(DisposableSet = exports.DisposableSet || (exports.DisposableSet = {}));\r\nexports.DisposableSet = DisposableSet;\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The namespace for element related utilities.\r\n */\r\nvar ElementExt;\r\n(function (ElementExt) {\r\n    /**\r\n     * Compute the box sizing for an element.\r\n     *\r\n     * @param element - The element of interest.\r\n     *\r\n     * @returns The box sizing data for the specified element.\r\n     */\r\n    function boxSizing(element) {\r\n        var style = window.getComputedStyle(element);\r\n        var bt = parseFloat(style.borderTopWidth) || 0;\r\n        var bl = parseFloat(style.borderLeftWidth) || 0;\r\n        var br = parseFloat(style.borderRightWidth) || 0;\r\n        var bb = parseFloat(style.borderBottomWidth) || 0;\r\n        var pt = parseFloat(style.paddingTop) || 0;\r\n        var pl = parseFloat(style.paddingLeft) || 0;\r\n        var pr = parseFloat(style.paddingRight) || 0;\r\n        var pb = parseFloat(style.paddingBottom) || 0;\r\n        var hs = bl + pl + pr + br;\r\n        var vs = bt + pt + pb + bb;\r\n        return {\r\n            borderTop: bt,\r\n            borderLeft: bl,\r\n            borderRight: br,\r\n            borderBottom: bb,\r\n            paddingTop: pt,\r\n            paddingLeft: pl,\r\n            paddingRight: pr,\r\n            paddingBottom: pb,\r\n            horizontalSum: hs,\r\n            verticalSum: vs\r\n        };\r\n    }\r\n    ElementExt.boxSizing = boxSizing;\r\n    /**\r\n     * Compute the size limits for an element.\r\n     *\r\n     * @param element - The element of interest.\r\n     *\r\n     * @returns The size limit data for the specified element.\r\n     */\r\n    function sizeLimits(element) {\r\n        var style = window.getComputedStyle(element);\r\n        var minWidth = parseFloat(style.minWidth) || 0;\r\n        var minHeight = parseFloat(style.minHeight) || 0;\r\n        var maxWidth = parseFloat(style.maxWidth) || Infinity;\r\n        var maxHeight = parseFloat(style.maxHeight) || Infinity;\r\n        maxWidth = Math.max(minWidth, maxWidth);\r\n        maxHeight = Math.max(minHeight, maxHeight);\r\n        return { minWidth: minWidth, minHeight: minHeight, maxWidth: maxWidth, maxHeight: maxHeight };\r\n    }\r\n    ElementExt.sizeLimits = sizeLimits;\r\n    /**\r\n     * Test whether a client position lies within an element.\r\n     *\r\n     * @param element - The DOM element of interest.\r\n     *\r\n     * @param clientX - The client X coordinate of interest.\r\n     *\r\n     * @param clientY - The client Y coordinate of interest.\r\n     *\r\n     * @returns Whether the point is within the given element.\r\n     */\r\n    function hitTest(element, clientX, clientY) {\r\n        var rect = element.getBoundingClientRect();\r\n        return (clientX >= rect.left &&\r\n            clientX < rect.right &&\r\n            clientY >= rect.top &&\r\n            clientY < rect.bottom);\r\n    }\r\n    ElementExt.hitTest = hitTest;\r\n    /**\r\n     * Vertically scroll an element into view if needed.\r\n     *\r\n     * @param area - The scroll area element.\r\n     *\r\n     * @param element - The element of interest.\r\n     *\r\n     * #### Notes\r\n     * This follows the \"nearest\" behavior of the native `scrollIntoView`\r\n     * method, which is not supported by all browsers.\r\n     * https://drafts.csswg.org/cssom-view/#element-scrolling-members\r\n     *\r\n     * If the element fully covers the visible area or is fully contained\r\n     * within the visible area, no scrolling will take place. Otherwise,\r\n     * the nearest edges of the area and element are aligned.\r\n     */\r\n    function scrollIntoViewIfNeeded(area, element) {\r\n        var ar = area.getBoundingClientRect();\r\n        var er = element.getBoundingClientRect();\r\n        if (er.top <= ar.top && er.bottom >= ar.bottom) {\r\n            return;\r\n        }\r\n        if (er.top < ar.top && er.height <= ar.height) {\r\n            area.scrollTop -= ar.top - er.top;\r\n            return;\r\n        }\r\n        if (er.bottom > ar.bottom && er.height >= ar.height) {\r\n            area.scrollTop -= ar.top - er.top;\r\n            return;\r\n        }\r\n        if (er.top < ar.top && er.height > ar.height) {\r\n            area.scrollTop -= ar.bottom - er.bottom;\r\n            return;\r\n        }\r\n        if (er.bottom > ar.bottom && er.height < ar.height) {\r\n            area.scrollTop -= ar.bottom - er.bottom;\r\n            return;\r\n        }\r\n    }\r\n    ElementExt.scrollIntoViewIfNeeded = scrollIntoViewIfNeeded;\r\n})(ElementExt = exports.ElementExt || (exports.ElementExt = {}));\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n__export(require(\"./element\"));\r\n__export(require(\"./platform\"));\r\n__export(require(\"./selector\"));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The namespace for platform related utilities.\r\n */\r\nvar Platform;\r\n(function (Platform) {\r\n    /**\r\n     * A flag indicating whether the platform is Mac.\r\n     */\r\n    Platform.IS_MAC = !!navigator.platform.match(/Mac/i);\r\n    /**\r\n     * A flag indicating whether the platform is Windows.\r\n     */\r\n    Platform.IS_WIN = !!navigator.platform.match(/Win/i);\r\n    /**\r\n     * A flag indicating whether the browser is IE.\r\n     */\r\n    Platform.IS_IE = /Trident/.test(navigator.userAgent);\r\n    /**\r\n     * A flag indicating whether the browser is Edge.\r\n     */\r\n    Platform.IS_EDGE = /Edge/.test(navigator.userAgent);\r\n})(Platform = exports.Platform || (exports.Platform = {}));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The namespace for selector related utilities.\r\n */\r\nvar Selector;\r\n(function (Selector) {\r\n    /**\r\n     * Calculate the specificity of a single CSS selector.\r\n     *\r\n     * @param selector - The CSS selector of interest.\r\n     *\r\n     * @returns The specificity of the selector.\r\n     *\r\n     * #### Undefined Behavior\r\n     * The selector is invalid.\r\n     *\r\n     * #### Notes\r\n     * This is based on https://www.w3.org/TR/css3-selectors/#specificity\r\n     *\r\n     * A larger number represents a more specific selector.\r\n     *\r\n     * The smallest possible specificity is `0`.\r\n     *\r\n     * The result is represented as a hex number `0x<aa><bb><cc>` where\r\n     * each component is the count of the respective selector clause.\r\n     *\r\n     * If the selector contains commas, only the first clause is used.\r\n     *\r\n     * The computed result is cached, so subsequent calculations for the\r\n     * same selector are extremely fast.\r\n     */\r\n    function calculateSpecificity(selector) {\r\n        if (selector in Private.specificityCache) {\r\n            return Private.specificityCache[selector];\r\n        }\r\n        var result = Private.calculateSingle(selector);\r\n        return Private.specificityCache[selector] = result;\r\n    }\r\n    Selector.calculateSpecificity = calculateSpecificity;\r\n    /**\r\n     * Test whether a selector is a valid CSS selector.\r\n     *\r\n     * @param selector - The CSS selector of interest.\r\n     *\r\n     * @returns `true` if the selector is valid, `false` otherwise.\r\n     *\r\n     * #### Notes\r\n     * The computed result is cached, so subsequent tests for the same\r\n     * selector are extremely fast.\r\n     */\r\n    function isValid(selector) {\r\n        if (selector in Private.validityCache) {\r\n            return Private.validityCache[selector];\r\n        }\r\n        var result = true;\r\n        try {\r\n            Private.testElem.querySelector(selector);\r\n        }\r\n        catch (err) {\r\n            result = false;\r\n        }\r\n        return Private.validityCache[selector] = result;\r\n    }\r\n    Selector.isValid = isValid;\r\n    /**\r\n     * Test whether an element matches a CSS selector.\r\n     *\r\n     * @param element - The element of interest.\r\n     *\r\n     * @param selector - The valid CSS selector of interest.\r\n     *\r\n     * @returns `true` if the element is a match, `false` otherwise.\r\n     *\r\n     * #### Notes\r\n     * This function uses the builtin browser capabilities when possible,\r\n     * falling back onto a document query otherwise.\r\n     */\r\n    function matches(element, selector) {\r\n        return Private.protoMatchFunc.call(element, selector);\r\n    }\r\n    Selector.matches = matches;\r\n})(Selector = exports.Selector || (exports.Selector = {}));\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * A cache of computed selector specificity values.\r\n     */\r\n    Private.specificityCache = Object.create(null);\r\n    /**\r\n     * A cache of computed selector validity.\r\n     */\r\n    Private.validityCache = Object.create(null);\r\n    /**\r\n     * An empty element for testing selector validity.\r\n     */\r\n    Private.testElem = document.createElement('div');\r\n    /**\r\n     * A cross-browser CSS selector matching prototype function.\r\n     */\r\n    Private.protoMatchFunc = (function () {\r\n        var proto = Element.prototype;\r\n        return (proto.matches ||\r\n            proto.matchesSelector ||\r\n            proto.mozMatchesSelector ||\r\n            proto.msMatchesSelector ||\r\n            proto.oMatchesSelector ||\r\n            proto.webkitMatchesSelector ||\r\n            (function (selector) {\r\n                var elem = this;\r\n                var matches = elem.ownerDocument.querySelectorAll(selector);\r\n                return Array.prototype.indexOf.call(matches, elem) !== -1;\r\n            }));\r\n    })();\r\n    /**\r\n     * Calculate the specificity of a single selector.\r\n     *\r\n     * The behavior is undefined if the selector is invalid.\r\n     */\r\n    function calculateSingle(selector) {\r\n        // Ignore anything after the first comma.\r\n        selector = selector.split(',', 1)[0];\r\n        // Setup the aggregate counters.\r\n        var a = 0;\r\n        var b = 0;\r\n        var c = 0;\r\n        // Apply a regex to the front of the selector. If it succeeds, that\r\n        // portion of the selector is removed. Returns a success/fail flag.\r\n        function match(re) {\r\n            var match = selector.match(re);\r\n            if (match === null) {\r\n                return false;\r\n            }\r\n            selector = selector.slice(match[0].length);\r\n            return true;\r\n        }\r\n        // Replace the negation pseudo-class (which is ignored),\r\n        // but keep its inner content (which is not ignored).\r\n        selector = selector.replace(NEGATION_RE, ' $1 ');\r\n        // Continue matching until the selector is consumed.\r\n        while (selector.length > 0) {\r\n            // Match an ID selector.\r\n            if (match(ID_RE)) {\r\n                a++;\r\n                continue;\r\n            }\r\n            // Match a class selector.\r\n            if (match(CLASS_RE)) {\r\n                b++;\r\n                continue;\r\n            }\r\n            // Match an attribute selector.\r\n            if (match(ATTR_RE)) {\r\n                b++;\r\n                continue;\r\n            }\r\n            // Match a pseudo-element selector. This is done before matching\r\n            // a pseudo-class since this regex overlaps with that regex.\r\n            if (match(PSEUDO_ELEM_RE)) {\r\n                c++;\r\n                continue;\r\n            }\r\n            // Match a pseudo-class selector.\r\n            if (match(PSEDUO_CLASS_RE)) {\r\n                b++;\r\n                continue;\r\n            }\r\n            // Match a plain type selector.\r\n            if (match(TYPE_RE)) {\r\n                c++;\r\n                continue;\r\n            }\r\n            // Finally, match any ignored characters.\r\n            if (match(IGNORE_RE)) {\r\n                continue;\r\n            }\r\n            // At this point, the selector is assumed to be invalid.\r\n            return 0;\r\n        }\r\n        // Clamp each component to a reasonable base.\r\n        a = Math.min(a, 0xFF);\r\n        b = Math.min(b, 0xFF);\r\n        c = Math.min(c, 0xFF);\r\n        // Combine the components into a single result.\r\n        return (a << 16) | (b << 8) | c;\r\n    }\r\n    Private.calculateSingle = calculateSingle;\r\n    /**\r\n     * A regex which matches an ID selector at string start.\r\n     */\r\n    var ID_RE = /^#[^\\s\\+>~#\\.\\[:]+/;\r\n    /**\r\n     * A regex which matches a class selector at string start.\r\n     */\r\n    var CLASS_RE = /^\\.[^\\s\\+>~#\\.\\[:]+/;\r\n    /**\r\n     * A regex which matches an attribute selector at string start.\r\n     */\r\n    var ATTR_RE = /^\\[[^\\]]+\\]/;\r\n    /**\r\n     * A regex which matches a type selector at string start.\r\n     */\r\n    var TYPE_RE = /^[^\\s\\+>~#\\.\\[:]+/;\r\n    /**\r\n     * A regex which matches a pseudo-element selector at string start.\r\n     */\r\n    var PSEUDO_ELEM_RE = /^(::[^\\s\\+>~#\\.\\[:]+|:first-line|:first-letter|:before|:after)/;\r\n    /**\r\n     * A regex which matches a pseudo-class selector at string start.\r\n     */\r\n    var PSEDUO_CLASS_RE = /^:[^\\s\\+>~#\\.\\[:]+/;\r\n    /**\r\n     * A regex which matches ignored characters at string start.\r\n     */\r\n    var IGNORE_RE = /^[\\s\\+>~\\*]+/;\r\n    /**\r\n     * A regex which matches the negation pseudo-class globally.\r\n     */\r\n    var NEGATION_RE = /:not\\(([^\\)]+)\\)/g;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar disposable_1 = require(\"@phosphor/disposable\");\r\n/**\r\n * An object which manages a drag-drop operation.\r\n *\r\n * A drag object dispatches four different events to drop targets:\r\n *\r\n * - `'p-dragenter'` - Dispatched when the mouse enters the target\r\n *   element. This event must be canceled in order to receive any\r\n *   of the other events.\r\n *\r\n * - `'p-dragover'` - Dispatched when the mouse moves over the drop\r\n *   target. It must cancel the event and set the `dropAction` to one\r\n *   of the supported actions in order to receive drop events.\r\n *\r\n * - `'p-dragleave'` - Dispatched when the mouse leaves the target\r\n *   element. This includes moving the mouse into child elements.\r\n *\r\n * - `'p-drop'`- Dispatched when the mouse is released over the target\r\n *   element when the target indicates an appropriate drop action. If\r\n *   the event is canceled, the indicated drop action is returned to\r\n *   the initiator through the resolved promise.\r\n *\r\n * A drag operation can be terminated at any time by pressing `Escape`\r\n * or by disposing the drag object.\r\n *\r\n * A drag object has the ability to automatically scroll a scrollable\r\n * element when the mouse is hovered near one of its edges. To enable\r\n * this, add the `data-p-dragscroll` attribute to any element which\r\n * the drag object should consider for scrolling.\r\n *\r\n * #### Notes\r\n * This class is designed to be used when dragging and dropping custom\r\n * data *within* a single application. It is *not* a replacement for\r\n * the native drag-drop API. Instead, it provides an API which allows\r\n * drag operations to be initiated programmatically and enables the\r\n * transfer of arbitrary non-string objects; features which are not\r\n * possible with the native drag-drop API.\r\n */\r\nvar Drag = (function () {\r\n    /**\r\n     * Construct a new drag object.\r\n     *\r\n     * @param options - The options for initializing the drag.\r\n     */\r\n    function Drag(options) {\r\n        var _this = this;\r\n        /**\r\n         * The scroll loop handler function.\r\n         */\r\n        this._onScrollFrame = function () {\r\n            // Bail early if there is no scroll target.\r\n            if (!_this._scrollTarget) {\r\n                return;\r\n            }\r\n            // Unpack the scroll target.\r\n            var _a = _this._scrollTarget, element = _a.element, edge = _a.edge, distance = _a.distance;\r\n            // Calculate the scroll delta using nonlinear acceleration.\r\n            var d = Private.SCROLL_EDGE_SIZE - distance;\r\n            var f = Math.pow(d / Private.SCROLL_EDGE_SIZE, 2);\r\n            var s = Math.max(1, Math.round(f * Private.SCROLL_EDGE_SIZE));\r\n            // Scroll the element in the specified direction.\r\n            switch (edge) {\r\n                case 'top':\r\n                    element.scrollTop -= s;\r\n                    break;\r\n                case 'left':\r\n                    element.scrollLeft -= s;\r\n                    break;\r\n                case 'right':\r\n                    element.scrollLeft += s;\r\n                    break;\r\n                case 'bottom':\r\n                    element.scrollTop += s;\r\n                    break;\r\n            }\r\n            // Request the next cycle of the scroll loop.\r\n            requestAnimationFrame(_this._onScrollFrame);\r\n        };\r\n        this._disposed = false;\r\n        this._dropAction = 'none';\r\n        this._override = null;\r\n        this._currentTarget = null;\r\n        this._currentElement = null;\r\n        this._promise = null;\r\n        this._scrollTarget = null;\r\n        this._resolve = null;\r\n        this.mimeData = options.mimeData;\r\n        this.dragImage = options.dragImage || null;\r\n        this.proposedAction = options.proposedAction || 'copy';\r\n        this.supportedActions = options.supportedActions || 'all';\r\n        this.source = options.source || null;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the drag object.\r\n     *\r\n     * #### Notes\r\n     * This will cancel the drag operation if it is active.\r\n     */\r\n    Drag.prototype.dispose = function () {\r\n        // Do nothing if the drag object is already disposed.\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n        this._disposed = true;\r\n        // If there is a current target, dispatch a drag leave event.\r\n        if (this._currentTarget) {\r\n            var event_1 = Private.createMouseEvent('mouseup', -1, -1);\r\n            Private.dispatchDragLeave(this, this._currentTarget, null, event_1);\r\n        }\r\n        // Finalize the drag object with `'none'`.\r\n        this._finalize('none');\r\n    };\r\n    Object.defineProperty(Drag.prototype, \"isDisposed\", {\r\n        /**\r\n         * Test whether the drag object is disposed.\r\n         */\r\n        get: function () {\r\n            return this._disposed;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Start the drag operation at the specified client position.\r\n     *\r\n     * @param clientX - The client X position for the drag start.\r\n     *\r\n     * @param clientY - The client Y position for the drag start.\r\n     *\r\n     * @returns A promise which resolves to the result of the drag.\r\n     *\r\n     * #### Notes\r\n     * If the drag has already been started, the promise created by the\r\n     * first call to `start` is returned.\r\n     *\r\n     * If the drag operation has ended, or if the drag object has been\r\n     * disposed, the returned promise will resolve to `'none'`.\r\n     *\r\n     * The drag object will be automatically disposed when drag operation\r\n     * completes. This means `Drag` objects are for single-use only.\r\n     *\r\n     * This method assumes the left mouse button is already held down.\r\n     */\r\n    Drag.prototype.start = function (clientX, clientY) {\r\n        var _this = this;\r\n        // If the drag object is already disposed, resolve to `None`.\r\n        if (this._disposed) {\r\n            return Promise.resolve('none');\r\n        }\r\n        // If the drag has already been started, return the promise.\r\n        if (this._promise) {\r\n            return this._promise;\r\n        }\r\n        // Install the document listeners for the drag object.\r\n        this._addListeners();\r\n        // Attach the drag image at the specified client position.\r\n        this._attachDragImage(clientX, clientY);\r\n        // Create the promise which will be resolved on completion.\r\n        this._promise = new Promise(function (resolve, reject) {\r\n            _this._resolve = resolve;\r\n        });\r\n        // Trigger a fake move event to kick off the drag operation.\r\n        var event = Private.createMouseEvent('mousemove', clientX, clientY);\r\n        document.dispatchEvent(event);\r\n        // Return the pending promise for the drag operation.\r\n        return this._promise;\r\n    };\r\n    /**\r\n     * Handle the DOM events for the drag operation.\r\n     *\r\n     * @param event - The DOM event sent to the drag object.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the document. It should not be\r\n     * called directly by user code.\r\n     */\r\n    Drag.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'mousemove':\r\n                this._evtMouseMove(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtMouseUp(event);\r\n                break;\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            default:\r\n                // Stop all other events during drag-drop.\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousemove'` event for the drag object.\r\n     */\r\n    Drag.prototype._evtMouseMove = function (event) {\r\n        // Stop all input events during drag-drop.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Update the current target node and dispatch enter/leave events.\r\n        this._updateCurrentTarget(event);\r\n        // Update the drag scroll element.\r\n        this._updateDragScroll(event);\r\n        // Move the drag image to the specified client position. This is\r\n        // performed *after* dispatching to prevent unnecessary reflows.\r\n        this._moveDragImage(event.clientX, event.clientY);\r\n    };\r\n    /**\r\n     * Handle the `'mouseup'` event for the drag object.\r\n     */\r\n    Drag.prototype._evtMouseUp = function (event) {\r\n        // Stop all input events during drag-drop.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Do nothing if the left button is not released.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Update the current target node and dispatch enter/leave events.\r\n        // This prevents a subtle issue where the DOM mutates under the\r\n        // cursor after the last move event but before the drop event.\r\n        this._updateCurrentTarget(event);\r\n        // If there is no current target, finalize with `'none'`.\r\n        if (!this._currentTarget) {\r\n            this._finalize('none');\r\n            return;\r\n        }\r\n        // If the last drop action was `'none'`, dispatch a leave event\r\n        // to the current target and finalize the drag with `'none'`.\r\n        if (this._dropAction === 'none') {\r\n            Private.dispatchDragLeave(this, this._currentTarget, null, event);\r\n            this._finalize('none');\r\n            return;\r\n        }\r\n        // Dispatch the drop event at the current target and finalize\r\n        // with the resulting drop action.\r\n        var action = Private.dispatchDrop(this, this._currentTarget, event);\r\n        this._finalize(action);\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the drag object.\r\n     */\r\n    Drag.prototype._evtKeyDown = function (event) {\r\n        // Stop all input events during drag-drop.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Cancel the drag if `Escape` is pressed.\r\n        if (event.keyCode === 27) {\r\n            this.dispose();\r\n        }\r\n    };\r\n    /**\r\n     * Add the document event listeners for the drag object.\r\n     */\r\n    Drag.prototype._addListeners = function () {\r\n        document.addEventListener('mousedown', this, true);\r\n        document.addEventListener('mousemove', this, true);\r\n        document.addEventListener('mouseup', this, true);\r\n        document.addEventListener('mouseenter', this, true);\r\n        document.addEventListener('mouseleave', this, true);\r\n        document.addEventListener('mouseover', this, true);\r\n        document.addEventListener('mouseout', this, true);\r\n        document.addEventListener('keydown', this, true);\r\n        document.addEventListener('keyup', this, true);\r\n        document.addEventListener('keypress', this, true);\r\n        document.addEventListener('contextmenu', this, true);\r\n    };\r\n    /**\r\n     * Remove the document event listeners for the drag object.\r\n     */\r\n    Drag.prototype._removeListeners = function () {\r\n        document.removeEventListener('mousedown', this, true);\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n        document.removeEventListener('mouseenter', this, true);\r\n        document.removeEventListener('mouseleave', this, true);\r\n        document.removeEventListener('mouseover', this, true);\r\n        document.removeEventListener('mouseout', this, true);\r\n        document.removeEventListener('keydown', this, true);\r\n        document.removeEventListener('keyup', this, true);\r\n        document.removeEventListener('keypress', this, true);\r\n        document.removeEventListener('contextmenu', this, true);\r\n    };\r\n    /**\r\n     * Update the drag scroll element under the mouse.\r\n     */\r\n    Drag.prototype._updateDragScroll = function (event) {\r\n        // Find the scroll target under the mouse.\r\n        var target = Private.findScrollTarget(event);\r\n        // Bail if there is nothing to scroll.\r\n        if (!this._scrollTarget && !target) {\r\n            return;\r\n        }\r\n        // Start the scroll loop if needed.\r\n        if (!this._scrollTarget) {\r\n            setTimeout(this._onScrollFrame, 500);\r\n        }\r\n        // Update the scroll target.\r\n        this._scrollTarget = target;\r\n    };\r\n    /**\r\n     * Update the current target node using the given mouse event.\r\n     */\r\n    Drag.prototype._updateCurrentTarget = function (event) {\r\n        // Fetch common local state.\r\n        var prevTarget = this._currentTarget;\r\n        var currTarget = this._currentTarget;\r\n        var prevElem = this._currentElement;\r\n        // Find the current indicated element at the given position.\r\n        var currElem = document.elementFromPoint(event.clientX, event.clientY);\r\n        // Update the current element reference.\r\n        this._currentElement = currElem;\r\n        // If the indicated element changes from the previous iteration,\r\n        // and is different from the current target, dispatch the exit\r\n        // event to the target.\r\n        if (currElem !== prevElem && currElem !== currTarget) {\r\n            Private.dispatchDragExit(this, currTarget, currElem, event);\r\n        }\r\n        // If the indicated element changes from the previous iteration,\r\n        // and is different from the current target, dispatch the enter\r\n        // event and compute the new target element.\r\n        if (currElem !== prevElem && currElem !== currTarget) {\r\n            currTarget = Private.dispatchDragEnter(this, currElem, currTarget, event);\r\n        }\r\n        // If the current target element has changed, update the current\r\n        // target reference and dispatch the leave event to the old target.\r\n        if (currTarget !== prevTarget) {\r\n            this._currentTarget = currTarget;\r\n            Private.dispatchDragLeave(this, prevTarget, currTarget, event);\r\n        }\r\n        // Dispatch the drag over event and update the drop action.\r\n        var action = Private.dispatchDragOver(this, currTarget, event);\r\n        this._setDropAction(action);\r\n    };\r\n    /**\r\n     * Attach the drag image element at the specified location.\r\n     *\r\n     * This is a no-op if there is no drag image element.\r\n     */\r\n    Drag.prototype._attachDragImage = function (clientX, clientY) {\r\n        if (!this.dragImage) {\r\n            return;\r\n        }\r\n        this.dragImage.classList.add('p-mod-drag-image');\r\n        var style = this.dragImage.style;\r\n        style.pointerEvents = 'none';\r\n        style.position = 'fixed';\r\n        style.top = clientY + \"px\";\r\n        style.left = clientX + \"px\";\r\n        document.body.appendChild(this.dragImage);\r\n    };\r\n    /**\r\n     * Move the drag image element to the specified location.\r\n     *\r\n     * This is a no-op if there is no drag image element.\r\n     */\r\n    Drag.prototype._moveDragImage = function (clientX, clientY) {\r\n        if (!this.dragImage) {\r\n            return;\r\n        }\r\n        var style = this.dragImage.style;\r\n        style.top = clientY + \"px\";\r\n        style.left = clientX + \"px\";\r\n    };\r\n    /**\r\n     * Detach the drag image element from the DOM.\r\n     *\r\n     * This is a no-op if there is no drag image element.\r\n     */\r\n    Drag.prototype._detachDragImage = function () {\r\n        if (!this.dragImage) {\r\n            return;\r\n        }\r\n        var parent = this.dragImage.parentNode;\r\n        if (!parent) {\r\n            return;\r\n        }\r\n        parent.removeChild(this.dragImage);\r\n    };\r\n    /**\r\n     * Set the internal drop action state and update the drag cursor.\r\n     */\r\n    Drag.prototype._setDropAction = function (action) {\r\n        action = Private.validateAction(action, this.supportedActions);\r\n        if (this._override && this._dropAction === action) {\r\n            return;\r\n        }\r\n        switch (action) {\r\n            case 'none':\r\n                this._dropAction = action;\r\n                this._override = Drag.overrideCursor('no-drop');\r\n                break;\r\n            case 'copy':\r\n                this._dropAction = action;\r\n                this._override = Drag.overrideCursor('copy');\r\n                break;\r\n            case 'link':\r\n                this._dropAction = action;\r\n                this._override = Drag.overrideCursor('alias');\r\n                break;\r\n            case 'move':\r\n                this._dropAction = action;\r\n                this._override = Drag.overrideCursor('move');\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Finalize the drag operation and resolve the drag promise.\r\n     */\r\n    Drag.prototype._finalize = function (action) {\r\n        // Store the resolve function as a temp variable.\r\n        var resolve = this._resolve;\r\n        // Remove the document event listeners.\r\n        this._removeListeners();\r\n        // Detach the drag image.\r\n        this._detachDragImage();\r\n        // Dispose of the cursor override.\r\n        if (this._override) {\r\n            this._override.dispose();\r\n            this._override = null;\r\n        }\r\n        // Clear the mime data.\r\n        this.mimeData.clear();\r\n        // Clear the rest of the internal drag state.\r\n        this._disposed = true;\r\n        this._dropAction = 'none';\r\n        this._currentTarget = null;\r\n        this._currentElement = null;\r\n        this._scrollTarget = null;\r\n        this._promise = null;\r\n        this._resolve = null;\r\n        // Finally, resolve the promise to the given drop action.\r\n        if (resolve) {\r\n            resolve(action);\r\n        }\r\n    };\r\n    return Drag;\r\n}());\r\nexports.Drag = Drag;\r\n/**\r\n * The namespace for the `Drag` class statics.\r\n */\r\n(function (Drag) {\r\n    /**\r\n     * Override the cursor icon for the entire document.\r\n     *\r\n     * @param cursor - The string representing the cursor style.\r\n     *\r\n     * @returns A disposable which will clear the override when disposed.\r\n     *\r\n     * #### Notes\r\n     * The most recent call to `overrideCursor` takes precedence.\r\n     * Disposing an old override has no effect on the current override.\r\n     *\r\n     * This utility function is used by the `Drag` class to override the\r\n     * mouse cursor during a drag-drop operation, but it can also be used\r\n     * by other classes to fix the cursor icon during normal mouse drags.\r\n     *\r\n     * #### Example\r\n     * ```typescript\r\n     * import { Drag } from '@phosphor/dragdrop';\r\n     *\r\n     * // Force the cursor to be 'wait' for the entire document.\r\n     * let override = Drag.overrideCursor('wait');\r\n     *\r\n     * // Clear the override by disposing the return value.\r\n     * override.dispose();\r\n     * ```\r\n     */\r\n    function overrideCursor(cursor) {\r\n        var id = ++overrideCursorID;\r\n        document.body.style.cursor = cursor;\r\n        document.body.classList.add('p-mod-override-cursor');\r\n        return new disposable_1.DisposableDelegate(function () {\r\n            if (id === overrideCursorID) {\r\n                document.body.style.cursor = '';\r\n                document.body.classList.remove('p-mod-override-cursor');\r\n            }\r\n        });\r\n    }\r\n    Drag.overrideCursor = overrideCursor;\r\n    /**\r\n     * The internal id for the active cursor override.\r\n     */\r\n    var overrideCursorID = 0;\r\n})(Drag = exports.Drag || (exports.Drag = {}));\r\nexports.Drag = Drag;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The size of a drag scroll edge, in pixels.\r\n     */\r\n    Private.SCROLL_EDGE_SIZE = 20;\r\n    /**\r\n     * Validate the given action is one of the supported actions.\r\n     *\r\n     * Returns the given action or `'none'` if the action is unsupported.\r\n     */\r\n    function validateAction(action, supported) {\r\n        return (actionTable[action] & supportedTable[supported]) ? action : 'none';\r\n    }\r\n    Private.validateAction = validateAction;\r\n    /**\r\n     * Create a left mouse event at the given position.\r\n     *\r\n     * @param type - The event type for the mouse event.\r\n     *\r\n     * @param clientX - The client X position.\r\n     *\r\n     * @param clientY - The client Y position.\r\n     *\r\n     * @returns A newly created and initialized mouse event.\r\n     */\r\n    function createMouseEvent(type, clientX, clientY) {\r\n        var event = document.createEvent('MouseEvent');\r\n        event.initMouseEvent(type, true, true, window, 0, 0, 0, clientX, clientY, false, false, false, false, 0, null);\r\n        return event;\r\n    }\r\n    Private.createMouseEvent = createMouseEvent;\r\n    /**\r\n     * Find the drag scroll target under the mouse, if any.\r\n     */\r\n    function findScrollTarget(event) {\r\n        // Look up the client mouse position.\r\n        var x = event.clientX;\r\n        var y = event.clientY;\r\n        // Get the element under the mouse.\r\n        var element = document.elementFromPoint(x, y);\r\n        // Search for a scrollable target based on the mouse position.\r\n        // The null assert in third clause of for-loop is required due to:\r\n        // https://github.com/Microsoft/TypeScript/issues/14143\r\n        for (; element; element = element.parentElement) {\r\n            // Ignore elements which are not marked as scrollable.\r\n            if (!element.hasAttribute('data-p-dragscroll')) {\r\n                continue;\r\n            }\r\n            // Set up the coordinate offsets for the element.\r\n            var offsetX = 0;\r\n            var offsetY = 0;\r\n            if (element === document.body) {\r\n                offsetX = window.pageXOffset;\r\n                offsetY = window.pageYOffset;\r\n            }\r\n            // Get the element bounds in viewport coordinates.\r\n            var r = element.getBoundingClientRect();\r\n            var top_1 = r.top + offsetY;\r\n            var left = r.left + offsetX;\r\n            var right = left + r.width;\r\n            var bottom = top_1 + r.height;\r\n            // Skip the element if it's not under the mouse.\r\n            if (x < left || x >= right || y < top_1 || y >= bottom) {\r\n                continue;\r\n            }\r\n            // Compute the distance to each edge.\r\n            var dl = x - left + 1;\r\n            var dt = y - top_1 + 1;\r\n            var dr = right - x;\r\n            var db = bottom - y;\r\n            // Find the smallest of the edge distances.\r\n            var distance = Math.min(dl, dt, dr, db);\r\n            // Skip the element if the mouse is not within a scroll edge.\r\n            if (distance > Private.SCROLL_EDGE_SIZE) {\r\n                continue;\r\n            }\r\n            // Set up the edge result variable.\r\n            var edge = void 0;\r\n            // Find the edge for the computed distance.\r\n            switch (distance) {\r\n                case db:\r\n                    edge = 'bottom';\r\n                    break;\r\n                case dt:\r\n                    edge = 'top';\r\n                    break;\r\n                case dr:\r\n                    edge = 'right';\r\n                    break;\r\n                case dl:\r\n                    edge = 'left';\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n            // Compute how much the element can scroll in width and height.\r\n            var dsw = element.scrollWidth - element.clientWidth;\r\n            var dsh = element.scrollHeight - element.clientHeight;\r\n            // Determine if the element should be scrolled for the edge.\r\n            var shouldScroll = void 0;\r\n            switch (edge) {\r\n                case 'top':\r\n                    shouldScroll = dsh > 0 && element.scrollTop > 0;\r\n                    break;\r\n                case 'left':\r\n                    shouldScroll = dsw > 0 && element.scrollLeft > 0;\r\n                    break;\r\n                case 'right':\r\n                    shouldScroll = dsw > 0 && element.scrollLeft < dsw;\r\n                    break;\r\n                case 'bottom':\r\n                    shouldScroll = dsh > 0 && element.scrollTop < dsh;\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n            // Skip the element if it should not be scrolled.\r\n            if (!shouldScroll) {\r\n                continue;\r\n            }\r\n            // Return the drag scroll target.\r\n            return { element: element, edge: edge, distance: distance };\r\n        }\r\n        // No drag scroll target was found.\r\n        return null;\r\n    }\r\n    Private.findScrollTarget = findScrollTarget;\r\n    /**\r\n     * Dispatch a drag enter event to the indicated element.\r\n     *\r\n     * @param drag - The drag object associated with the action.\r\n     *\r\n     * @param currElem - The currently indicated element, or `null`. This\r\n     *   is the \"immediate user selection\" from the whatwg spec.\r\n     *\r\n     * @param currTarget - The current drag target element, or `null`. This\r\n     *   is the \"current target element\" from the whatwg spec.\r\n     *\r\n     * @param event - The mouse event related to the action.\r\n     *\r\n     * @returns The element to use as the current drag target. This is the\r\n     *   \"current target element\" from the whatwg spec, and may be `null`.\r\n     *\r\n     * #### Notes\r\n     * This largely implements the drag enter portion of the whatwg spec:\r\n     * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n     */\r\n    function dispatchDragEnter(drag, currElem, currTarget, event) {\r\n        // If the current element is null, return null as the new target.\r\n        if (!currElem) {\r\n            return null;\r\n        }\r\n        // Dispatch a drag enter event to the current element.\r\n        var dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);\r\n        var canceled = !currElem.dispatchEvent(dragEvent);\r\n        // If the event was canceled, use the current element as the new target.\r\n        if (canceled) {\r\n            return currElem;\r\n        }\r\n        // If the current element is the document body, keep the original target.\r\n        if (currElem === document.body) {\r\n            return currTarget;\r\n        }\r\n        // Dispatch a drag enter event on the document body.\r\n        dragEvent = createDragEvent('p-dragenter', drag, event, currTarget);\r\n        document.body.dispatchEvent(dragEvent);\r\n        // Ignore the event cancellation, and use the body as the new target.\r\n        return document.body;\r\n    }\r\n    Private.dispatchDragEnter = dispatchDragEnter;\r\n    /**\r\n     * Dispatch a drag exit event to the indicated element.\r\n     *\r\n     * @param drag - The drag object associated with the action.\r\n     *\r\n     * @param prevTarget - The previous target element, or `null`. This\r\n     *   is the previous \"current target element\" from the whatwg spec.\r\n     *\r\n     * @param currTarget - The current drag target element, or `null`. This\r\n     *   is the \"current target element\" from the whatwg spec.\r\n     *\r\n     * @param event - The mouse event related to the action.\r\n     *\r\n     * #### Notes\r\n     * This largely implements the drag exit portion of the whatwg spec:\r\n     * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n     */\r\n    function dispatchDragExit(drag, prevTarget, currTarget, event) {\r\n        // If the previous target is null, do nothing.\r\n        if (!prevTarget) {\r\n            return;\r\n        }\r\n        // Dispatch the drag exit event to the previous target.\r\n        var dragEvent = createDragEvent('p-dragexit', drag, event, currTarget);\r\n        prevTarget.dispatchEvent(dragEvent);\r\n    }\r\n    Private.dispatchDragExit = dispatchDragExit;\r\n    /**\r\n     * Dispatch a drag leave event to the indicated element.\r\n     *\r\n     * @param drag - The drag object associated with the action.\r\n     *\r\n     * @param prevTarget - The previous target element, or `null`. This\r\n     *   is the previous \"current target element\" from the whatwg spec.\r\n     *\r\n     * @param currTarget - The current drag target element, or `null`. This\r\n     *   is the \"current target element\" from the whatwg spec.\r\n     *\r\n     * @param event - The mouse event related to the action.\r\n     *\r\n     * #### Notes\r\n     * This largely implements the drag leave portion of the whatwg spec:\r\n     * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n     */\r\n    function dispatchDragLeave(drag, prevTarget, currTarget, event) {\r\n        // If the previous target is null, do nothing.\r\n        if (!prevTarget) {\r\n            return;\r\n        }\r\n        // Dispatch the drag leave event to the previous target.\r\n        var dragEvent = createDragEvent('p-dragleave', drag, event, currTarget);\r\n        prevTarget.dispatchEvent(dragEvent);\r\n    }\r\n    Private.dispatchDragLeave = dispatchDragLeave;\r\n    /**\r\n     * Dispatch a drag over event to the indicated element.\r\n     *\r\n     * @param drag - The drag object associated with the action.\r\n     *\r\n     * @param currTarget - The current drag target element, or `null`. This\r\n     *   is the \"current target element\" from the whatwg spec.\r\n     *\r\n     * @param event - The mouse event related to the action.\r\n     *\r\n     * @returns The `DropAction` result of the drag over event.\r\n     *\r\n     * #### Notes\r\n     * This largely implements the drag over portion of the whatwg spec:\r\n     * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n     */\r\n    function dispatchDragOver(drag, currTarget, event) {\r\n        // If there is no current target, the drop action is none.\r\n        if (!currTarget) {\r\n            return 'none';\r\n        }\r\n        // Dispatch the drag over event to the current target.\r\n        var dragEvent = createDragEvent('p-dragover', drag, event, null);\r\n        var canceled = !currTarget.dispatchEvent(dragEvent);\r\n        // If the event was canceled, return the drop action result.\r\n        if (canceled) {\r\n            return dragEvent.dropAction;\r\n        }\r\n        // Otherwise, the effective drop action is none.\r\n        return 'none';\r\n    }\r\n    Private.dispatchDragOver = dispatchDragOver;\r\n    /**\r\n     * Dispatch a drop event to the indicated element.\r\n     *\r\n     * @param drag - The drag object associated with the action.\r\n     *\r\n     * @param currTarget - The current drag target element, or `null`. This\r\n     *   is the \"current target element\" from the whatwg spec.\r\n     *\r\n     * @param event - The mouse event related to the action.\r\n     *\r\n     * @returns The `DropAction` result of the drop event.\r\n     *\r\n     * #### Notes\r\n     * This largely implements the drag over portion of the whatwg spec:\r\n     * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n     */\r\n    function dispatchDrop(drag, currTarget, event) {\r\n        // If there is no current target, the drop action is none.\r\n        if (!currTarget) {\r\n            return 'none';\r\n        }\r\n        // Dispatch the drop event to the current target.\r\n        var dragEvent = createDragEvent('p-drop', drag, event, null);\r\n        var canceled = !currTarget.dispatchEvent(dragEvent);\r\n        // If the event was canceled, return the drop action result.\r\n        if (canceled) {\r\n            return dragEvent.dropAction;\r\n        }\r\n        // Otherwise, the effective drop action is none.\r\n        return 'none';\r\n    }\r\n    Private.dispatchDrop = dispatchDrop;\r\n    /**\r\n     * A lookup table from drop action to bit value.\r\n     */\r\n    var actionTable = {\r\n        'none': 0x0,\r\n        'copy': 0x1,\r\n        'link': 0x2,\r\n        'move': 0x4\r\n    };\r\n    /**\r\n     * A lookup table from supported action to drop action bit mask.\r\n     */\r\n    var supportedTable = {\r\n        'none': actionTable['none'],\r\n        'copy': actionTable['copy'],\r\n        'link': actionTable['link'],\r\n        'move': actionTable['move'],\r\n        'copy-link': actionTable['copy'] | actionTable['link'],\r\n        'copy-move': actionTable['copy'] | actionTable['move'],\r\n        'link-move': actionTable['link'] | actionTable['move'],\r\n        'all': actionTable['copy'] | actionTable['link'] | actionTable['move']\r\n    };\r\n    /**\r\n     * Create a new initialized `IDragEvent` from the given data.\r\n     *\r\n     * @param type - The event type for the drag event.\r\n     *\r\n     * @param drag - The drag object to use for seeding the drag data.\r\n     *\r\n     * @param event - The mouse event to use for seeding the mouse data.\r\n     *\r\n     * @param related - The related target for the event, or `null`.\r\n     *\r\n     * @returns A new object which implements `IDragEvent`.\r\n     */\r\n    function createDragEvent(type, drag, event, related) {\r\n        // Create a new mouse event to use as the drag event. Currently,\r\n        // JS engines do now allow user-defined Event subclasses.\r\n        var dragEvent = document.createEvent('MouseEvent');\r\n        // Initialize the mouse event data.\r\n        dragEvent.initMouseEvent(type, true, true, window, 0, event.screenX, event.screenY, event.clientX, event.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, related);\r\n        // Forcefully add the custom drag event properties.\r\n        dragEvent.dropAction = 'none';\r\n        dragEvent.mimeData = drag.mimeData;\r\n        dragEvent.proposedAction = drag.proposedAction;\r\n        dragEvent.supportedActions = drag.supportedActions;\r\n        dragEvent.source = drag.source;\r\n        // Return the fully initialized drag event.\r\n        return dragEvent;\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Get the global application keyboard layout instance.\r\n *\r\n * @returns The keyboard layout for use by the application.\r\n *\r\n * #### Notes\r\n * The default keyboard layout is US-English.\r\n */\r\nfunction getKeyboardLayout() {\r\n    return Private.keyboardLayout;\r\n}\r\nexports.getKeyboardLayout = getKeyboardLayout;\r\n/**\r\n * Set the global application keyboard layout instance.\r\n *\r\n * @param - The keyboard layout for use by the application.\r\n *\r\n * #### Notes\r\n * The keyboard layout should typically be set on application startup\r\n * to a layout which is appropriate for the user's system.\r\n */\r\nfunction setKeyboardLayout(layout) {\r\n    Private.keyboardLayout = layout;\r\n}\r\nexports.setKeyboardLayout = setKeyboardLayout;\r\n/**\r\n * A concrete implementation of [[IKeyboardLayout]] based on keycodes.\r\n *\r\n * The `keyCode` property of a `'keydown'` event is a browser and OS\r\n * specific representation of the physical key (not character) which\r\n * was pressed on a keyboard. While not the most convenient API, it\r\n * is currently the only one which works reliably on all browsers.\r\n *\r\n * This class accepts a user-defined mapping of keycode to key, which\r\n * allows for reliable shortcuts tailored to the user's system.\r\n */\r\nvar KeycodeLayout = (function () {\r\n    /**\r\n     * Construct a new keycode layout.\r\n     *\r\n     * @param name - The human readable name for the layout.\r\n     *\r\n     * @param codes - A mapping of keycode to key value.\r\n     */\r\n    function KeycodeLayout(name, codes) {\r\n        this.name = name;\r\n        this._codes = codes;\r\n        this._keys = KeycodeLayout.extractKeys(codes);\r\n    }\r\n    /**\r\n     * Get an array of the key values supported by the layout.\r\n     *\r\n     * @returns A new array of the supported key values.\r\n     */\r\n    KeycodeLayout.prototype.keys = function () {\r\n        return Object.keys(this._keys);\r\n    };\r\n    /**\r\n     * Test whether the given key is a valid value for the layout.\r\n     *\r\n     * @param key - The user provided key to test for validity.\r\n     *\r\n     * @returns `true` if the key is valid, `false` otherwise.\r\n     */\r\n    KeycodeLayout.prototype.isValidKey = function (key) {\r\n        return key in this._keys;\r\n    };\r\n    /**\r\n     * Get the key for a `'keydown'` event.\r\n     *\r\n     * @param event - The event object for a `'keydown'` event.\r\n     *\r\n     * @returns The associated key value, or an empty string if\r\n     *   the event does not represent a valid primary key.\r\n     */\r\n    KeycodeLayout.prototype.keyForKeydownEvent = function (event) {\r\n        return this._codes[event.keyCode] || '';\r\n    };\r\n    return KeycodeLayout;\r\n}());\r\nexports.KeycodeLayout = KeycodeLayout;\r\n/**\r\n * The namespace for the `KeycodeLayout` class statics.\r\n */\r\n(function (KeycodeLayout) {\r\n    /**\r\n     * Extract the set of keys from a code map.\r\n     *\r\n     * @param code - The code map of interest.\r\n     *\r\n     * @returns A set of the keys in the code map.\r\n     */\r\n    function extractKeys(codes) {\r\n        var keys = Object.create(null);\r\n        for (var c in codes) {\r\n            keys[codes[c]] = true;\r\n        }\r\n        return keys;\r\n    }\r\n    KeycodeLayout.extractKeys = extractKeys;\r\n})(KeycodeLayout = exports.KeycodeLayout || (exports.KeycodeLayout = {}));\r\nexports.KeycodeLayout = KeycodeLayout;\r\n/**\r\n * A keycode-based keyboard layout for US English keyboards.\r\n *\r\n * This layout is valid for the following OS/Browser combinations.\r\n *\r\n * - Windows\r\n *   - Chrome\r\n *   - Firefox\r\n *   - IE\r\n *\r\n * - OSX\r\n *   - Chrome\r\n *   - Firefox\r\n *   - Safari\r\n *\r\n * - Linux\r\n *   - Chrome\r\n *   - Firefox\r\n *\r\n * Other combinations may also work, but are untested.\r\n */\r\nexports.EN_US = new KeycodeLayout('en-us', {\r\n    8: 'Backspace',\r\n    9: 'Tab',\r\n    13: 'Enter',\r\n    19: 'Pause',\r\n    27: 'Escape',\r\n    32: 'Space',\r\n    33: 'PageUp',\r\n    34: 'PageDown',\r\n    35: 'End',\r\n    36: 'Home',\r\n    37: 'ArrowLeft',\r\n    38: 'ArrowUp',\r\n    39: 'ArrowRight',\r\n    40: 'ArrowDown',\r\n    45: 'Insert',\r\n    46: 'Delete',\r\n    48: '0',\r\n    49: '1',\r\n    50: '2',\r\n    51: '3',\r\n    52: '4',\r\n    53: '5',\r\n    54: '6',\r\n    55: '7',\r\n    56: '8',\r\n    57: '9',\r\n    59: ';',\r\n    61: '=',\r\n    65: 'A',\r\n    66: 'B',\r\n    67: 'C',\r\n    68: 'D',\r\n    69: 'E',\r\n    70: 'F',\r\n    71: 'G',\r\n    72: 'H',\r\n    73: 'I',\r\n    74: 'J',\r\n    75: 'K',\r\n    76: 'L',\r\n    77: 'M',\r\n    78: 'N',\r\n    79: 'O',\r\n    80: 'P',\r\n    81: 'Q',\r\n    82: 'R',\r\n    83: 'S',\r\n    84: 'T',\r\n    85: 'U',\r\n    86: 'V',\r\n    87: 'W',\r\n    88: 'X',\r\n    89: 'Y',\r\n    90: 'Z',\r\n    93: 'ContextMenu',\r\n    96: '0',\r\n    97: '1',\r\n    98: '2',\r\n    99: '3',\r\n    100: '4',\r\n    101: '5',\r\n    102: '6',\r\n    103: '7',\r\n    104: '8',\r\n    105: '9',\r\n    106: '*',\r\n    107: '+',\r\n    109: '-',\r\n    110: '.',\r\n    111: '/',\r\n    112: 'F1',\r\n    113: 'F2',\r\n    114: 'F3',\r\n    115: 'F4',\r\n    116: 'F5',\r\n    117: 'F6',\r\n    118: 'F7',\r\n    119: 'F8',\r\n    120: 'F9',\r\n    121: 'F10',\r\n    122: 'F11',\r\n    123: 'F12',\r\n    173: '-',\r\n    186: ';',\r\n    187: '=',\r\n    188: ',',\r\n    189: '-',\r\n    190: '.',\r\n    191: '/',\r\n    192: '`',\r\n    219: '[',\r\n    220: '\\\\',\r\n    221: ']',\r\n    222: '\\''\r\n});\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The global keyboard layout instance.\r\n     */\r\n    Private.keyboardLayout = exports.EN_US;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar collections_1 = require(\"@phosphor/collections\");\r\n/**\r\n * A message which can be delivered to a message handler.\r\n *\r\n * #### Notes\r\n * This class may be subclassed to create complex message types.\r\n */\r\nvar Message = (function () {\r\n    /**\r\n     * Construct a new message.\r\n     *\r\n     * @param type - The type of the message.\r\n     */\r\n    function Message(type) {\r\n        this.type = type;\r\n    }\r\n    Object.defineProperty(Message.prototype, \"isConflatable\", {\r\n        /**\r\n         * Test whether the message is conflatable.\r\n         *\r\n         * #### Notes\r\n         * Message conflation is an advanced topic. Most message types will\r\n         * not make use of this feature.\r\n         *\r\n         * If a conflatable message is posted to a handler while another\r\n         * conflatable message of the same `type` has already been posted\r\n         * to the handler, the `conflate()` method of the existing message\r\n         * will be invoked. If that method returns `true`, the new message\r\n         * will not be enqueued. This allows messages to be compressed, so\r\n         * that only a single instance of the message type is processed per\r\n         * cycle, no matter how many times messages of that type are posted.\r\n         *\r\n         * Custom message types may reimplement this property.\r\n         *\r\n         * The default implementation is always `false`.\r\n         */\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Conflate this message with another message of the same `type`.\r\n     *\r\n     * @param other - A conflatable message of the same `type`.\r\n     *\r\n     * @returns `true` if the message was successfully conflated, or\r\n     *   `false` otherwise.\r\n     *\r\n     * #### Notes\r\n     * Message conflation is an advanced topic. Most message types will\r\n     * not make use of this feature.\r\n     *\r\n     * This method is called automatically by the message loop when the\r\n     * given message is posted to the handler paired with this message.\r\n     * This message will already be enqueued and conflatable, and the\r\n     * given message will have the same `type` and also be conflatable.\r\n     *\r\n     * This method should merge the state of the other message into this\r\n     * message as needed so that when this message is finally delivered\r\n     * to the handler, it receives the most up-to-date information.\r\n     *\r\n     * If this method returns `true`, it signals that the other message\r\n     * was successfully conflated and that message will not be enqueued.\r\n     *\r\n     * If this method returns `false`, the other message will be enqueued\r\n     * for normal delivery.\r\n     *\r\n     * Custom message types may reimplement this method.\r\n     *\r\n     * The default implementation always returns `false`.\r\n     */\r\n    Message.prototype.conflate = function (other) {\r\n        return false;\r\n    };\r\n    return Message;\r\n}());\r\nexports.Message = Message;\r\n/**\r\n * A convenience message class which conflates automatically.\r\n *\r\n * #### Notes\r\n * Message conflation is an advanced topic. Most user code will not\r\n * make use of this class.\r\n *\r\n * This message class is useful for creating message instances which\r\n * should be conflated, but which have no state other than `type`.\r\n *\r\n * If conflation of stateful messages is required, a custom `Message`\r\n * subclass should be created.\r\n */\r\nvar ConflatableMessage = (function (_super) {\r\n    __extends(ConflatableMessage, _super);\r\n    function ConflatableMessage() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(ConflatableMessage.prototype, \"isConflatable\", {\r\n        /**\r\n         * Test whether the message is conflatable.\r\n         *\r\n         * #### Notes\r\n         * This property is always `true`.\r\n         */\r\n        get: function () {\r\n            return true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Conflate this message with another message of the same `type`.\r\n     *\r\n     * #### Notes\r\n     * This method always returns `true`.\r\n     */\r\n    ConflatableMessage.prototype.conflate = function (other) {\r\n        return true;\r\n    };\r\n    return ConflatableMessage;\r\n}(Message));\r\nexports.ConflatableMessage = ConflatableMessage;\r\n/**\r\n * The namespace for the global singleton message loop.\r\n */\r\nvar MessageLoop;\r\n(function (MessageLoop) {\r\n    /**\r\n     * Send a message to a message handler to process immediately.\r\n     *\r\n     * @param handler - The handler which should process the message.\r\n     *\r\n     * @param msg - The message to deliver to the handler.\r\n     *\r\n     * #### Notes\r\n     * The message will first be sent through any installed message hooks\r\n     * for the handler. If the message passes all hooks, it will then be\r\n     * delivered to the `processMessage` method of the handler.\r\n     *\r\n     * The message will not be conflated with pending posted messages.\r\n     *\r\n     * Exceptions in hooks and handlers will be caught and logged.\r\n     */\r\n    function sendMessage(handler, msg) {\r\n        // Lookup the message hooks for the handler.\r\n        var hooks = messageHooks.get(handler);\r\n        // Handle the common case of no installed hooks.\r\n        if (!hooks || hooks.length === 0) {\r\n            invokeHandler(handler, msg);\r\n            return;\r\n        }\r\n        // Invoke the message hooks starting with the newest first.\r\n        var passed = algorithm_1.every(algorithm_1.retro(hooks), function (hook) {\r\n            return hook ? invokeHook(hook, handler, msg) : true;\r\n        });\r\n        // Invoke the handler if the message passes all hooks.\r\n        if (passed) {\r\n            invokeHandler(handler, msg);\r\n        }\r\n    }\r\n    MessageLoop.sendMessage = sendMessage;\r\n    /**\r\n     * Post a message to a message handler to process in the future.\r\n     *\r\n     * @param handler - The handler which should process the message.\r\n     *\r\n     * @param msg - The message to post to the handler.\r\n     *\r\n     * #### Notes\r\n     * The message will be conflated with the pending posted messages for\r\n     * the handler, if possible. If the message is not conflated, it will\r\n     * be queued for normal delivery on the next cycle of the event loop.\r\n     *\r\n     * Exceptions in hooks and handlers will be caught and logged.\r\n     */\r\n    function postMessage(handler, msg) {\r\n        // Handle the common case of a non-conflatable message.\r\n        if (!msg.isConflatable) {\r\n            enqueueMessage(handler, msg);\r\n            return;\r\n        }\r\n        // Conflate the message with an existing message if possible.\r\n        var conflated = algorithm_1.some(messageQueue, function (posted) {\r\n            if (posted.handler !== handler) {\r\n                return false;\r\n            }\r\n            if (!posted.msg) {\r\n                return false;\r\n            }\r\n            if (posted.msg.type !== msg.type) {\r\n                return false;\r\n            }\r\n            if (!posted.msg.isConflatable) {\r\n                return false;\r\n            }\r\n            return posted.msg.conflate(msg);\r\n        });\r\n        // Enqueue the message if it was not conflated.\r\n        if (!conflated) {\r\n            enqueueMessage(handler, msg);\r\n        }\r\n    }\r\n    MessageLoop.postMessage = postMessage;\r\n    /**\r\n     * Install a message hook for a message handler.\r\n     *\r\n     * @param handler - The message handler of interest.\r\n     *\r\n     * @param hook - The message hook to install.\r\n     *\r\n     * #### Notes\r\n     * A message hook is invoked before a message is delivered to the\r\n     * handler. If the hook returns `false`, no other hooks will be\r\n     * invoked and the message will not be delivered to the handler.\r\n     *\r\n     * The most recently installed message hook is executed first.\r\n     *\r\n     * If the hook is already installed, this is a no-op.\r\n     */\r\n    function installMessageHook(handler, hook) {\r\n        // Lookup the hooks for the handler.\r\n        var hooks = messageHooks.get(handler);\r\n        // Bail early if the hook is already installed.\r\n        if (hooks && hooks.indexOf(hook) !== -1) {\r\n            return;\r\n        }\r\n        // Add the hook to the end, so it will be the first to execute.\r\n        if (!hooks) {\r\n            messageHooks.set(handler, [hook]);\r\n        }\r\n        else {\r\n            hooks.push(hook);\r\n        }\r\n    }\r\n    MessageLoop.installMessageHook = installMessageHook;\r\n    /**\r\n     * Remove an installed message hook for a message handler.\r\n     *\r\n     * @param handler - The message handler of interest.\r\n     *\r\n     * @param hook - The message hook to remove.\r\n     *\r\n     * #### Notes\r\n     * It is safe to call this function while the hook is executing.\r\n     *\r\n     * If the hook is not installed, this is a no-op.\r\n     */\r\n    function removeMessageHook(handler, hook) {\r\n        // Lookup the hooks for the handler.\r\n        var hooks = messageHooks.get(handler);\r\n        // Bail early if the hooks do not exist.\r\n        if (!hooks) {\r\n            return;\r\n        }\r\n        // Lookup the index of the hook and bail if not found.\r\n        var i = hooks.indexOf(hook);\r\n        if (i === -1) {\r\n            return;\r\n        }\r\n        // Clear the hook and schedule a cleanup of the array.\r\n        hooks[i] = null;\r\n        scheduleCleanup(hooks);\r\n    }\r\n    MessageLoop.removeMessageHook = removeMessageHook;\r\n    /**\r\n     * Clear all message data associated with a message handler.\r\n     *\r\n     * @param handler - The message handler of interest.\r\n     *\r\n     * #### Notes\r\n     * This will clear all posted messages and hooks for the handler.\r\n     */\r\n    function clearData(handler) {\r\n        // Lookup the hooks for the handler.\r\n        var hooks = messageHooks.get(handler);\r\n        // Clear all messsage hooks for the handler.\r\n        if (hooks && hooks.length > 0) {\r\n            algorithm_1.ArrayExt.fill(hooks, null);\r\n            scheduleCleanup(hooks);\r\n        }\r\n        // Clear all posted messages for the handler.\r\n        algorithm_1.each(messageQueue, function (posted) {\r\n            if (posted.handler === handler) {\r\n                posted.handler = null;\r\n                posted.msg = null;\r\n            }\r\n        });\r\n    }\r\n    MessageLoop.clearData = clearData;\r\n    /**\r\n     * Process the pending posted messages in the queue immediately.\r\n     *\r\n     * #### Notes\r\n     * This function is useful when posted messages must be processed\r\n     * immediately, instead of on the next animation frame.\r\n     *\r\n     * This function should normally not be needed, but it may be\r\n     * required to work around certain browser idiosyncrasies.\r\n     *\r\n     * Recursing into this function is a no-op.\r\n     */\r\n    function flush() {\r\n        // Bail if recursion is detected or if there is no pending task.\r\n        if (flushGuard || loopTaskID === 0) {\r\n            return;\r\n        }\r\n        // Unschedule the pending loop task.\r\n        unschedule(loopTaskID);\r\n        // Run the message loop within the recursion guard.\r\n        flushGuard = true;\r\n        runMessageLoop();\r\n        flushGuard = false;\r\n    }\r\n    MessageLoop.flush = flush;\r\n    /**\r\n     * Get the message loop exception handler.\r\n     *\r\n     * @returns The current exception handler.\r\n     *\r\n     * #### Notes\r\n     * The default exception handler is `console.error`.\r\n     */\r\n    function getExceptionHandler() {\r\n        return exceptionHandler;\r\n    }\r\n    MessageLoop.getExceptionHandler = getExceptionHandler;\r\n    /**\r\n     * Set the message loop exception handler.\r\n     *\r\n     * @param handler - The function to use as the exception handler.\r\n     *\r\n     * @returns The old exception handler.\r\n     *\r\n     * #### Notes\r\n     * The exception handler is invoked when a message handler or a\r\n     * message hook throws an exception.\r\n     */\r\n    function setExceptionHandler(handler) {\r\n        var old = exceptionHandler;\r\n        exceptionHandler = handler;\r\n        return old;\r\n    }\r\n    MessageLoop.setExceptionHandler = setExceptionHandler;\r\n    /**\r\n     * The queue of posted message pairs.\r\n     */\r\n    var messageQueue = new collections_1.LinkedList();\r\n    /**\r\n     * A mapping of handler to array of installed message hooks.\r\n     */\r\n    var messageHooks = new WeakMap();\r\n    /**\r\n     * A set of message hook arrays which are pending cleanup.\r\n     */\r\n    var dirtySet = new Set();\r\n    /**\r\n     * The message loop exception handler.\r\n     */\r\n    var exceptionHandler = function (err) {\r\n        console.error(err);\r\n    };\r\n    /**\r\n     * The id of the pending loop task animation frame.\r\n     */\r\n    var loopTaskID = 0;\r\n    /**\r\n     * A guard flag to prevent flush recursion.\r\n     */\r\n    var flushGuard = false;\r\n    /**\r\n     * A function to schedule an event loop callback.\r\n     */\r\n    var schedule = (function () {\r\n        var ok = typeof requestAnimationFrame === 'function';\r\n        return ok ? requestAnimationFrame : setImmediate;\r\n    })();\r\n    /**\r\n     * A function to unschedule an event loop callback.\r\n     */\r\n    var unschedule = (function () {\r\n        var ok = typeof cancelAnimationFrame === 'function';\r\n        return ok ? cancelAnimationFrame : clearImmediate;\r\n    })();\r\n    /**\r\n     * Invoke a message hook with the specified handler and message.\r\n     *\r\n     * Returns the result of the hook, or `true` if the hook throws.\r\n     *\r\n     * Exceptions in the hook will be caught and logged.\r\n     */\r\n    function invokeHook(hook, handler, msg) {\r\n        var result = true;\r\n        try {\r\n            if (typeof hook === 'function') {\r\n                result = hook(handler, msg);\r\n            }\r\n            else {\r\n                result = hook.messageHook(handler, msg);\r\n            }\r\n        }\r\n        catch (err) {\r\n            exceptionHandler(err);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Invoke a message handler with the specified message.\r\n     *\r\n     * Exceptions in the handler will be caught and logged.\r\n     */\r\n    function invokeHandler(handler, msg) {\r\n        try {\r\n            handler.processMessage(msg);\r\n        }\r\n        catch (err) {\r\n            exceptionHandler(err);\r\n        }\r\n    }\r\n    /**\r\n     * Add a message to the end of the message queue.\r\n     *\r\n     * This will automatically schedule a run of the message loop.\r\n     */\r\n    function enqueueMessage(handler, msg) {\r\n        // Add the posted message to the queue.\r\n        messageQueue.addLast({ handler: handler, msg: msg });\r\n        // Bail if a loop task is already pending.\r\n        if (loopTaskID !== 0) {\r\n            return;\r\n        }\r\n        // Schedule a run of the message loop.\r\n        loopTaskID = schedule(runMessageLoop);\r\n    }\r\n    /**\r\n     * Run an iteration of the message loop.\r\n     *\r\n     * This will process all pending messages in the queue. If a message\r\n     * is added to the queue while the message loop is running, it will\r\n     * be processed on the next cycle of the loop.\r\n     */\r\n    function runMessageLoop() {\r\n        // Clear the task ID so the next loop can be scheduled.\r\n        loopTaskID = 0;\r\n        // If the message queue is empty, there is nothing else to do.\r\n        if (messageQueue.isEmpty) {\r\n            return;\r\n        }\r\n        // Add a sentinel value to the end of the queue. The queue will\r\n        // only be processed up to the sentinel. Messages posted during\r\n        // this cycle will execute on the next cycle.\r\n        var sentinel = { handler: null, msg: null };\r\n        messageQueue.addLast(sentinel);\r\n        // Enter the message loop.\r\n        while (true) {\r\n            // Remove the first posted message in the queue.\r\n            var posted = messageQueue.removeFirst();\r\n            // If the value is the sentinel, exit the loop.\r\n            if (posted === sentinel) {\r\n                return;\r\n            }\r\n            // Dispatch the message if it has not been cleared.\r\n            if (posted.handler && posted.msg) {\r\n                sendMessage(posted.handler, posted.msg);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Schedule a cleanup of a message hooks array.\r\n     *\r\n     * This will add the array to the dirty set and schedule a deferred\r\n     * cleanup of the array contents. On cleanup, any `null` hook will\r\n     * be removed from the array.\r\n     */\r\n    function scheduleCleanup(hooks) {\r\n        if (dirtySet.size === 0) {\r\n            schedule(cleanupDirtySet);\r\n        }\r\n        dirtySet.add(hooks);\r\n    }\r\n    /**\r\n     * Cleanup the message hook arrays in the dirty set.\r\n     *\r\n     * This function should only be invoked asynchronously, when the\r\n     * stack frame is guaranteed to not be on the path of user code.\r\n     */\r\n    function cleanupDirtySet() {\r\n        dirtySet.forEach(cleanupHooks);\r\n        dirtySet.clear();\r\n    }\r\n    /**\r\n     * Cleanup the dirty hooks in a message hooks array.\r\n     *\r\n     * This will remove any `null` hook from the array.\r\n     *\r\n     * This function should only be invoked asynchronously, when the\r\n     * stack frame is guaranteed to not be on the path of user code.\r\n     */\r\n    function cleanupHooks(hooks) {\r\n        algorithm_1.ArrayExt.removeAllWhere(hooks, isNull);\r\n    }\r\n    /**\r\n     * Test whether a value is `null`.\r\n     */\r\n    function isNull(value) {\r\n        return value === null;\r\n    }\r\n})(MessageLoop = exports.MessageLoop || (exports.MessageLoop = {}));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A class which attaches a value to an external object.\r\n *\r\n * #### Notes\r\n * Attached properties are used to extend the state of an object with\r\n * semantic data from an unrelated class. They also encapsulate value\r\n * creation, coercion, and notification.\r\n *\r\n * Because attached property values are stored in a hash table, which\r\n * in turn is stored in a WeakMap keyed on the owner object, there is\r\n * non-trivial storage overhead involved in their use. The pattern is\r\n * therefore best used for the storage of rare data.\r\n */\r\nvar AttachedProperty = (function () {\r\n    /**\r\n     * Construct a new attached property.\r\n     *\r\n     * @param options - The options for initializing the property.\r\n     */\r\n    function AttachedProperty(options) {\r\n        this._pid = Private.nextPID();\r\n        this.name = options.name;\r\n        this._create = options.create;\r\n        this._coerce = options.coerce || null;\r\n        this._compare = options.compare || null;\r\n        this._changed = options.changed || null;\r\n    }\r\n    /**\r\n     * Get the current value of the property for a given owner.\r\n     *\r\n     * @param owner - The property owner of interest.\r\n     *\r\n     * @returns The current value of the property.\r\n     *\r\n     * #### Notes\r\n     * If the value has not yet been set, the default value will be\r\n     * computed and assigned as the current value of the property.\r\n     */\r\n    AttachedProperty.prototype.get = function (owner) {\r\n        var value;\r\n        var map = Private.ensureMap(owner);\r\n        if (this._pid in map) {\r\n            value = map[this._pid];\r\n        }\r\n        else {\r\n            value = map[this._pid] = this._createValue(owner);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Set the current value of the property for a given owner.\r\n     *\r\n     * @param owner - The property owner of interest.\r\n     *\r\n     * @param value - The value for the property.\r\n     *\r\n     * #### Notes\r\n     * If the value has not yet been set, the default value will be\r\n     * computed and used as the previous value for the comparison.\r\n     */\r\n    AttachedProperty.prototype.set = function (owner, value) {\r\n        var oldValue;\r\n        var map = Private.ensureMap(owner);\r\n        if (this._pid in map) {\r\n            oldValue = map[this._pid];\r\n        }\r\n        else {\r\n            oldValue = map[this._pid] = this._createValue(owner);\r\n        }\r\n        var newValue = this._coerceValue(owner, value);\r\n        this._maybeNotify(owner, oldValue, map[this._pid] = newValue);\r\n    };\r\n    /**\r\n     * Explicitly coerce the current property value for a given owner.\r\n     *\r\n     * @param owner - The property owner of interest.\r\n     *\r\n     * #### Notes\r\n     * If the value has not yet been set, the default value will be\r\n     * computed and used as the previous value for the comparison.\r\n     */\r\n    AttachedProperty.prototype.coerce = function (owner) {\r\n        var oldValue;\r\n        var map = Private.ensureMap(owner);\r\n        if (this._pid in map) {\r\n            oldValue = map[this._pid];\r\n        }\r\n        else {\r\n            oldValue = map[this._pid] = this._createValue(owner);\r\n        }\r\n        var newValue = this._coerceValue(owner, oldValue);\r\n        this._maybeNotify(owner, oldValue, map[this._pid] = newValue);\r\n    };\r\n    /**\r\n     * Get or create the default value for the given owner.\r\n     */\r\n    AttachedProperty.prototype._createValue = function (owner) {\r\n        var create = this._create;\r\n        return create(owner);\r\n    };\r\n    /**\r\n     * Coerce the value for the given owner.\r\n     */\r\n    AttachedProperty.prototype._coerceValue = function (owner, value) {\r\n        var coerce = this._coerce;\r\n        return coerce ? coerce(owner, value) : value;\r\n    };\r\n    /**\r\n     * Compare the old value and new value for equality.\r\n     */\r\n    AttachedProperty.prototype._compareValue = function (oldValue, newValue) {\r\n        var compare = this._compare;\r\n        return compare ? compare(oldValue, newValue) : oldValue === newValue;\r\n    };\r\n    /**\r\n     * Run the change notification if the given values are different.\r\n     */\r\n    AttachedProperty.prototype._maybeNotify = function (owner, oldValue, newValue) {\r\n        var changed = this._changed;\r\n        if (changed && !this._compareValue(oldValue, newValue)) {\r\n            changed(owner, oldValue, newValue);\r\n        }\r\n    };\r\n    return AttachedProperty;\r\n}());\r\nexports.AttachedProperty = AttachedProperty;\r\n/**\r\n * The namespace for the `AttachedProperty` class statics.\r\n */\r\n(function (AttachedProperty) {\r\n    /**\r\n     * Clear the stored property data for the given owner.\r\n     *\r\n     * @param owner - The property owner of interest.\r\n     *\r\n     * #### Notes\r\n     * This will clear all property values for the owner, but it will\r\n     * **not** run the change notification for any of the properties.\r\n     */\r\n    function clearData(owner) {\r\n        Private.ownerData.delete(owner);\r\n    }\r\n    AttachedProperty.clearData = clearData;\r\n})(AttachedProperty = exports.AttachedProperty || (exports.AttachedProperty = {}));\r\nexports.AttachedProperty = AttachedProperty;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * A weak mapping of property owner to property map.\r\n     */\r\n    Private.ownerData = new WeakMap();\r\n    /**\r\n     * A function which computes successive unique property ids.\r\n     */\r\n    Private.nextPID = (function () {\r\n        var id = 0;\r\n        return function () {\r\n            var rand = Math.random();\r\n            var stem = (\"\" + rand).slice(2);\r\n            return \"pid-\" + stem + \"-\" + id++;\r\n        };\r\n    })();\r\n    /**\r\n     * Lookup the data map for the property owner.\r\n     *\r\n     * This will create the map if one does not already exist.\r\n     */\r\n    function ensureMap(owner) {\r\n        var map = Private.ownerData.get(owner);\r\n        if (map) {\r\n            return map;\r\n        }\r\n        map = Object.create(null);\r\n        Private.ownerData.set(owner, map);\r\n        return map;\r\n    }\r\n    Private.ensureMap = ensureMap;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\n/**\r\n * A concrete implementation of `ISignal`.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * import { ISignal, Signal } from '@phosphor/signaling';\r\n *\r\n * class SomeClass {\r\n *\r\n *   constructor(name: string) {\r\n *     this.name = name;\r\n *   }\r\n *\r\n *   readonly name: string;\r\n *\r\n *   get valueChanged: ISignal<this, number> {\r\n *     return this._valueChanged;\r\n *   }\r\n *\r\n *   get value(): number {\r\n *     return this._value;\r\n *   }\r\n *\r\n *   set value(value: number) {\r\n *     if (value === this._value) {\r\n *       return;\r\n *     }\r\n *     this._value = value;\r\n *     this._valueChanged.emit(value);\r\n *   }\r\n *\r\n *   private _value = 0;\r\n *   private _valueChanged = new Signal<this, number>(this);\r\n * }\r\n *\r\n * function logger(sender: SomeClass, value: number): void {\r\n *   console.log(sender.name, value);\r\n * }\r\n *\r\n * let m1 = new SomeClass('foo');\r\n * let m2 = new SomeClass('bar');\r\n *\r\n * m1.valueChanged.connect(logger);\r\n * m2.valueChanged.connect(logger);\r\n *\r\n * m1.value = 42;  // logs: foo 42\r\n * m2.value = 17;  // logs: bar 17\r\n * ```\r\n */\r\nvar Signal = (function () {\r\n    /**\r\n     * Construct a new signal.\r\n     *\r\n     * @param sender - The sender which owns the signal.\r\n     */\r\n    function Signal(sender) {\r\n        this.sender = sender;\r\n    }\r\n    /**\r\n     * Connect a slot to the signal.\r\n     *\r\n     * @param slot - The slot to invoke when the signal is emitted.\r\n     *\r\n     * @param thisArg - The `this` context for the slot. If provided,\r\n     *   this must be a non-primitive object.\r\n     *\r\n     * @returns `true` if the connection succeeds, `false` otherwise.\r\n     */\r\n    Signal.prototype.connect = function (slot, thisArg) {\r\n        return Private.connect(this, slot, thisArg);\r\n    };\r\n    /**\r\n     * Disconnect a slot from the signal.\r\n     *\r\n     * @param slot - The slot to disconnect from the signal.\r\n     *\r\n     * @param thisArg - The `this` context for the slot. If provided,\r\n     *   this must be a non-primitive object.\r\n     *\r\n     * @returns `true` if the connection is removed, `false` otherwise.\r\n     */\r\n    Signal.prototype.disconnect = function (slot, thisArg) {\r\n        return Private.disconnect(this, slot, thisArg);\r\n    };\r\n    /**\r\n     * Emit the signal and invoke the connected slots.\r\n     *\r\n     * @param args - The args to pass to the connected slots.\r\n     *\r\n     * #### Notes\r\n     * Slots are invoked synchronously in connection order.\r\n     *\r\n     * Exceptions thrown by connected slots will be caught and logged.\r\n     */\r\n    Signal.prototype.emit = function (args) {\r\n        Private.emit(this, args);\r\n    };\r\n    return Signal;\r\n}());\r\nexports.Signal = Signal;\r\n/**\r\n * The namespace for the `Signal` class statics.\r\n */\r\n(function (Signal) {\r\n    /**\r\n     * Remove all connections between a sender and receiver.\r\n     *\r\n     * @param sender - The sender object of interest.\r\n     *\r\n     * @param receiver - The receiver object of interest.\r\n     *\r\n     * #### Notes\r\n     * If a `thisArg` is provided when connecting a signal, that object\r\n     * is considered the receiver. Otherwise, the `slot` is considered\r\n     * the receiver.\r\n     */\r\n    function disconnectBetween(sender, receiver) {\r\n        Private.disconnectBetween(sender, receiver);\r\n    }\r\n    Signal.disconnectBetween = disconnectBetween;\r\n    /**\r\n     * Remove all connections where the given object is the sender.\r\n     *\r\n     * @param sender - The sender object of interest.\r\n     */\r\n    function disconnectSender(sender) {\r\n        Private.disconnectSender(sender);\r\n    }\r\n    Signal.disconnectSender = disconnectSender;\r\n    /**\r\n     * Remove all connections where the given object is the receiver.\r\n     *\r\n     * @param receiver - The receiver object of interest.\r\n     *\r\n     * #### Notes\r\n     * If a `thisArg` is provided when connecting a signal, that object\r\n     * is considered the receiver. Otherwise, the `slot` is considered\r\n     * the receiver.\r\n     */\r\n    function disconnectReceiver(receiver) {\r\n        Private.disconnectReceiver(receiver);\r\n    }\r\n    Signal.disconnectReceiver = disconnectReceiver;\r\n    /**\r\n     * Remove all connections where an object is the sender or receiver.\r\n     *\r\n     * @param object - The object of interest.\r\n     *\r\n     * #### Notes\r\n     * If a `thisArg` is provided when connecting a signal, that object\r\n     * is considered the receiver. Otherwise, the `slot` is considered\r\n     * the receiver.\r\n     */\r\n    function disconnectAll(object) {\r\n        Private.disconnectAll(object);\r\n    }\r\n    Signal.disconnectAll = disconnectAll;\r\n    /**\r\n     * Clear all signal data associated with the given object.\r\n     *\r\n     * @param object - The object for which the data should be cleared.\r\n     *\r\n     * #### Notes\r\n     * This removes all signal connections and any other signal data\r\n     * associated with the object.\r\n     */\r\n    function clearData(object) {\r\n        Private.disconnectAll(object);\r\n    }\r\n    Signal.clearData = clearData;\r\n    /**\r\n     * Get the signal exception handler.\r\n     *\r\n     * @returns The current exception handler.\r\n     *\r\n     * #### Notes\r\n     * The default exception handler is `console.error`.\r\n     */\r\n    function getExceptionHandler() {\r\n        return Private.exceptionHandler;\r\n    }\r\n    Signal.getExceptionHandler = getExceptionHandler;\r\n    /**\r\n     * Set the signal exception handler.\r\n     *\r\n     * @param handler - The function to use as the exception handler.\r\n     *\r\n     * @returns The old exception handler.\r\n     *\r\n     * #### Notes\r\n     * The exception handler is invoked when a slot throws an exception.\r\n     */\r\n    function setExceptionHandler(handler) {\r\n        var old = Private.exceptionHandler;\r\n        Private.exceptionHandler = handler;\r\n        return old;\r\n    }\r\n    Signal.setExceptionHandler = setExceptionHandler;\r\n})(Signal = exports.Signal || (exports.Signal = {}));\r\nexports.Signal = Signal;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The signal exception handler function.\r\n     */\r\n    Private.exceptionHandler = function (err) {\r\n        console.error(err);\r\n    };\r\n    /**\r\n     * Connect a slot to a signal.\r\n     *\r\n     * @param signal - The signal of interest.\r\n     *\r\n     * @param slot - The slot to invoke when the signal is emitted.\r\n     *\r\n     * @param thisArg - The `this` context for the slot. If provided,\r\n     *   this must be a non-primitive object.\r\n     *\r\n     * @returns `true` if the connection succeeds, `false` otherwise.\r\n     */\r\n    function connect(signal, slot, thisArg) {\r\n        // Coerce a `null` `thisArg` to `undefined`.\r\n        thisArg = thisArg || undefined;\r\n        // Ensure the sender's array of receivers is created.\r\n        var receivers = receiversForSender.get(signal.sender);\r\n        if (!receivers) {\r\n            receivers = [];\r\n            receiversForSender.set(signal.sender, receivers);\r\n        }\r\n        // Bail if a matching connection already exists.\r\n        if (findConnection(receivers, signal, slot, thisArg)) {\r\n            return false;\r\n        }\r\n        // Choose the best object for the receiver.\r\n        var receiver = thisArg || slot;\r\n        // Ensure the receiver's array of senders is created.\r\n        var senders = sendersForReceiver.get(receiver);\r\n        if (!senders) {\r\n            senders = [];\r\n            sendersForReceiver.set(receiver, senders);\r\n        }\r\n        // Create a new connection and add it to the end of each array.\r\n        var connection = { signal: signal, slot: slot, thisArg: thisArg };\r\n        receivers.push(connection);\r\n        senders.push(connection);\r\n        // Indicate a successful connection.\r\n        return true;\r\n    }\r\n    Private.connect = connect;\r\n    /**\r\n     * Disconnect a slot from a signal.\r\n     *\r\n     * @param signal - The signal of interest.\r\n     *\r\n     * @param slot - The slot to disconnect from the signal.\r\n     *\r\n     * @param thisArg - The `this` context for the slot. If provided,\r\n     *   this must be a non-primitive object.\r\n     *\r\n     * @returns `true` if the connection is removed, `false` otherwise.\r\n     */\r\n    function disconnect(signal, slot, thisArg) {\r\n        // Coerce a `null` `thisArg` to `undefined`.\r\n        thisArg = thisArg || undefined;\r\n        // Lookup the list of receivers, and bail if none exist.\r\n        var receivers = receiversForSender.get(signal.sender);\r\n        if (!receivers || receivers.length === 0) {\r\n            return false;\r\n        }\r\n        // Bail if no matching connection exits.\r\n        var connection = findConnection(receivers, signal, slot, thisArg);\r\n        if (!connection) {\r\n            return false;\r\n        }\r\n        // Choose the best object for the receiver.\r\n        var receiver = thisArg || slot;\r\n        // Lookup the array of senders, which is now known to exist.\r\n        var senders = sendersForReceiver.get(receiver);\r\n        // Clear the connection and schedule cleanup of the arrays.\r\n        connection.signal = null;\r\n        scheduleCleanup(receivers);\r\n        scheduleCleanup(senders);\r\n        // Indicate a successful disconnection.\r\n        return true;\r\n    }\r\n    Private.disconnect = disconnect;\r\n    /**\r\n     * Remove all connections between a sender and receiver.\r\n     *\r\n     * @param sender - The sender object of interest.\r\n     *\r\n     * @param receiver - The receiver object of interest.\r\n     */\r\n    function disconnectBetween(sender, receiver) {\r\n        // If there are no receivers, there is nothing to do.\r\n        var receivers = receiversForSender.get(sender);\r\n        if (!receivers || receivers.length === 0) {\r\n            return;\r\n        }\r\n        // If there are no senders, there is nothing to do.\r\n        var senders = sendersForReceiver.get(receiver);\r\n        if (!senders || senders.length === 0) {\r\n            return;\r\n        }\r\n        // Clear each connection between the sender and receiver.\r\n        algorithm_1.each(senders, function (connection) {\r\n            // Skip connections which have already been cleared.\r\n            if (!connection.signal) {\r\n                return;\r\n            }\r\n            // Clear the connection if it matches the sender.\r\n            if (connection.signal.sender === sender) {\r\n                connection.signal = null;\r\n            }\r\n        });\r\n        // Schedule a cleanup of the senders and receivers.\r\n        scheduleCleanup(receivers);\r\n        scheduleCleanup(senders);\r\n    }\r\n    Private.disconnectBetween = disconnectBetween;\r\n    /**\r\n     * Remove all connections where the given object is the sender.\r\n     *\r\n     * @param sender - The sender object of interest.\r\n     */\r\n    function disconnectSender(sender) {\r\n        // If there are no receivers, there is nothing to do.\r\n        var receivers = receiversForSender.get(sender);\r\n        if (!receivers || receivers.length === 0) {\r\n            return;\r\n        }\r\n        // Clear each receiver connection.\r\n        algorithm_1.each(receivers, function (connection) {\r\n            // Skip connections which have already been cleared.\r\n            if (!connection.signal) {\r\n                return;\r\n            }\r\n            // Choose the best object for the receiver.\r\n            var receiver = connection.thisArg || connection.slot;\r\n            // Clear the connection.\r\n            connection.signal = null;\r\n            // Cleanup the array of senders, which is now known to exist.\r\n            scheduleCleanup(sendersForReceiver.get(receiver));\r\n        });\r\n        // Schedule a cleanup of the receivers.\r\n        scheduleCleanup(receivers);\r\n    }\r\n    Private.disconnectSender = disconnectSender;\r\n    /**\r\n     * Remove all connections where the given object is the receiver.\r\n     *\r\n     * @param receiver - The receiver object of interest.\r\n     */\r\n    function disconnectReceiver(receiver) {\r\n        // If there are no senders, there is nothing to do.\r\n        var senders = sendersForReceiver.get(receiver);\r\n        if (!senders || senders.length === 0) {\r\n            return;\r\n        }\r\n        // Clear each sender connection.\r\n        algorithm_1.each(senders, function (connection) {\r\n            // Skip connections which have already been cleared.\r\n            if (!connection.signal) {\r\n                return;\r\n            }\r\n            // Lookup the sender for the connection.\r\n            var sender = connection.signal.sender;\r\n            // Clear the connection.\r\n            connection.signal = null;\r\n            // Cleanup the array of receivers, which is now known to exist.\r\n            scheduleCleanup(receiversForSender.get(sender));\r\n        });\r\n        // Schedule a cleanup of the list of senders.\r\n        scheduleCleanup(senders);\r\n    }\r\n    Private.disconnectReceiver = disconnectReceiver;\r\n    /**\r\n     * Remove all connections where an object is the sender or receiver.\r\n     *\r\n     * @param object - The object of interest.\r\n     */\r\n    function disconnectAll(object) {\r\n        // Clear and cleanup any receiver connections.\r\n        var receivers = receiversForSender.get(object);\r\n        if (receivers && receivers.length > 0) {\r\n            algorithm_1.each(receivers, function (connection) { connection.signal = null; });\r\n            scheduleCleanup(receivers);\r\n        }\r\n        // Clear and cleanup any sender connections.\r\n        var senders = sendersForReceiver.get(object);\r\n        if (senders && senders.length > 0) {\r\n            algorithm_1.each(senders, function (connection) { connection.signal = null; });\r\n            scheduleCleanup(senders);\r\n        }\r\n    }\r\n    Private.disconnectAll = disconnectAll;\r\n    /**\r\n     * Emit a signal and invoke its connected slots.\r\n     *\r\n     * @param signal - The signal of interest.\r\n     *\r\n     * @param args - The args to pass to the connected slots.\r\n     *\r\n     * #### Notes\r\n     * Slots are invoked synchronously in connection order.\r\n     *\r\n     * Exceptions thrown by connected slots will be caught and logged.\r\n     */\r\n    function emit(signal, args) {\r\n        // If there are no receivers, there is nothing to do.\r\n        var receivers = receiversForSender.get(signal.sender);\r\n        if (!receivers || receivers.length === 0) {\r\n            return;\r\n        }\r\n        // Invoke the slots for connections with a matching signal.\r\n        // Any connections added during emission are not invoked.\r\n        for (var i = 0, n = receivers.length; i < n; ++i) {\r\n            var connection = receivers[i];\r\n            if (connection.signal === signal) {\r\n                invokeSlot(connection, args);\r\n            }\r\n        }\r\n    }\r\n    Private.emit = emit;\r\n    /**\r\n     * A weak mapping of sender to array of receiver connections.\r\n     */\r\n    var receiversForSender = new WeakMap();\r\n    /**\r\n     * A weak mapping of receiver to array of sender connections.\r\n     */\r\n    var sendersForReceiver = new WeakMap();\r\n    /**\r\n     * A set of connection arrays which are pending cleanup.\r\n     */\r\n    var dirtySet = new Set();\r\n    /**\r\n     * A function to schedule an event loop callback.\r\n     */\r\n    var schedule = (function () {\r\n        var ok = typeof requestAnimationFrame === 'function';\r\n        return ok ? requestAnimationFrame : setImmediate;\r\n    })();\r\n    /**\r\n     * Find a connection which matches the given parameters.\r\n     */\r\n    function findConnection(connections, signal, slot, thisArg) {\r\n        return algorithm_1.find(connections, function (connection) { return (connection.signal === signal &&\r\n            connection.slot === slot &&\r\n            connection.thisArg === thisArg); });\r\n    }\r\n    /**\r\n     * Invoke a slot with the given parameters.\r\n     *\r\n     * The connection is assumed to be valid.\r\n     *\r\n     * Exceptions in the slot will be caught and logged.\r\n     */\r\n    function invokeSlot(connection, args) {\r\n        var signal = connection.signal, slot = connection.slot, thisArg = connection.thisArg;\r\n        try {\r\n            slot.call(thisArg, signal.sender, args);\r\n        }\r\n        catch (err) {\r\n            Private.exceptionHandler(err);\r\n        }\r\n    }\r\n    /**\r\n     * Schedule a cleanup of a connection array.\r\n     *\r\n     * This will add the array to the dirty set and schedule a deferred\r\n     * cleanup of the array contents. On cleanup, any connection with a\r\n     * `null` signal will be removed from the array.\r\n     */\r\n    function scheduleCleanup(array) {\r\n        if (dirtySet.size === 0) {\r\n            schedule(cleanupDirtySet);\r\n        }\r\n        dirtySet.add(array);\r\n    }\r\n    /**\r\n     * Cleanup the connection lists in the dirty set.\r\n     *\r\n     * This function should only be invoked asynchronously, when the\r\n     * stack frame is guaranteed to not be on the path of user code.\r\n     */\r\n    function cleanupDirtySet() {\r\n        dirtySet.forEach(cleanupConnections);\r\n        dirtySet.clear();\r\n    }\r\n    /**\r\n     * Cleanup the dirty connections in a connections array.\r\n     *\r\n     * This will remove any connection with a `null` signal.\r\n     *\r\n     * This function should only be invoked asynchronously, when the\r\n     * stack frame is guaranteed to not be on the path of user code.\r\n     */\r\n    function cleanupConnections(connections) {\r\n        algorithm_1.ArrayExt.removeAllWhere(connections, isDeadConnection);\r\n    }\r\n    /**\r\n     * Test whether a connection is dead.\r\n     *\r\n     * A dead connection has a `null` signal.\r\n     */\r\n    function isDeadConnection(connection) {\r\n        return connection.signal === null;\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\n/**\r\n * A virtual node which represents plain text content.\r\n *\r\n * #### Notes\r\n * User code will not typically create a `VirtualText` node directly.\r\n * Instead, the `h()` function will be used to create an element tree.\r\n */\r\nvar VirtualText = (function () {\r\n    /**\r\n     * Construct a new virtual text node.\r\n     *\r\n     * @param content - The text content for the node.\r\n     */\r\n    function VirtualText(content) {\r\n        /**\r\n         * The type of the node.\r\n         *\r\n         * This value can be used as a type guard for discriminating the\r\n         * `VirtualNode` union type.\r\n         */\r\n        this.type = 'text';\r\n        this.content = content;\r\n    }\r\n    return VirtualText;\r\n}());\r\nexports.VirtualText = VirtualText;\r\n/**\r\n * A virtual node which represents an HTML element.\r\n *\r\n * #### Notes\r\n * User code will not typically create a `VirtualElement` node directly.\r\n * Instead, the `h()` function will be used to create an element tree.\r\n */\r\nvar VirtualElement = (function () {\r\n    /**\r\n     * Construct a new virtual element node.\r\n     *\r\n     * @param tag - The element tag name.\r\n     *\r\n     * @param attrs - The element attributes.\r\n     *\r\n     * @param children - The element children.\r\n     */\r\n    function VirtualElement(tag, attrs, children) {\r\n        /**\r\n         * The type of the node.\r\n         *\r\n         * This value can be used as a type guard for discriminating the\r\n         * `VirtualNode` union type.\r\n         */\r\n        this.type = 'element';\r\n        this.tag = tag;\r\n        this.attrs = attrs;\r\n        this.children = children;\r\n    }\r\n    return VirtualElement;\r\n}());\r\nexports.VirtualElement = VirtualElement;\r\nfunction h(tag) {\r\n    var attrs = {};\r\n    var children = [];\r\n    for (var i = 1, n = arguments.length; i < n; ++i) {\r\n        var arg = arguments[i];\r\n        if (typeof arg === 'string') {\r\n            children.push(new VirtualText(arg));\r\n        }\r\n        else if (arg instanceof VirtualText) {\r\n            children.push(arg);\r\n        }\r\n        else if (arg instanceof VirtualElement) {\r\n            children.push(arg);\r\n        }\r\n        else if (arg instanceof Array) {\r\n            extend(children, arg);\r\n        }\r\n        else if (i === 1 && arg && typeof arg === 'object') {\r\n            attrs = arg;\r\n        }\r\n    }\r\n    return new VirtualElement(tag, attrs, children);\r\n    function extend(array, values) {\r\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\r\n            var child = values_1[_i];\r\n            if (typeof child === 'string') {\r\n                array.push(new VirtualText(child));\r\n            }\r\n            else if (child instanceof VirtualText) {\r\n                array.push(child);\r\n            }\r\n            else if (child instanceof VirtualElement) {\r\n                array.push(child);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.h = h;\r\n/**\r\n * The namespace for the `h` function statics.\r\n */\r\n(function (h) {\r\n    h.a = h.bind(undefined, 'a');\r\n    h.abbr = h.bind(undefined, 'abbr');\r\n    h.address = h.bind(undefined, 'address');\r\n    h.area = h.bind(undefined, 'area');\r\n    h.article = h.bind(undefined, 'article');\r\n    h.aside = h.bind(undefined, 'aside');\r\n    h.audio = h.bind(undefined, 'audio');\r\n    h.b = h.bind(undefined, 'b');\r\n    h.bdi = h.bind(undefined, 'bdi');\r\n    h.bdo = h.bind(undefined, 'bdo');\r\n    h.blockquote = h.bind(undefined, 'blockquote');\r\n    h.br = h.bind(undefined, 'br');\r\n    h.button = h.bind(undefined, 'button');\r\n    h.canvas = h.bind(undefined, 'canvas');\r\n    h.caption = h.bind(undefined, 'caption');\r\n    h.cite = h.bind(undefined, 'cite');\r\n    h.code = h.bind(undefined, 'code');\r\n    h.col = h.bind(undefined, 'col');\r\n    h.colgroup = h.bind(undefined, 'colgroup');\r\n    h.data = h.bind(undefined, 'data');\r\n    h.datalist = h.bind(undefined, 'datalist');\r\n    h.dd = h.bind(undefined, 'dd');\r\n    h.del = h.bind(undefined, 'del');\r\n    h.dfn = h.bind(undefined, 'dfn');\r\n    h.div = h.bind(undefined, 'div');\r\n    h.dl = h.bind(undefined, 'dl');\r\n    h.dt = h.bind(undefined, 'dt');\r\n    h.em = h.bind(undefined, 'em');\r\n    h.embed = h.bind(undefined, 'embed');\r\n    h.fieldset = h.bind(undefined, 'fieldset');\r\n    h.figcaption = h.bind(undefined, 'figcaption');\r\n    h.figure = h.bind(undefined, 'figure');\r\n    h.footer = h.bind(undefined, 'footer');\r\n    h.form = h.bind(undefined, 'form');\r\n    h.h1 = h.bind(undefined, 'h1');\r\n    h.h2 = h.bind(undefined, 'h2');\r\n    h.h3 = h.bind(undefined, 'h3');\r\n    h.h4 = h.bind(undefined, 'h4');\r\n    h.h5 = h.bind(undefined, 'h5');\r\n    h.h6 = h.bind(undefined, 'h6');\r\n    h.header = h.bind(undefined, 'header');\r\n    h.hr = h.bind(undefined, 'hr');\r\n    h.i = h.bind(undefined, 'i');\r\n    h.iframe = h.bind(undefined, 'iframe');\r\n    h.img = h.bind(undefined, 'img');\r\n    h.input = h.bind(undefined, 'input');\r\n    h.ins = h.bind(undefined, 'ins');\r\n    h.kbd = h.bind(undefined, 'kbd');\r\n    h.label = h.bind(undefined, 'label');\r\n    h.legend = h.bind(undefined, 'legend');\r\n    h.li = h.bind(undefined, 'li');\r\n    h.main = h.bind(undefined, 'main');\r\n    h.map = h.bind(undefined, 'map');\r\n    h.mark = h.bind(undefined, 'mark');\r\n    h.meter = h.bind(undefined, 'meter');\r\n    h.nav = h.bind(undefined, 'nav');\r\n    h.noscript = h.bind(undefined, 'noscript');\r\n    h.object = h.bind(undefined, 'object');\r\n    h.ol = h.bind(undefined, 'ol');\r\n    h.optgroup = h.bind(undefined, 'optgroup');\r\n    h.option = h.bind(undefined, 'option');\r\n    h.output = h.bind(undefined, 'output');\r\n    h.p = h.bind(undefined, 'p');\r\n    h.param = h.bind(undefined, 'param');\r\n    h.pre = h.bind(undefined, 'pre');\r\n    h.progress = h.bind(undefined, 'progress');\r\n    h.q = h.bind(undefined, 'q');\r\n    h.rp = h.bind(undefined, 'rp');\r\n    h.rt = h.bind(undefined, 'rt');\r\n    h.ruby = h.bind(undefined, 'ruby');\r\n    h.s = h.bind(undefined, 's');\r\n    h.samp = h.bind(undefined, 'samp');\r\n    h.section = h.bind(undefined, 'section');\r\n    h.select = h.bind(undefined, 'select');\r\n    h.small = h.bind(undefined, 'small');\r\n    h.source = h.bind(undefined, 'source');\r\n    h.span = h.bind(undefined, 'span');\r\n    h.strong = h.bind(undefined, 'strong');\r\n    h.sub = h.bind(undefined, 'sub');\r\n    h.summary = h.bind(undefined, 'summary');\r\n    h.sup = h.bind(undefined, 'sup');\r\n    h.table = h.bind(undefined, 'table');\r\n    h.tbody = h.bind(undefined, 'tbody');\r\n    h.td = h.bind(undefined, 'td');\r\n    h.textarea = h.bind(undefined, 'textarea');\r\n    h.tfoot = h.bind(undefined, 'tfoot');\r\n    h.th = h.bind(undefined, 'th');\r\n    h.thead = h.bind(undefined, 'thead');\r\n    h.time = h.bind(undefined, 'time');\r\n    h.title = h.bind(undefined, 'title');\r\n    h.tr = h.bind(undefined, 'tr');\r\n    h.track = h.bind(undefined, 'track');\r\n    h.u = h.bind(undefined, 'u');\r\n    h.ul = h.bind(undefined, 'ul');\r\n    h.var_ = h.bind(undefined, 'var');\r\n    h.video = h.bind(undefined, 'video');\r\n    h.wbr = h.bind(undefined, 'wbr');\r\n})(h = exports.h || (exports.h = {}));\r\n/**\r\n * The namespace for the virtual DOM rendering functions.\r\n */\r\nvar VirtualDOM;\r\n(function (VirtualDOM) {\r\n    /**\r\n     * Create a real DOM element from a virtual element node.\r\n     *\r\n     * @param node - The virtual element node to realize.\r\n     *\r\n     * @returns A new DOM element for the given virtual element node.\r\n     *\r\n     * #### Notes\r\n     * This creates a brand new *real* DOM element with a structure which\r\n     * matches the given virtual DOM node.\r\n     *\r\n     * If virtual diffing is desired, use the `render` function instead.\r\n     */\r\n    function realize(node) {\r\n        return Private.createDOMNode(node);\r\n    }\r\n    VirtualDOM.realize = realize;\r\n    /**\r\n     * Render virtual DOM content into a host element.\r\n     *\r\n     * @param content - The virtual DOM content to render.\r\n     *\r\n     * @param host - The host element for the rendered content.\r\n     *\r\n     * #### Notes\r\n     * This renders the delta from the previous rendering. It assumes that\r\n     * the content of the host element is not manipulated by external code.\r\n     *\r\n     * Providing `null` content will clear the rendering.\r\n     *\r\n     * Externally modifying the provided content or the host element will\r\n     * result in undefined rendering behavior.\r\n     */\r\n    function render(content, host) {\r\n        var oldContent = Private.hostMap.get(host) || [];\r\n        var newContent = Private.asContentArray(content);\r\n        Private.hostMap.set(host, newContent);\r\n        Private.updateContent(host, oldContent, newContent);\r\n    }\r\n    VirtualDOM.render = render;\r\n})(VirtualDOM = exports.VirtualDOM || (exports.VirtualDOM = {}));\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * A weak mapping of host element to virtual DOM content.\r\n     */\r\n    Private.hostMap = new WeakMap();\r\n    /**\r\n     * Cast a content value to a content array.\r\n     */\r\n    function asContentArray(value) {\r\n        if (!value) {\r\n            return [];\r\n        }\r\n        if (value instanceof Array) {\r\n            return value;\r\n        }\r\n        return [value];\r\n    }\r\n    Private.asContentArray = asContentArray;\r\n    function createDOMNode(node) {\r\n        // Create a text node for a virtual text node.\r\n        if (node.type === 'text') {\r\n            return document.createTextNode(node.content);\r\n        }\r\n        // Create the HTML element with the specified tag.\r\n        var element = document.createElement(node.tag);\r\n        // Add the attributes for the new element.\r\n        addAttrs(element, node.attrs);\r\n        // Recursively populate the element with child content.\r\n        for (var i = 0, n = node.children.length; i < n; ++i) {\r\n            element.appendChild(createDOMNode(node.children[i]));\r\n        }\r\n        // Return the populated element.\r\n        return element;\r\n    }\r\n    Private.createDOMNode = createDOMNode;\r\n    /**\r\n     * Update a host element with the delta of the virtual content.\r\n     *\r\n     * This is the core \"diff\" algorithm. There is no explicit \"patch\"\r\n     * phase. The host is patched at each step as the diff progresses.\r\n     */\r\n    function updateContent(host, oldContent, newContent) {\r\n        // Bail early if the content is identical.\r\n        if (oldContent === newContent) {\r\n            return;\r\n        }\r\n        // Collect the old keyed elems into a mapping.\r\n        var oldKeyed = collectKeys(host, oldContent);\r\n        // Create a copy of the old content which can be modified in-place.\r\n        var oldCopy = oldContent.slice();\r\n        // Update the host with the new content. The diff always proceeds\r\n        // forward and never modifies a previously visited index. The old\r\n        // copy array is modified in-place to reflect the changes made to\r\n        // the host children. This causes the stale nodes to be pushed to\r\n        // the end of the host node and removed at the end of the loop.\r\n        var currElem = host.firstChild;\r\n        var newCount = newContent.length;\r\n        for (var i = 0; i < newCount; ++i) {\r\n            // If the old content is exhausted, create a new node.\r\n            if (i >= oldCopy.length) {\r\n                host.appendChild(createDOMNode(newContent[i]));\r\n                continue;\r\n            }\r\n            // Lookup the old and new virtual nodes.\r\n            var oldVNode = oldCopy[i];\r\n            var newVNode = newContent[i];\r\n            // If both elements are identical, there is nothing to do.\r\n            if (oldVNode === newVNode) {\r\n                currElem = currElem.nextSibling;\r\n                continue;\r\n            }\r\n            // Handle the simplest case of in-place text update first.\r\n            if (oldVNode.type === 'text' && newVNode.type === 'text') {\r\n                currElem.textContent = newVNode.content;\r\n                currElem = currElem.nextSibling;\r\n                continue;\r\n            }\r\n            // If the old or new node is a text node, the other node is now\r\n            // known to be an element node, so create and insert a new node.\r\n            if (oldVNode.type === 'text' || newVNode.type === 'text') {\r\n                algorithm_1.ArrayExt.insert(oldCopy, i, newVNode);\r\n                host.insertBefore(createDOMNode(newVNode), currElem);\r\n                continue;\r\n            }\r\n            // At this point, both nodes are known to be element nodes.\r\n            // If the new elem is keyed, move an old keyed elem to the proper\r\n            // location before proceeding with the diff. The search can start\r\n            // at the current index, since the unmatched old keyed elems are\r\n            // pushed forward in the old copy array.\r\n            var newKey = newVNode.attrs.key;\r\n            if (newKey && newKey in oldKeyed) {\r\n                var pair = oldKeyed[newKey];\r\n                if (pair.vNode !== oldVNode) {\r\n                    algorithm_1.ArrayExt.move(oldCopy, oldCopy.indexOf(pair.vNode, i + 1), i);\r\n                    host.insertBefore(pair.element, currElem);\r\n                    oldVNode = pair.vNode;\r\n                    currElem = pair.element;\r\n                }\r\n            }\r\n            // If both elements are identical, there is nothing to do.\r\n            if (oldVNode === newVNode) {\r\n                currElem = currElem.nextSibling;\r\n                continue;\r\n            }\r\n            // If the old elem is keyed and does not match the new elem key,\r\n            // create a new node. This is necessary since the old keyed elem\r\n            // may be matched at a later point in the diff.\r\n            var oldKey = oldVNode.attrs.key;\r\n            if (oldKey && oldKey !== newKey) {\r\n                algorithm_1.ArrayExt.insert(oldCopy, i, newVNode);\r\n                host.insertBefore(createDOMNode(newVNode), currElem);\r\n                continue;\r\n            }\r\n            // If the tags are different, create a new node.\r\n            if (oldVNode.tag !== newVNode.tag) {\r\n                algorithm_1.ArrayExt.insert(oldCopy, i, newVNode);\r\n                host.insertBefore(createDOMNode(newVNode), currElem);\r\n                continue;\r\n            }\r\n            // At this point, the element can be updated in-place.\r\n            // Update the element attributes.\r\n            updateAttrs(currElem, oldVNode.attrs, newVNode.attrs);\r\n            // Update the element content.\r\n            updateContent(currElem, oldVNode.children, newVNode.children);\r\n            // Step to the next sibling element.\r\n            currElem = currElem.nextSibling;\r\n        }\r\n        // Dispose of the old nodes pushed to the end of the host.\r\n        for (var i = oldCopy.length - newCount; i > 0; --i) {\r\n            host.removeChild(host.lastChild);\r\n        }\r\n    }\r\n    Private.updateContent = updateContent;\r\n    /**\r\n     * A set of special-cased attribute names.\r\n     */\r\n    var specialAttrs = {\r\n        'key': true,\r\n        'className': true,\r\n        'htmlFor': true,\r\n        'dataset': true,\r\n        'style': true,\r\n    };\r\n    /**\r\n     * Add element attributes to a newly created HTML element.\r\n     */\r\n    function addAttrs(element, attrs) {\r\n        // Add the inline event listeners and node attributes.\r\n        for (var name_1 in attrs) {\r\n            if (name_1 in specialAttrs) {\r\n                continue;\r\n            }\r\n            if (name_1.substr(0, 2) === 'on') {\r\n                element[name_1] = attrs[name_1];\r\n            }\r\n            else {\r\n                element.setAttribute(name_1, attrs[name_1]);\r\n            }\r\n        }\r\n        // Add the element `class` attribute.\r\n        if (attrs.className !== undefined) {\r\n            element.setAttribute('class', attrs.className);\r\n        }\r\n        // Add the element `for` attribute.\r\n        if (attrs.htmlFor !== undefined) {\r\n            element.setAttribute('for', attrs.htmlFor);\r\n        }\r\n        // Add the dataset values.\r\n        if (attrs.dataset) {\r\n            addDataset(element, attrs.dataset);\r\n        }\r\n        // Add the inline styles.\r\n        if (attrs.style) {\r\n            addStyle(element, attrs.style);\r\n        }\r\n    }\r\n    /**\r\n     * Update the element attributes of an HTML element.\r\n     */\r\n    function updateAttrs(element, oldAttrs, newAttrs) {\r\n        // Do nothing if the attrs are the same object.\r\n        if (oldAttrs === newAttrs) {\r\n            return;\r\n        }\r\n        // Setup the strongly typed loop variable.\r\n        var name;\r\n        // Remove attributes and listeners which no longer exist.\r\n        for (name in oldAttrs) {\r\n            if (name in specialAttrs || name in newAttrs) {\r\n                continue;\r\n            }\r\n            if (name.substr(0, 2) === 'on') {\r\n                element[name] = null;\r\n            }\r\n            else {\r\n                element.removeAttribute(name);\r\n            }\r\n        }\r\n        // Add and update new and existing attributes and listeners.\r\n        for (name in newAttrs) {\r\n            if (name in specialAttrs || oldAttrs[name] === newAttrs[name]) {\r\n                continue;\r\n            }\r\n            if (name.substr(0, 2) === 'on') {\r\n                element[name] = newAttrs[name];\r\n            }\r\n            else {\r\n                element.setAttribute(name, newAttrs[name]);\r\n            }\r\n        }\r\n        // Update the element `class` attribute.\r\n        if (oldAttrs.className !== newAttrs.className) {\r\n            if (newAttrs.className !== undefined) {\r\n                element.setAttribute('class', newAttrs.className);\r\n            }\r\n            else {\r\n                element.removeAttribute('class');\r\n            }\r\n        }\r\n        // Add the element `for` attribute.\r\n        if (oldAttrs.htmlFor !== newAttrs.htmlFor) {\r\n            if (newAttrs.htmlFor !== undefined) {\r\n                element.setAttribute('for', newAttrs.htmlFor);\r\n            }\r\n            else {\r\n                element.removeAttribute('for');\r\n            }\r\n        }\r\n        // Update the dataset values.\r\n        if (oldAttrs.dataset !== newAttrs.dataset) {\r\n            updateDataset(element, oldAttrs.dataset || {}, newAttrs.dataset || {});\r\n        }\r\n        // Update the inline styles.\r\n        if (oldAttrs.style !== newAttrs.style) {\r\n            updateStyle(element, oldAttrs.style || {}, newAttrs.style || {});\r\n        }\r\n    }\r\n    /**\r\n     * Add dataset values to a newly created HTML element.\r\n     */\r\n    function addDataset(element, dataset) {\r\n        for (var name_2 in dataset) {\r\n            element.setAttribute(\"data-\" + name_2, dataset[name_2]);\r\n        }\r\n    }\r\n    /**\r\n     * Update the dataset values of an HTML element.\r\n     */\r\n    function updateDataset(element, oldDataset, newDataset) {\r\n        for (var name_3 in oldDataset) {\r\n            if (!(name_3 in newDataset)) {\r\n                element.removeAttribute(\"data-\" + name_3);\r\n            }\r\n        }\r\n        for (var name_4 in newDataset) {\r\n            if (oldDataset[name_4] !== newDataset[name_4]) {\r\n                element.setAttribute(\"data-\" + name_4, newDataset[name_4]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Add inline style values to a newly created HTML element.\r\n     */\r\n    function addStyle(element, style) {\r\n        var elemStyle = element.style;\r\n        var name;\r\n        for (name in style) {\r\n            elemStyle[name] = style[name];\r\n        }\r\n    }\r\n    /**\r\n     * Update the inline style values of an HTML element.\r\n     */\r\n    function updateStyle(element, oldStyle, newStyle) {\r\n        var elemStyle = element.style;\r\n        var name;\r\n        for (name in oldStyle) {\r\n            if (!(name in newStyle)) {\r\n                elemStyle[name] = '';\r\n            }\r\n        }\r\n        for (name in newStyle) {\r\n            if (oldStyle[name] !== newStyle[name]) {\r\n                elemStyle[name] = newStyle[name];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Collect a mapping of keyed elements for the host content.\r\n     */\r\n    function collectKeys(host, content) {\r\n        var node = host.firstChild;\r\n        var keyMap = Object.create(null);\r\n        for (var _i = 0, content_1 = content; _i < content_1.length; _i++) {\r\n            var vNode = content_1[_i];\r\n            if (vNode.type === 'element' && vNode.attrs.key) {\r\n                keyMap[vNode.attrs.key] = { vNode: vNode, element: node };\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return keyMap;\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A sizer object for use with the box engine layout functions.\r\n *\r\n * #### Notes\r\n * A box sizer holds the geometry information for an object along an\r\n * arbitrary layout orientation.\r\n *\r\n * For best performance, this class should be treated as a raw data\r\n * struct. It should not typically be subclassed.\r\n */\r\nvar BoxSizer = (function () {\r\n    function BoxSizer() {\r\n        /**\r\n         * The preferred size for the sizer.\r\n         *\r\n         * #### Notes\r\n         * The sizer will be given this initial size subject to its size\r\n         * bounds. The sizer will not deviate from this size unless such\r\n         * deviation is required to fit into the available layout space.\r\n         *\r\n         * There is no limit to this value, but it will be clamped to the\r\n         * bounds defined by [[minSize]] and [[maxSize]].\r\n         *\r\n         * The default value is `0`.\r\n         */\r\n        this.sizeHint = 0;\r\n        /**\r\n         * The minimum size of the sizer.\r\n         *\r\n         * #### Notes\r\n         * The sizer will never be sized less than this value, even if\r\n         * it means the sizer will overflow the available layout space.\r\n         *\r\n         * It is assumed that this value lies in the range `[0, Infinity)`\r\n         * and that it is `<=` to [[maxSize]]. Failure to adhere to this\r\n         * constraint will yield undefined results.\r\n         *\r\n         * The default value is `0`.\r\n         */\r\n        this.minSize = 0;\r\n        /**\r\n         * The maximum size of the sizer.\r\n         *\r\n         * #### Notes\r\n         * The sizer will never be sized greater than this value, even if\r\n         * it means the sizer will underflow the available layout space.\r\n         *\r\n         * It is assumed that this value lies in the range `[0, Infinity]`\r\n         * and that it is `>=` to [[minSize]]. Failure to adhere to this\r\n         * constraint will yield undefined results.\r\n         *\r\n         * The default value is `Infinity`.\r\n         */\r\n        this.maxSize = Infinity;\r\n        /**\r\n         * The stretch factor for the sizer.\r\n         *\r\n         * #### Notes\r\n         * This controls how much the sizer stretches relative to its sibling\r\n         * sizers when layout space is distributed. A stretch factor of zero\r\n         * is special and will cause the sizer to only be resized after all\r\n         * other sizers with a stretch factor greater than zero have been\r\n         * resized to their limits.\r\n         *\r\n         * It is assumed that this value is an integer that lies in the range\r\n         * `[0, Infinity)`. Failure to adhere to this constraint will yield\r\n         * undefined results.\r\n         *\r\n         * The default value is `1`.\r\n         */\r\n        this.stretch = 1;\r\n        /**\r\n         * The computed size of the sizer.\r\n         *\r\n         * #### Notes\r\n         * This value is the output of a call to [[boxCalc]]. It represents\r\n         * the computed size for the object along the layout orientation,\r\n         * and will always lie in the range `[minSize, maxSize]`.\r\n         *\r\n         * This value is output only.\r\n         *\r\n         * Changing this value will have no effect.\r\n         */\r\n        this.size = 0;\r\n        /**\r\n         * An internal storage property for the layout algorithm.\r\n         *\r\n         * #### Notes\r\n         * This value is used as temporary storage by the layout algorithm.\r\n         *\r\n         * Changing this value will have no effect.\r\n         */\r\n        this.done = false;\r\n    }\r\n    return BoxSizer;\r\n}());\r\nexports.BoxSizer = BoxSizer;\r\n/**\r\n * The namespace for the box engine layout functions.\r\n */\r\nvar BoxEngine;\r\n(function (BoxEngine) {\r\n    /**\r\n     * Calculate the optimal layout sizes for a sequence of box sizers.\r\n     *\r\n     * This distributes the available layout space among the box sizers\r\n     * according to the following algorithm:\r\n     *\r\n     * 1. Initialize the sizers's size to its size hint and compute the\r\n     *    sums for each of size hint, min size, and max size.\r\n     *\r\n     * 2. If the total size hint equals the available space, return.\r\n     *\r\n     * 3. If the available space is less than the total min size, set all\r\n     *    sizers to their min size and return.\r\n     *\r\n     * 4. If the available space is greater than the total max size, set\r\n     *    all sizers to their max size and return.\r\n     *\r\n     * 5. If the layout space is less than the total size hint, distribute\r\n     *    the negative delta as follows:\r\n     *\r\n     *    a. Shrink each sizer with a stretch factor greater than zero by\r\n     *       an amount proportional to the negative space and the sum of\r\n     *       stretch factors. If the sizer reaches its min size, remove\r\n     *       it and its stretch factor from the computation.\r\n     *\r\n     *    b. If after adjusting all stretch sizers there remains negative\r\n     *       space, distribute the space equally among the sizers with a\r\n     *       stretch factor of zero. If a sizer reaches its min size,\r\n     *       remove it from the computation.\r\n     *\r\n     * 6. If the layout space is greater than the total size hint,\r\n     *    distribute the positive delta as follows:\r\n     *\r\n     *    a. Expand each sizer with a stretch factor greater than zero by\r\n     *       an amount proportional to the postive space and the sum of\r\n     *       stretch factors. If the sizer reaches its max size, remove\r\n     *       it and its stretch factor from the computation.\r\n     *\r\n     *    b. If after adjusting all stretch sizers there remains positive\r\n     *       space, distribute the space equally among the sizers with a\r\n     *       stretch factor of zero. If a sizer reaches its max size,\r\n     *       remove it from the computation.\r\n     *\r\n     * 7. return\r\n     *\r\n     * @param sizers - The sizers for a particular layout line.\r\n     *\r\n     * @param space - The available layout space for the sizers.\r\n     *\r\n     * @returns The delta between the provided available space and the\r\n     *   actual consumed space. This value will be zero if the sizers\r\n     *   can be adjusted to fit, negative if the available space is too\r\n     *   small, and positive if the available space is too large.\r\n     *\r\n     * #### Notes\r\n     * The [[size]] of each sizer is updated with the computed size.\r\n     *\r\n     * This function can be called at any time to recompute the layout for\r\n     * an existing sequence of sizers. The previously computed results will\r\n     * have no effect on the new output. It is therefore not necessary to\r\n     * create new sizer objects on each resize event.\r\n     */\r\n    function calc(sizers, space) {\r\n        // Bail early if there is nothing to do.\r\n        var count = sizers.length;\r\n        if (count === 0) {\r\n            return space;\r\n        }\r\n        // Setup the size and stretch counters.\r\n        var totalMin = 0;\r\n        var totalMax = 0;\r\n        var totalSize = 0;\r\n        var totalStretch = 0;\r\n        var stretchCount = 0;\r\n        // Setup the sizers and compute the totals.\r\n        for (var i = 0; i < count; ++i) {\r\n            var sizer = sizers[i];\r\n            var min = sizer.minSize;\r\n            var max = sizer.maxSize;\r\n            var hint = sizer.sizeHint;\r\n            sizer.done = false;\r\n            sizer.size = Math.max(min, Math.min(hint, max));\r\n            totalSize += sizer.size;\r\n            totalMin += min;\r\n            totalMax += max;\r\n            if (sizer.stretch > 0) {\r\n                totalStretch += sizer.stretch;\r\n                stretchCount++;\r\n            }\r\n        }\r\n        // If the space is equal to the total size, return early.\r\n        if (space === totalSize) {\r\n            return 0;\r\n        }\r\n        // If the space is less than the total min, minimize each sizer.\r\n        if (space <= totalMin) {\r\n            for (var i = 0; i < count; ++i) {\r\n                var sizer = sizers[i];\r\n                sizer.size = sizer.minSize;\r\n            }\r\n            return space - totalMin;\r\n        }\r\n        // If the space is greater than the total max, maximize each sizer.\r\n        if (space >= totalMax) {\r\n            for (var i = 0; i < count; ++i) {\r\n                var sizer = sizers[i];\r\n                sizer.size = sizer.maxSize;\r\n            }\r\n            return space - totalMax;\r\n        }\r\n        // The loops below perform sub-pixel precision sizing. A near zero\r\n        // value is used for compares instead of zero to ensure that the\r\n        // loop terminates when the subdivided space is reasonably small.\r\n        var nearZero = 0.01;\r\n        // A counter which is decremented each time a sizer is resized to\r\n        // its limit. This ensures the loops terminate even if there is\r\n        // space remaining to distribute.\r\n        var notDoneCount = count;\r\n        // Distribute negative delta space.\r\n        if (space < totalSize) {\r\n            // Shrink each stretchable sizer by an amount proportional to its\r\n            // stretch factor. If a sizer reaches its min size it's marked as\r\n            // done. The loop progresses in phases where each sizer is given\r\n            // a chance to consume its fair share for the pass, regardless of\r\n            // whether a sizer before it reached its limit. This continues\r\n            // until the stretchable sizers or the free space is exhausted.\r\n            var freeSpace = totalSize - space;\r\n            while (stretchCount > 0 && freeSpace > nearZero) {\r\n                var distSpace = freeSpace;\r\n                var distStretch = totalStretch;\r\n                for (var i = 0; i < count; ++i) {\r\n                    var sizer = sizers[i];\r\n                    if (sizer.done || sizer.stretch === 0) {\r\n                        continue;\r\n                    }\r\n                    var amt = sizer.stretch * distSpace / distStretch;\r\n                    if (sizer.size - amt <= sizer.minSize) {\r\n                        freeSpace -= sizer.size - sizer.minSize;\r\n                        totalStretch -= sizer.stretch;\r\n                        sizer.size = sizer.minSize;\r\n                        sizer.done = true;\r\n                        notDoneCount--;\r\n                        stretchCount--;\r\n                    }\r\n                    else {\r\n                        freeSpace -= amt;\r\n                        sizer.size -= amt;\r\n                    }\r\n                }\r\n            }\r\n            // Distribute any remaining space evenly among the non-stretchable\r\n            // sizers. This progresses in phases in the same manner as above.\r\n            while (notDoneCount > 0 && freeSpace > nearZero) {\r\n                var amt = freeSpace / notDoneCount;\r\n                for (var i = 0; i < count; ++i) {\r\n                    var sizer = sizers[i];\r\n                    if (sizer.done) {\r\n                        continue;\r\n                    }\r\n                    if (sizer.size - amt <= sizer.minSize) {\r\n                        freeSpace -= sizer.size - sizer.minSize;\r\n                        sizer.size = sizer.minSize;\r\n                        sizer.done = true;\r\n                        notDoneCount--;\r\n                    }\r\n                    else {\r\n                        freeSpace -= amt;\r\n                        sizer.size -= amt;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Expand each stretchable sizer by an amount proportional to its\r\n            // stretch factor. If a sizer reaches its max size it's marked as\r\n            // done. The loop progresses in phases where each sizer is given\r\n            // a chance to consume its fair share for the pass, regardless of\r\n            // whether a sizer before it reached its limit. This continues\r\n            // until the stretchable sizers or the free space is exhausted.\r\n            var freeSpace = space - totalSize;\r\n            while (stretchCount > 0 && freeSpace > nearZero) {\r\n                var distSpace = freeSpace;\r\n                var distStretch = totalStretch;\r\n                for (var i = 0; i < count; ++i) {\r\n                    var sizer = sizers[i];\r\n                    if (sizer.done || sizer.stretch === 0) {\r\n                        continue;\r\n                    }\r\n                    var amt = sizer.stretch * distSpace / distStretch;\r\n                    if (sizer.size + amt >= sizer.maxSize) {\r\n                        freeSpace -= sizer.maxSize - sizer.size;\r\n                        totalStretch -= sizer.stretch;\r\n                        sizer.size = sizer.maxSize;\r\n                        sizer.done = true;\r\n                        notDoneCount--;\r\n                        stretchCount--;\r\n                    }\r\n                    else {\r\n                        freeSpace -= amt;\r\n                        sizer.size += amt;\r\n                    }\r\n                }\r\n            }\r\n            // Distribute any remaining space evenly among the non-stretchable\r\n            // sizers. This progresses in phases in the same manner as above.\r\n            while (notDoneCount > 0 && freeSpace > nearZero) {\r\n                var amt = freeSpace / notDoneCount;\r\n                for (var i = 0; i < count; ++i) {\r\n                    var sizer = sizers[i];\r\n                    if (sizer.done) {\r\n                        continue;\r\n                    }\r\n                    if (sizer.size + amt >= sizer.maxSize) {\r\n                        freeSpace -= sizer.maxSize - sizer.size;\r\n                        sizer.size = sizer.maxSize;\r\n                        sizer.done = true;\r\n                        notDoneCount--;\r\n                    }\r\n                    else {\r\n                        freeSpace -= amt;\r\n                        sizer.size += amt;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Indicate that the consumed space equals the available space.\r\n        return 0;\r\n    }\r\n    BoxEngine.calc = calc;\r\n    /**\r\n     * Adjust a sizer by a delta and update its neighbors accordingly.\r\n     *\r\n     * @param sizers - The sizers which should be adjusted.\r\n     *\r\n     * @param index - The index of the sizer to grow.\r\n     *\r\n     * @param delta - The amount to adjust the sizer, positive or negative.\r\n     *\r\n     * #### Notes\r\n     * This will adjust the indicated sizer by the specified amount, along\r\n     * with the sizes of the appropriate neighbors, subject to the limits\r\n     * specified by each of the sizers.\r\n     *\r\n     * This is useful when implementing box layouts where the boundaries\r\n     * between the sizers are interactively adjustable by the user.\r\n     */\r\n    function adjust(sizers, index, delta) {\r\n        // Bail early when there is nothing to do.\r\n        if (sizers.length === 0 || delta === 0) {\r\n            return;\r\n        }\r\n        // Dispatch to the proper implementation.\r\n        if (delta > 0) {\r\n            growSizer(sizers, index, delta);\r\n        }\r\n        else {\r\n            shrinkSizer(sizers, index, -delta);\r\n        }\r\n    }\r\n    BoxEngine.adjust = adjust;\r\n    /**\r\n     * Grow a sizer by a positive delta and adjust neighbors.\r\n     */\r\n    function growSizer(sizers, index, delta) {\r\n        // Compute how much the items to the left can expand.\r\n        var growLimit = 0;\r\n        for (var i = 0; i <= index; ++i) {\r\n            var sizer = sizers[i];\r\n            growLimit += sizer.maxSize - sizer.size;\r\n        }\r\n        // Compute how much the items to the right can shrink.\r\n        var shrinkLimit = 0;\r\n        for (var i = index + 1, n = sizers.length; i < n; ++i) {\r\n            var sizer = sizers[i];\r\n            shrinkLimit += sizer.size - sizer.minSize;\r\n        }\r\n        // Clamp the delta adjustment to the limits.\r\n        delta = Math.min(delta, growLimit, shrinkLimit);\r\n        // Grow the sizers to the left by the delta.\r\n        var grow = delta;\r\n        for (var i = index; i >= 0 && grow > 0; --i) {\r\n            var sizer = sizers[i];\r\n            var limit = sizer.maxSize - sizer.size;\r\n            if (limit >= grow) {\r\n                sizer.sizeHint = sizer.size + grow;\r\n                grow = 0;\r\n            }\r\n            else {\r\n                sizer.sizeHint = sizer.size + limit;\r\n                grow -= limit;\r\n            }\r\n        }\r\n        // Shrink the sizers to the right by the delta.\r\n        var shrink = delta;\r\n        for (var i = index + 1, n = sizers.length; i < n && shrink > 0; ++i) {\r\n            var sizer = sizers[i];\r\n            var limit = sizer.size - sizer.minSize;\r\n            if (limit >= shrink) {\r\n                sizer.sizeHint = sizer.size - shrink;\r\n                shrink = 0;\r\n            }\r\n            else {\r\n                sizer.sizeHint = sizer.size - limit;\r\n                shrink -= limit;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Shrink a sizer by a positive delta and adjust neighbors.\r\n     */\r\n    function shrinkSizer(sizers, index, delta) {\r\n        // Compute how much the items to the right can expand.\r\n        var growLimit = 0;\r\n        for (var i = index + 1, n = sizers.length; i < n; ++i) {\r\n            var sizer = sizers[i];\r\n            growLimit += sizer.maxSize - sizer.size;\r\n        }\r\n        // Compute how much the items to the left can shrink.\r\n        var shrinkLimit = 0;\r\n        for (var i = 0; i <= index; ++i) {\r\n            var sizer = sizers[i];\r\n            shrinkLimit += sizer.size - sizer.minSize;\r\n        }\r\n        // Clamp the delta adjustment to the limits.\r\n        delta = Math.min(delta, growLimit, shrinkLimit);\r\n        // Grow the sizers to the right by the delta.\r\n        var grow = delta;\r\n        for (var i = index + 1, n = sizers.length; i < n && grow > 0; ++i) {\r\n            var sizer = sizers[i];\r\n            var limit = sizer.maxSize - sizer.size;\r\n            if (limit >= grow) {\r\n                sizer.sizeHint = sizer.size + grow;\r\n                grow = 0;\r\n            }\r\n            else {\r\n                sizer.sizeHint = sizer.size + limit;\r\n                grow -= limit;\r\n            }\r\n        }\r\n        // Shrink the sizers to the left by the delta.\r\n        var shrink = delta;\r\n        for (var i = index; i >= 0 && shrink > 0; --i) {\r\n            var sizer = sizers[i];\r\n            var limit = sizer.size - sizer.minSize;\r\n            if (limit >= shrink) {\r\n                sizer.sizeHint = sizer.size - shrink;\r\n                shrink = 0;\r\n            }\r\n            else {\r\n                sizer.sizeHint = sizer.size - limit;\r\n                shrink -= limit;\r\n            }\r\n        }\r\n    }\r\n})(BoxEngine = exports.BoxEngine || (exports.BoxEngine = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar properties_1 = require(\"@phosphor/properties\");\r\nvar boxengine_1 = require(\"./boxengine\");\r\nvar layout_1 = require(\"./layout\");\r\nvar panellayout_1 = require(\"./panellayout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A layout which arranges its widgets in a single row or column.\r\n */\r\nvar BoxLayout = (function (_super) {\r\n    __extends(BoxLayout, _super);\r\n    /**\r\n     * Construct a new box layout.\r\n     *\r\n     * @param options - The options for initializing the layout.\r\n     */\r\n    function BoxLayout(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this._fixed = 0;\r\n        _this._spacing = 4;\r\n        _this._dirty = false;\r\n        _this._sizers = [];\r\n        _this._items = [];\r\n        _this._box = null;\r\n        _this._alignment = 'start';\r\n        _this._direction = 'top-to-bottom';\r\n        if (options.direction !== undefined) {\r\n            _this._direction = options.direction;\r\n        }\r\n        if (options.alignment !== undefined) {\r\n            _this._alignment = options.alignment;\r\n        }\r\n        if (options.spacing !== undefined) {\r\n            _this._spacing = Private.clampSpacing(options.spacing);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     */\r\n    BoxLayout.prototype.dispose = function () {\r\n        // Dispose of the layout items.\r\n        algorithm_1.each(this._items, function (item) { item.dispose(); });\r\n        // Clear the layout state.\r\n        this._box = null;\r\n        this._items.length = 0;\r\n        this._sizers.length = 0;\r\n        // Dispose of the rest of the layout.\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(BoxLayout.prototype, \"direction\", {\r\n        /**\r\n         * Get the layout direction for the box layout.\r\n         */\r\n        get: function () {\r\n            return this._direction;\r\n        },\r\n        /**\r\n         * Set the layout direction for the box layout.\r\n         */\r\n        set: function (value) {\r\n            if (this._direction === value) {\r\n                return;\r\n            }\r\n            this._direction = value;\r\n            if (!this.parent) {\r\n                return;\r\n            }\r\n            this.parent.dataset['direction'] = value;\r\n            this.parent.fit();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxLayout.prototype, \"alignment\", {\r\n        /**\r\n         * Get the content alignment for the box layout.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand to fill the\r\n         * entire box layout.\r\n         */\r\n        get: function () {\r\n            return this._alignment;\r\n        },\r\n        /**\r\n         * Set the content alignment for the box layout.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand to fill the\r\n         * entire box layout.\r\n         */\r\n        set: function (value) {\r\n            if (this._alignment === value) {\r\n                return;\r\n            }\r\n            this._alignment = value;\r\n            if (!this.parent) {\r\n                return;\r\n            }\r\n            this.parent.dataset['alignment'] = value;\r\n            this.parent.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxLayout.prototype, \"spacing\", {\r\n        /**\r\n         * Get the inter-element spacing for the box layout.\r\n         */\r\n        get: function () {\r\n            return this._spacing;\r\n        },\r\n        /**\r\n         * Set the inter-element spacing for the box layout.\r\n         */\r\n        set: function (value) {\r\n            value = Private.clampSpacing(value);\r\n            if (this._spacing === value) {\r\n                return;\r\n            }\r\n            this._spacing = value;\r\n            if (!this.parent) {\r\n                return;\r\n            }\r\n            this.parent.fit();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    BoxLayout.prototype.init = function () {\r\n        this.parent.dataset['direction'] = this.direction;\r\n        this.parent.dataset['alignment'] = this.alignment;\r\n        _super.prototype.init.call(this);\r\n    };\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param index - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    BoxLayout.prototype.attachWidget = function (index, widget) {\r\n        // Create and add a new layout item for the widget.\r\n        algorithm_1.ArrayExt.insert(this._items, index, new layout_1.LayoutItem(widget));\r\n        // Create and add a new sizer for the widget.\r\n        algorithm_1.ArrayExt.insert(this._sizers, index, new boxengine_1.BoxSizer());\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Add the widget's node to the parent.\r\n        this.parent.node.appendChild(widget.node);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Move a widget in the parent's DOM node.\r\n     *\r\n     * @param fromIndex - The previous index of the widget in the layout.\r\n     *\r\n     * @param toIndex - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to move in the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    BoxLayout.prototype.moveWidget = function (fromIndex, toIndex, widget) {\r\n        // Move the layout item for the widget.\r\n        algorithm_1.ArrayExt.move(this._items, fromIndex, toIndex);\r\n        // Move the sizer for the widget.\r\n        algorithm_1.ArrayExt.move(this._sizers, fromIndex, toIndex);\r\n        // Post an update request for the parent widget.\r\n        this.parent.update();\r\n    };\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param index - The previous index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    BoxLayout.prototype.detachWidget = function (index, widget) {\r\n        // Remove the layout item for the widget.\r\n        var item = algorithm_1.ArrayExt.removeAt(this._items, index);\r\n        // Remove the sizer for the widget.\r\n        algorithm_1.ArrayExt.removeAt(this._sizers, index);\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget's node from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        // Send an `'after-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n        // Dispose of the layout item.\r\n        item.dispose();\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-show'` message.\r\n     */\r\n    BoxLayout.prototype.onBeforeShow = function (msg) {\r\n        _super.prototype.onBeforeShow.call(this, msg);\r\n        this.parent.update();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    BoxLayout.prototype.onBeforeAttach = function (msg) {\r\n        _super.prototype.onBeforeAttach.call(this, msg);\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     */\r\n    BoxLayout.prototype.onChildShown = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     */\r\n    BoxLayout.prototype.onChildHidden = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     */\r\n    BoxLayout.prototype.onResize = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(msg.width, msg.height);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    BoxLayout.prototype.onUpdateRequest = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(-1, -1);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     */\r\n    BoxLayout.prototype.onFitRequest = function (msg) {\r\n        if (this.parent.isAttached) {\r\n            this._fit();\r\n        }\r\n    };\r\n    /**\r\n     * Fit the layout to the total size required by the widgets.\r\n     */\r\n    BoxLayout.prototype._fit = function () {\r\n        // Compute the visible item count.\r\n        var nVisible = 0;\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            nVisible += +!this._items[i].isHidden;\r\n        }\r\n        // Update the fixed space for the visible items.\r\n        this._fixed = this._spacing * Math.max(0, nVisible - 1);\r\n        // Setup the computed minimum size.\r\n        var horz = Private.isHorizontal(this._direction);\r\n        var minW = horz ? this._fixed : 0;\r\n        var minH = horz ? 0 : this._fixed;\r\n        // Update the sizers and computed minimum size.\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            // Fetch the item and corresponding box sizer.\r\n            var item = this._items[i];\r\n            var sizer = this._sizers[i];\r\n            // If the item is hidden, it should consume zero size.\r\n            if (item.isHidden) {\r\n                sizer.minSize = 0;\r\n                sizer.maxSize = 0;\r\n                continue;\r\n            }\r\n            // Update the size limits for the item.\r\n            item.fit();\r\n            // Update the size basis and stretch factor.\r\n            sizer.sizeHint = BoxLayout.getSizeBasis(item.widget);\r\n            sizer.stretch = BoxLayout.getStretch(item.widget);\r\n            // Update the sizer limits and computed min size.\r\n            if (horz) {\r\n                sizer.minSize = item.minWidth;\r\n                sizer.maxSize = item.maxWidth;\r\n                minW += item.minWidth;\r\n                minH = Math.max(minH, item.minHeight);\r\n            }\r\n            else {\r\n                sizer.minSize = item.minHeight;\r\n                sizer.maxSize = item.maxHeight;\r\n                minH += item.minHeight;\r\n                minW = Math.max(minW, item.minWidth);\r\n            }\r\n        }\r\n        // Update the box sizing and add it to the computed min size.\r\n        var box = this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        minW += box.horizontalSum;\r\n        minH += box.verticalSum;\r\n        // Update the parent's min size constraints.\r\n        var style = this.parent.node.style;\r\n        style.minWidth = minW + \"px\";\r\n        style.minHeight = minH + \"px\";\r\n        // Set the dirty flag to ensure only a single update occurs.\r\n        this._dirty = true;\r\n        // Notify the ancestor that it should fit immediately. This may\r\n        // cause a resize of the parent, fulfilling the required update.\r\n        if (this.parent.parent) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent.parent, widget_1.Widget.Msg.FitRequest);\r\n        }\r\n        // If the dirty flag is still set, the parent was not resized.\r\n        // Trigger the required update on the parent widget immediately.\r\n        if (this._dirty) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widget_1.Widget.Msg.UpdateRequest);\r\n        }\r\n    };\r\n    /**\r\n     * Update the layout position and size of the widgets.\r\n     *\r\n     * The parent offset dimensions should be `-1` if unknown.\r\n     */\r\n    BoxLayout.prototype._update = function (offsetWidth, offsetHeight) {\r\n        // Clear the dirty flag to indicate the update occurred.\r\n        this._dirty = false;\r\n        // Compute the visible item count.\r\n        var nVisible = 0;\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            nVisible += +!this._items[i].isHidden;\r\n        }\r\n        // Bail early if there are no visible items to layout.\r\n        if (nVisible === 0) {\r\n            return;\r\n        }\r\n        // Measure the parent if the offset dimensions are unknown.\r\n        if (offsetWidth < 0) {\r\n            offsetWidth = this.parent.node.offsetWidth;\r\n        }\r\n        if (offsetHeight < 0) {\r\n            offsetHeight = this.parent.node.offsetHeight;\r\n        }\r\n        // Ensure the parent box sizing data is computed.\r\n        if (!this._box) {\r\n            this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        }\r\n        // Compute the layout area adjusted for border and padding.\r\n        var top = this._box.paddingTop;\r\n        var left = this._box.paddingLeft;\r\n        var width = offsetWidth - this._box.horizontalSum;\r\n        var height = offsetHeight - this._box.verticalSum;\r\n        // Distribute the layout space and adjust the start position.\r\n        var delta;\r\n        switch (this._direction) {\r\n            case 'left-to-right':\r\n                delta = boxengine_1.BoxEngine.calc(this._sizers, Math.max(0, width - this._fixed));\r\n                break;\r\n            case 'top-to-bottom':\r\n                delta = boxengine_1.BoxEngine.calc(this._sizers, Math.max(0, height - this._fixed));\r\n                break;\r\n            case 'right-to-left':\r\n                delta = boxengine_1.BoxEngine.calc(this._sizers, Math.max(0, width - this._fixed));\r\n                left += width;\r\n                break;\r\n            case 'bottom-to-top':\r\n                delta = boxengine_1.BoxEngine.calc(this._sizers, Math.max(0, height - this._fixed));\r\n                top += height;\r\n                break;\r\n            default:\r\n                throw 'unreachable';\r\n        }\r\n        // Setup the variables for justification and alignment offset.\r\n        var extra = 0;\r\n        var offset = 0;\r\n        // Account for alignment if there is extra layout space.\r\n        if (delta > 0) {\r\n            switch (this._alignment) {\r\n                case 'start':\r\n                    break;\r\n                case 'center':\r\n                    extra = 0;\r\n                    offset = delta / 2;\r\n                    break;\r\n                case 'end':\r\n                    extra = 0;\r\n                    offset = delta;\r\n                    break;\r\n                case 'justify':\r\n                    extra = delta / nVisible;\r\n                    offset = 0;\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n        }\r\n        // Layout the items using the computed box sizes.\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            // Fetch the item.\r\n            var item = this._items[i];\r\n            // Ignore hidden items.\r\n            if (item.isHidden) {\r\n                continue;\r\n            }\r\n            // Fetch the computed size for the widget.\r\n            var size = this._sizers[i].size;\r\n            // Update the widget geometry and advance the relevant edge.\r\n            switch (this._direction) {\r\n                case 'left-to-right':\r\n                    item.update(left + offset, top, size + extra, height);\r\n                    left += size + extra + this._spacing;\r\n                    break;\r\n                case 'top-to-bottom':\r\n                    item.update(left, top + offset, width, size + extra);\r\n                    top += size + extra + this._spacing;\r\n                    break;\r\n                case 'right-to-left':\r\n                    item.update(left - offset - size - extra, top, size + extra, height);\r\n                    left -= size + extra + this._spacing;\r\n                    break;\r\n                case 'bottom-to-top':\r\n                    item.update(left, top - offset - size - extra, width, size + extra);\r\n                    top -= size + extra + this._spacing;\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n        }\r\n    };\r\n    return BoxLayout;\r\n}(panellayout_1.PanelLayout));\r\nexports.BoxLayout = BoxLayout;\r\n/**\r\n * The namespace for the `BoxLayout` class statics.\r\n */\r\n(function (BoxLayout) {\r\n    /**\r\n     * Get the box layout stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The box layout stretch factor for the widget.\r\n     */\r\n    function getStretch(widget) {\r\n        return Private.stretchProperty.get(widget);\r\n    }\r\n    BoxLayout.getStretch = getStretch;\r\n    /**\r\n     * Set the box layout stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the stretch factor.\r\n     */\r\n    function setStretch(widget, value) {\r\n        Private.stretchProperty.set(widget, value);\r\n    }\r\n    BoxLayout.setStretch = setStretch;\r\n    /**\r\n     * Get the box layout size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The box layout size basis for the widget.\r\n     */\r\n    function getSizeBasis(widget) {\r\n        return Private.sizeBasisProperty.get(widget);\r\n    }\r\n    BoxLayout.getSizeBasis = getSizeBasis;\r\n    /**\r\n     * Set the box layout size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the size basis.\r\n     */\r\n    function setSizeBasis(widget, value) {\r\n        Private.sizeBasisProperty.set(widget, value);\r\n    }\r\n    BoxLayout.setSizeBasis = setSizeBasis;\r\n})(BoxLayout = exports.BoxLayout || (exports.BoxLayout = {}));\r\nexports.BoxLayout = BoxLayout;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The property descriptor for a widget stretch factor.\r\n     */\r\n    Private.stretchProperty = new properties_1.AttachedProperty({\r\n        name: 'stretch',\r\n        create: function () { return 0; },\r\n        coerce: function (owner, value) { return Math.max(0, Math.floor(value)); },\r\n        changed: onChildSizingChanged\r\n    });\r\n    /**\r\n     * The property descriptor for a widget size basis.\r\n     */\r\n    Private.sizeBasisProperty = new properties_1.AttachedProperty({\r\n        name: 'sizeBasis',\r\n        create: function () { return 0; },\r\n        coerce: function (owner, value) { return Math.max(0, Math.floor(value)); },\r\n        changed: onChildSizingChanged\r\n    });\r\n    /**\r\n     * Test whether a direction has horizontal orientation.\r\n     */\r\n    function isHorizontal(dir) {\r\n        return dir === 'left-to-right' || dir === 'right-to-left';\r\n    }\r\n    Private.isHorizontal = isHorizontal;\r\n    /**\r\n     * Clamp a spacing value to an integer >= 0.\r\n     */\r\n    function clampSpacing(value) {\r\n        return Math.max(0, Math.floor(value));\r\n    }\r\n    Private.clampSpacing = clampSpacing;\r\n    /**\r\n     * The change handler for the attached sizing properties.\r\n     */\r\n    function onChildSizingChanged(child) {\r\n        if (child.parent && child.parent.layout instanceof BoxLayout) {\r\n            child.parent.fit();\r\n        }\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar boxlayout_1 = require(\"./boxlayout\");\r\nvar panel_1 = require(\"./panel\");\r\n/**\r\n * A panel which arranges its widgets in a single row or column.\r\n *\r\n * #### Notes\r\n * This class provides a convenience wrapper around a [[BoxLayout]].\r\n */\r\nvar BoxPanel = (function (_super) {\r\n    __extends(BoxPanel, _super);\r\n    /**\r\n     * Construct a new box panel.\r\n     *\r\n     * @param options - The options for initializing the box panel.\r\n     */\r\n    function BoxPanel(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, { layout: Private.createLayout(options) }) || this;\r\n        _this.addClass('p-BoxPanel');\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BoxPanel.prototype, \"direction\", {\r\n        /**\r\n         * Get the layout direction for the box panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.direction;\r\n        },\r\n        /**\r\n         * Set the layout direction for the box panel.\r\n         */\r\n        set: function (value) {\r\n            this.layout.direction = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxPanel.prototype, \"alignment\", {\r\n        /**\r\n         * Get the content alignment for the box panel.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand to fill the\r\n         * entire box layout.\r\n         */\r\n        get: function () {\r\n            return this.layout.alignment;\r\n        },\r\n        /**\r\n         * Set the content alignment for the box panel.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand to fill the\r\n         * entire box layout.\r\n         */\r\n        set: function (value) {\r\n            this.layout.alignment = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxPanel.prototype, \"spacing\", {\r\n        /**\r\n         * Get the inter-element spacing for the box panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.spacing;\r\n        },\r\n        /**\r\n         * Set the inter-element spacing for the box panel.\r\n         */\r\n        set: function (value) {\r\n            this.layout.spacing = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * A message handler invoked on a `'child-added'` message.\r\n     */\r\n    BoxPanel.prototype.onChildAdded = function (msg) {\r\n        msg.child.addClass('p-BoxPanel-child');\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     */\r\n    BoxPanel.prototype.onChildRemoved = function (msg) {\r\n        msg.child.removeClass('p-BoxPanel-child');\r\n    };\r\n    return BoxPanel;\r\n}(panel_1.Panel));\r\nexports.BoxPanel = BoxPanel;\r\n/**\r\n * The namespace for the `BoxPanel` class statics.\r\n */\r\n(function (BoxPanel) {\r\n    /**\r\n     * Get the box panel stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The box panel stretch factor for the widget.\r\n     */\r\n    function getStretch(widget) {\r\n        return boxlayout_1.BoxLayout.getStretch(widget);\r\n    }\r\n    BoxPanel.getStretch = getStretch;\r\n    /**\r\n     * Set the box panel stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the stretch factor.\r\n     */\r\n    function setStretch(widget, value) {\r\n        boxlayout_1.BoxLayout.setStretch(widget, value);\r\n    }\r\n    BoxPanel.setStretch = setStretch;\r\n    /**\r\n     * Get the box panel size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The box panel size basis for the widget.\r\n     */\r\n    function getSizeBasis(widget) {\r\n        return boxlayout_1.BoxLayout.getSizeBasis(widget);\r\n    }\r\n    BoxPanel.getSizeBasis = getSizeBasis;\r\n    /**\r\n     * Set the box panel size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the size basis.\r\n     */\r\n    function setSizeBasis(widget, value) {\r\n        boxlayout_1.BoxLayout.setSizeBasis(widget, value);\r\n    }\r\n    BoxPanel.setSizeBasis = setSizeBasis;\r\n})(BoxPanel = exports.BoxPanel || (exports.BoxPanel = {}));\r\nexports.BoxPanel = BoxPanel;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create a box layout for the given panel options.\r\n     */\r\n    function createLayout(options) {\r\n        return options.layout || new boxlayout_1.BoxLayout(options);\r\n    }\r\n    Private.createLayout = createLayout;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar coreutils_1 = require(\"@phosphor/coreutils\");\r\nvar commands_1 = require(\"@phosphor/commands\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar virtualdom_1 = require(\"@phosphor/virtualdom\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A widget which displays command items as a searchable palette.\r\n */\r\nvar CommandPalette = (function (_super) {\r\n    __extends(CommandPalette, _super);\r\n    /**\r\n     * Construct a new command palette.\r\n     *\r\n     * @param options - The options for initializing the palette.\r\n     */\r\n    function CommandPalette(options) {\r\n        var _this = _super.call(this, { node: Private.createNode() }) || this;\r\n        _this._activeIndex = -1;\r\n        _this._items = [];\r\n        _this._results = null;\r\n        _this.addClass('p-CommandPalette');\r\n        _this.setFlag(widget_1.Widget.Flag.DisallowLayout);\r\n        _this.commands = options.commands;\r\n        _this.renderer = options.renderer || CommandPalette.defaultRenderer;\r\n        _this.commands.commandChanged.connect(_this._onGenericChange, _this);\r\n        _this.commands.keyBindingChanged.connect(_this._onGenericChange, _this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the widget.\r\n     */\r\n    CommandPalette.prototype.dispose = function () {\r\n        this._items.length = 0;\r\n        this._results = null;\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(CommandPalette.prototype, \"searchNode\", {\r\n        /**\r\n         * The command palette search node.\r\n         *\r\n         * #### Notes\r\n         * This is the node which contains the search-related elements.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-CommandPalette-search')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommandPalette.prototype, \"inputNode\", {\r\n        /**\r\n         * The command palette input node.\r\n         *\r\n         * #### Notes\r\n         * This is the actual input node for the search area.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-CommandPalette-input')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommandPalette.prototype, \"contentNode\", {\r\n        /**\r\n         * The command palette content node.\r\n         *\r\n         * #### Notes\r\n         * This is the node which holds the command item nodes.\r\n         *\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-CommandPalette-content')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommandPalette.prototype, \"items\", {\r\n        /**\r\n         * A read-only array of the command items in the palette.\r\n         */\r\n        get: function () {\r\n            return this._items;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Add a command item to the command palette.\r\n     *\r\n     * @param options - The options for creating the command item.\r\n     *\r\n     * @returns The command item added to the palette.\r\n     */\r\n    CommandPalette.prototype.addItem = function (options) {\r\n        // Create a new command item for the options.\r\n        var item = Private.createItem(this.commands, options);\r\n        // Add the item to the array.\r\n        this._items.push(item);\r\n        // Refresh the search results.\r\n        this.refresh();\r\n        // Return the item added to the palette.\r\n        return item;\r\n    };\r\n    /**\r\n     * Remove an item from the command palette.\r\n     *\r\n     * @param item - The item to remove from the palette.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the item is not in the palette.\r\n     */\r\n    CommandPalette.prototype.removeItem = function (item) {\r\n        this.removeItemAt(this._items.indexOf(item));\r\n    };\r\n    /**\r\n     * Remove the item at a given index from the command palette.\r\n     *\r\n     * @param index - The index of the item to remove.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the index is out of range.\r\n     */\r\n    CommandPalette.prototype.removeItemAt = function (index) {\r\n        // Remove the item from the array.\r\n        var item = algorithm_1.ArrayExt.removeAt(this._items, index);\r\n        // Bail if the index is out of range.\r\n        if (!item) {\r\n            return;\r\n        }\r\n        // Refresh the search results.\r\n        this.refresh();\r\n    };\r\n    /**\r\n     * Remove all items from the command palette.\r\n     */\r\n    CommandPalette.prototype.clearItems = function () {\r\n        // Bail if there is nothing to remove.\r\n        if (this._items.length === 0) {\r\n            return;\r\n        }\r\n        // Clear the array of items.\r\n        this._items.length = 0;\r\n        // Refresh the search results.\r\n        this.refresh();\r\n    };\r\n    /**\r\n     * Clear the search results and schedule an update.\r\n     *\r\n     * #### Notes\r\n     * This should be called whenever the search results of the palette\r\n     * should be updated.\r\n     *\r\n     * This is typically called automatically by the palette as needed,\r\n     * but can be called manually if the input text is programatically\r\n     * changed.\r\n     *\r\n     * The rendered results are updated asynchronously.\r\n     */\r\n    CommandPalette.prototype.refresh = function () {\r\n        this._results = null;\r\n        this.update();\r\n    };\r\n    /**\r\n     * Handle the DOM events for the command palette.\r\n     *\r\n     * @param event - The DOM event sent to the command palette.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the command palette's DOM node.\r\n     * It should not be called directly by user code.\r\n     */\r\n    CommandPalette.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this._evtClick(event);\r\n                break;\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            case 'input':\r\n                this.refresh();\r\n                break;\r\n            case 'focus':\r\n            case 'blur':\r\n                this._toggleFocused();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    CommandPalette.prototype.onBeforeAttach = function (msg) {\r\n        this.node.addEventListener('click', this);\r\n        this.node.addEventListener('keydown', this);\r\n        this.node.addEventListener('input', this);\r\n        this.node.addEventListener('focus', this, true);\r\n        this.node.addEventListener('blur', this, true);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     */\r\n    CommandPalette.prototype.onAfterDetach = function (msg) {\r\n        this.node.removeEventListener('click', this);\r\n        this.node.removeEventListener('keydown', this);\r\n        this.node.removeEventListener('input', this);\r\n        this.node.removeEventListener('focus', this, true);\r\n        this.node.removeEventListener('blur', this, true);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'activate-request'` message.\r\n     */\r\n    CommandPalette.prototype.onActivateRequest = function (msg) {\r\n        if (this.isAttached) {\r\n            var input = this.inputNode;\r\n            input.focus();\r\n            input.select();\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    CommandPalette.prototype.onUpdateRequest = function (msg) {\r\n        // Fetch the current query text and content node.\r\n        var query = this.inputNode.value;\r\n        var contentNode = this.contentNode;\r\n        // Ensure the search results are generated.\r\n        var results = this._results;\r\n        if (!results) {\r\n            // Generate and store the new search results.\r\n            results = this._results = Private.search(this._items, query);\r\n            // Reset the active index.\r\n            this._activeIndex = (query ? algorithm_1.ArrayExt.findFirstIndex(results, Private.canActivate) : -1);\r\n        }\r\n        // If there is no query and no results, clear the content.\r\n        if (!query && results.length === 0) {\r\n            virtualdom_1.VirtualDOM.render(null, contentNode);\r\n            return;\r\n        }\r\n        // If the is a query but no results, render the empty message.\r\n        if (query && results.length === 0) {\r\n            var content_1 = this.renderer.renderEmptyMessage({ query: query });\r\n            virtualdom_1.VirtualDOM.render(content_1, contentNode);\r\n            return;\r\n        }\r\n        // Create the render content for the search results.\r\n        var renderer = this.renderer;\r\n        var activeIndex = this._activeIndex;\r\n        var content = new Array(results.length);\r\n        for (var i = 0, n = results.length; i < n; ++i) {\r\n            var result = results[i];\r\n            if (result.type === 'header') {\r\n                var indices = result.indices;\r\n                var category = result.category;\r\n                content[i] = renderer.renderHeader({ category: category, indices: indices });\r\n            }\r\n            else {\r\n                var item = result.item;\r\n                var indices = result.indices;\r\n                var active = i === activeIndex;\r\n                content[i] = renderer.renderItem({ item: item, indices: indices, active: active });\r\n            }\r\n        }\r\n        // Render the search result content.\r\n        virtualdom_1.VirtualDOM.render(content, contentNode);\r\n        // Adjust the scroll position as needed.\r\n        if (activeIndex < 0 || activeIndex >= results.length) {\r\n            contentNode.scrollTop = 0;\r\n        }\r\n        else {\r\n            var element = contentNode.children[activeIndex];\r\n            domutils_1.ElementExt.scrollIntoViewIfNeeded(contentNode, element);\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'click'` event for the command palette.\r\n     */\r\n    CommandPalette.prototype._evtClick = function (event) {\r\n        // Bail if the click is not the left button.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Find the index of the item which was clicked.\r\n        var index = algorithm_1.ArrayExt.findFirstIndex(this.contentNode.children, function (node) {\r\n            return node.contains(event.target);\r\n        });\r\n        // Bail if the click was not on an item.\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        // Kill the event when a content item is clicked.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Execute the item if possible.\r\n        this._execute(index);\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the command palette.\r\n     */\r\n    CommandPalette.prototype._evtKeyDown = function (event) {\r\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n            return;\r\n        }\r\n        switch (event.keyCode) {\r\n            case 13:\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                this._execute(this._activeIndex);\r\n                break;\r\n            case 38:\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                this._activatePreviousItem();\r\n                break;\r\n            case 40:\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                this._activateNextItem();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Activate the next enabled command item.\r\n     */\r\n    CommandPalette.prototype._activateNextItem = function () {\r\n        // Bail if there are no search results.\r\n        if (!this._results || this._results.length === 0) {\r\n            return;\r\n        }\r\n        // Find the next enabled item index.\r\n        var ai = this._activeIndex;\r\n        var n = this._results.length;\r\n        var start = ai < n - 1 ? ai + 1 : 0;\r\n        var stop = start === 0 ? n - 1 : start - 1;\r\n        this._activeIndex = algorithm_1.ArrayExt.findFirstIndex(this._results, Private.canActivate, start, stop);\r\n        // Schedule an update of the items.\r\n        this.update();\r\n    };\r\n    /**\r\n     * Activate the previous enabled command item.\r\n     */\r\n    CommandPalette.prototype._activatePreviousItem = function () {\r\n        // Bail if there are no search results.\r\n        if (!this._results || this._results.length === 0) {\r\n            return;\r\n        }\r\n        // Find the previous enabled item index.\r\n        var ai = this._activeIndex;\r\n        var n = this._results.length;\r\n        var start = ai <= 0 ? n - 1 : ai - 1;\r\n        var stop = start === n - 1 ? 0 : start + 1;\r\n        this._activeIndex = algorithm_1.ArrayExt.findLastIndex(this._results, Private.canActivate, start, stop);\r\n        // Schedule an update of the items.\r\n        this.update();\r\n    };\r\n    /**\r\n     * Execute the command item at the given index, if possible.\r\n     */\r\n    CommandPalette.prototype._execute = function (index) {\r\n        // Bail if there are no search results.\r\n        if (!this._results) {\r\n            return;\r\n        }\r\n        // Bail if the index is out of range.\r\n        var part = this._results[index];\r\n        if (!part) {\r\n            return;\r\n        }\r\n        // Update the search text if the item is a header.\r\n        if (part.type === 'header') {\r\n            var input = this.inputNode;\r\n            input.value = part.category.toLowerCase() + \" \";\r\n            input.focus();\r\n            this.refresh();\r\n            return;\r\n        }\r\n        // Bail if item is not enabled.\r\n        if (!part.item.isEnabled) {\r\n            return;\r\n        }\r\n        // Execute the item.\r\n        this.commands.execute(part.item.command, part.item.args);\r\n        // Clear the query text.\r\n        this.inputNode.value = '';\r\n        // Refresh the search results.\r\n        this.refresh();\r\n    };\r\n    /**\r\n     * Toggle the focused modifier based on the input node focus state.\r\n     */\r\n    CommandPalette.prototype._toggleFocused = function () {\r\n        var focused = document.activeElement === this.inputNode;\r\n        this.toggleClass('p-mod-focused', focused);\r\n    };\r\n    /**\r\n     * A signal handler for generic command changes.\r\n     */\r\n    CommandPalette.prototype._onGenericChange = function () {\r\n        this.refresh();\r\n    };\r\n    return CommandPalette;\r\n}(widget_1.Widget));\r\nexports.CommandPalette = CommandPalette;\r\n/**\r\n * The namespace for the `CommandPalette` class statics.\r\n */\r\n(function (CommandPalette) {\r\n    /**\r\n     * The default implementation of `IRenderer`.\r\n     */\r\n    var Renderer = (function () {\r\n        function Renderer() {\r\n        }\r\n        /**\r\n         * Render the virtual element for a command palette header.\r\n         *\r\n         * @param data - The data to use for rendering the header.\r\n         *\r\n         * @returns A virtual element representing the header.\r\n         */\r\n        Renderer.prototype.renderHeader = function (data) {\r\n            var content = this.formatHeader(data);\r\n            return virtualdom_1.h.li({ className: 'p-CommandPalette-header' }, content);\r\n        };\r\n        /**\r\n         * Render the virtual element for a command palette item.\r\n         *\r\n         * @param data - The data to use for rendering the item.\r\n         *\r\n         * @returns A virtual element representing the item.\r\n         */\r\n        Renderer.prototype.renderItem = function (data) {\r\n            var className = this.createItemClass(data);\r\n            var dataset = this.createItemDataset(data);\r\n            return (virtualdom_1.h.li({ className: className, dataset: dataset }, this.renderItemIcon(data), this.renderItemContent(data), this.renderItemShortcut(data)));\r\n        };\r\n        /**\r\n         * Render the empty results message for a command palette.\r\n         *\r\n         * @param data - The data to use for rendering the message.\r\n         *\r\n         * @returns A virtual element representing the message.\r\n         */\r\n        Renderer.prototype.renderEmptyMessage = function (data) {\r\n            var content = this.formatEmptyMessage(data);\r\n            return virtualdom_1.h.li({ className: 'p-CommandPalette-emptyMessage' }, content);\r\n        };\r\n        /**\r\n         * Render the icon for a command palette item.\r\n         *\r\n         * @param data - The data to use for rendering the icon.\r\n         *\r\n         * @returns A virtual element representing the icon.\r\n         */\r\n        Renderer.prototype.renderItemIcon = function (data) {\r\n            var className = this.createIconClass(data);\r\n            return virtualdom_1.h.div({ className: className }, data.item.iconLabel);\r\n        };\r\n        /**\r\n         * Render the content for a command palette item.\r\n         *\r\n         * @param data - The data to use for rendering the content.\r\n         *\r\n         * @returns A virtual element representing the content.\r\n         */\r\n        Renderer.prototype.renderItemContent = function (data) {\r\n            return (virtualdom_1.h.div({ className: 'p-CommandPalette-itemContent' }, this.renderItemLabel(data), this.renderItemCaption(data)));\r\n        };\r\n        /**\r\n         * Render the label for a command palette item.\r\n         *\r\n         * @param data - The data to use for rendering the label.\r\n         *\r\n         * @returns A virtual element representing the label.\r\n         */\r\n        Renderer.prototype.renderItemLabel = function (data) {\r\n            var content = this.formatItemLabel(data);\r\n            return virtualdom_1.h.div({ className: 'p-CommandPalette-itemLabel' }, content);\r\n        };\r\n        /**\r\n         * Render the caption for a command palette item.\r\n         *\r\n         * @param data - The data to use for rendering the caption.\r\n         *\r\n         * @returns A virtual element representing the caption.\r\n         */\r\n        Renderer.prototype.renderItemCaption = function (data) {\r\n            var content = this.formatItemCaption(data);\r\n            return virtualdom_1.h.div({ className: 'p-CommandPalette-itemCaption' }, content);\r\n        };\r\n        /**\r\n         * Render the shortcut for a command palette item.\r\n         *\r\n         * @param data - The data to use for rendering the shortcut.\r\n         *\r\n         * @returns A virtual element representing the shortcut.\r\n         */\r\n        Renderer.prototype.renderItemShortcut = function (data) {\r\n            var content = this.formatItemShortcut(data);\r\n            return virtualdom_1.h.div({ className: 'p-CommandPalette-itemShortcut' }, content);\r\n        };\r\n        /**\r\n         * Create the class name for the command palette item.\r\n         *\r\n         * @param data - The data to use for the class name.\r\n         *\r\n         * @returns The full class name for the command palette item.\r\n         */\r\n        Renderer.prototype.createItemClass = function (data) {\r\n            // Set up the initial class name.\r\n            var name = 'p-CommandPalette-item';\r\n            // Add the boolean state classes.\r\n            if (!data.item.isEnabled) {\r\n                name += ' p-mod-disabled';\r\n            }\r\n            if (data.item.isToggled) {\r\n                name += ' p-mod-toggled';\r\n            }\r\n            if (data.active) {\r\n                name += ' p-mod-active';\r\n            }\r\n            // Add the extra class.\r\n            var extra = data.item.className;\r\n            if (extra) {\r\n                name += \" \" + extra;\r\n            }\r\n            // Return the complete class name.\r\n            return name;\r\n        };\r\n        /**\r\n         * Create the dataset for the command palette item.\r\n         *\r\n         * @param data - The data to use for creating the dataset.\r\n         *\r\n         * @returns The dataset for the command palette item.\r\n         */\r\n        Renderer.prototype.createItemDataset = function (data) {\r\n            return __assign({}, data.item.dataset, { command: data.item.command });\r\n        };\r\n        /**\r\n         * Create the class name for the command item icon.\r\n         *\r\n         * @param data - The data to use for the class name.\r\n         *\r\n         * @returns The full class name for the item icon.\r\n         */\r\n        Renderer.prototype.createIconClass = function (data) {\r\n            var name = 'p-CommandPalette-itemIcon';\r\n            var extra = data.item.iconClass;\r\n            return extra ? name + \" \" + extra : name;\r\n        };\r\n        /**\r\n         * Create the render content for the header node.\r\n         *\r\n         * @param data - The data to use for the header content.\r\n         *\r\n         * @returns The content to add to the header node.\r\n         */\r\n        Renderer.prototype.formatHeader = function (data) {\r\n            if (!data.indices || data.indices.length === 0) {\r\n                return data.category;\r\n            }\r\n            return algorithm_1.StringExt.highlight(data.category, data.indices, virtualdom_1.h.mark);\r\n        };\r\n        /**\r\n         * Create the render content for the empty message node.\r\n         *\r\n         * @param data - The data to use for the empty message content.\r\n         *\r\n         * @returns The content to add to the empty message node.\r\n         */\r\n        Renderer.prototype.formatEmptyMessage = function (data) {\r\n            return \"No commands found that match '\" + data.query + \"'\";\r\n        };\r\n        /**\r\n         * Create the render content for the item shortcut node.\r\n         *\r\n         * @param data - The data to use for the shortcut content.\r\n         *\r\n         * @returns The content to add to the shortcut node.\r\n         */\r\n        Renderer.prototype.formatItemShortcut = function (data) {\r\n            var kb = data.item.keyBinding;\r\n            return kb ? kb.keys.map(Private.formatKeystroke).join(', ') : null;\r\n        };\r\n        /**\r\n         * Create the render content for the item label node.\r\n         *\r\n         * @param data - The data to use for the label content.\r\n         *\r\n         * @returns The content to add to the label node.\r\n         */\r\n        Renderer.prototype.formatItemLabel = function (data) {\r\n            if (!data.indices || data.indices.length === 0) {\r\n                return data.item.label;\r\n            }\r\n            return algorithm_1.StringExt.highlight(data.item.label, data.indices, virtualdom_1.h.mark);\r\n        };\r\n        /**\r\n         * Create the render content for the item caption node.\r\n         *\r\n         * @param data - The data to use for the caption content.\r\n         *\r\n         * @returns The content to add to the caption node.\r\n         */\r\n        Renderer.prototype.formatItemCaption = function (data) {\r\n            return data.item.caption;\r\n        };\r\n        return Renderer;\r\n    }());\r\n    CommandPalette.Renderer = Renderer;\r\n    /**\r\n     * The default `Renderer` instance.\r\n     */\r\n    CommandPalette.defaultRenderer = new Renderer();\r\n})(CommandPalette = exports.CommandPalette || (exports.CommandPalette = {}));\r\nexports.CommandPalette = CommandPalette;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create the DOM node for a command palette.\r\n     */\r\n    function createNode() {\r\n        var node = document.createElement('div');\r\n        var search = document.createElement('div');\r\n        var wrapper = document.createElement('div');\r\n        var input = document.createElement('input');\r\n        var content = document.createElement('ul');\r\n        search.className = 'p-CommandPalette-search';\r\n        wrapper.className = 'p-CommandPalette-wrapper';\r\n        input.className = 'p-CommandPalette-input';\r\n        content.className = 'p-CommandPalette-content';\r\n        input.spellcheck = false;\r\n        wrapper.appendChild(input);\r\n        search.appendChild(wrapper);\r\n        node.appendChild(search);\r\n        node.appendChild(content);\r\n        return node;\r\n    }\r\n    Private.createNode = createNode;\r\n    /**\r\n     * Create a new command item from a command registry and options.\r\n     */\r\n    function createItem(commands, options) {\r\n        return new CommandItem(commands, options);\r\n    }\r\n    Private.createItem = createItem;\r\n    /**\r\n     * Format a keystroke for display on the local system.\r\n     */\r\n    function formatKeystroke(keystroke) {\r\n        var mods = '';\r\n        var parts = commands_1.CommandRegistry.parseKeystroke(keystroke);\r\n        if (domutils_1.Platform.IS_MAC) {\r\n            if (parts.ctrl) {\r\n                mods += '\\u2303 ';\r\n            }\r\n            if (parts.alt) {\r\n                mods += '\\u2325 ';\r\n            }\r\n            if (parts.shift) {\r\n                mods += '\\u21E7 ';\r\n            }\r\n            if (parts.cmd) {\r\n                mods += '\\u2318 ';\r\n            }\r\n        }\r\n        else {\r\n            if (parts.ctrl) {\r\n                mods += 'Ctrl+';\r\n            }\r\n            if (parts.alt) {\r\n                mods += 'Alt+';\r\n            }\r\n            if (parts.shift) {\r\n                mods += 'Shift+';\r\n            }\r\n        }\r\n        return mods + parts.key;\r\n    }\r\n    Private.formatKeystroke = formatKeystroke;\r\n    /**\r\n     * Search an array of command items for fuzzy matches.\r\n     */\r\n    function search(items, query) {\r\n        // Fuzzy match the items for the query.\r\n        var scores = matchItems(items, query);\r\n        // Sort the items based on their score.\r\n        scores.sort(scoreCmp);\r\n        // Create the results for the search.\r\n        return createResults(scores);\r\n    }\r\n    Private.search = search;\r\n    /**\r\n     * Test whether a result item can be activated.\r\n     */\r\n    function canActivate(result) {\r\n        return result.type === 'item' && result.item.isEnabled;\r\n    }\r\n    Private.canActivate = canActivate;\r\n    /**\r\n     * Normalize a category for a command item.\r\n     */\r\n    function normalizeCategory(category) {\r\n        return category.trim().replace(/\\s+/g, ' ');\r\n    }\r\n    /**\r\n     * Normalize the query text for a fuzzy search.\r\n     */\r\n    function normalizeQuery(text) {\r\n        return text.replace(/\\s+/g, '').toLowerCase();\r\n    }\r\n    /**\r\n     * Perform a fuzzy match on an array of command items.\r\n     */\r\n    function matchItems(items, query) {\r\n        // Normalize the query text to lower case with no whitespace.\r\n        query = normalizeQuery(query);\r\n        // Create the array to hold the scores.\r\n        var scores = [];\r\n        // Iterate over the items and match against the query.\r\n        for (var i = 0, n = items.length; i < n; ++i) {\r\n            // Ignore items which are not visible.\r\n            var item = items[i];\r\n            if (!item.isVisible) {\r\n                continue;\r\n            }\r\n            // If the query is empty, all items are matched by default.\r\n            if (!query) {\r\n                scores.push({\r\n                    matchType: 3 /* Default */,\r\n                    categoryIndices: null,\r\n                    labelIndices: null,\r\n                    score: 0, item: item\r\n                });\r\n                continue;\r\n            }\r\n            // Run the fuzzy search for the item and query.\r\n            var score = fuzzySearch(item, query);\r\n            // Ignore the item if it is not a match.\r\n            if (!score) {\r\n                continue;\r\n            }\r\n            // Penalize disabled items.\r\n            // TODO - push disabled items all the way down in sort cmp?\r\n            if (!item.isEnabled) {\r\n                score.score += 1000;\r\n            }\r\n            // Add the score to the results.\r\n            scores.push(score);\r\n        }\r\n        // Return the final array of scores.\r\n        return scores;\r\n    }\r\n    /**\r\n     * Perform a fuzzy search on a single command item.\r\n     */\r\n    function fuzzySearch(item, query) {\r\n        // Create the source text to be searched.\r\n        var category = item.category.toLowerCase();\r\n        var label = item.label.toLowerCase();\r\n        var source = category + \" \" + label;\r\n        // Set up the match score and indices array.\r\n        var score = Infinity;\r\n        var indices = null;\r\n        // The regex for search word boundaries\r\n        var rgx = /\\b\\w/g;\r\n        // Search the source by word boundary.\r\n        while (true) {\r\n            // Find the next word boundary in the source.\r\n            var rgxMatch = rgx.exec(source);\r\n            // Break if there is no more source context.\r\n            if (!rgxMatch) {\r\n                break;\r\n            }\r\n            // Run the string match on the relevant substring.\r\n            var match = algorithm_1.StringExt.matchSumOfDeltas(source, query, rgxMatch.index);\r\n            // Break if there is no match.\r\n            if (!match) {\r\n                break;\r\n            }\r\n            // Update the match if the score is better.\r\n            if (match && match.score <= score) {\r\n                score = match.score;\r\n                indices = match.indices;\r\n            }\r\n        }\r\n        // Bail if there was no match.\r\n        if (!indices || score === Infinity) {\r\n            return null;\r\n        }\r\n        // Compute the pivot index between category and label text.\r\n        var pivot = category.length + 1;\r\n        // Find the slice index to separate matched indices.\r\n        var j = algorithm_1.ArrayExt.lowerBound(indices, pivot, function (a, b) { return a - b; });\r\n        // Extract the matched category and label indices.\r\n        var categoryIndices = indices.slice(0, j);\r\n        var labelIndices = indices.slice(j);\r\n        // Adjust the label indices for the pivot offset.\r\n        for (var i = 0, n = labelIndices.length; i < n; ++i) {\r\n            labelIndices[i] -= pivot;\r\n        }\r\n        // Handle a pure label match.\r\n        if (categoryIndices.length === 0) {\r\n            return {\r\n                matchType: 0 /* Label */,\r\n                categoryIndices: null,\r\n                labelIndices: labelIndices,\r\n                score: score, item: item\r\n            };\r\n        }\r\n        // Handle a pure category match.\r\n        if (labelIndices.length === 0) {\r\n            return {\r\n                matchType: 1 /* Category */,\r\n                categoryIndices: categoryIndices,\r\n                labelIndices: null,\r\n                score: score, item: item\r\n            };\r\n        }\r\n        // Handle a split match.\r\n        return {\r\n            matchType: 2 /* Split */,\r\n            categoryIndices: categoryIndices,\r\n            labelIndices: labelIndices,\r\n            score: score, item: item\r\n        };\r\n    }\r\n    /**\r\n     * A sort comparison function for a match score.\r\n     */\r\n    function scoreCmp(a, b) {\r\n        // First compare based on the match type\r\n        var m1 = a.matchType - b.matchType;\r\n        if (m1 !== 0) {\r\n            return m1;\r\n        }\r\n        // Otherwise, compare based on the match score.\r\n        var d1 = a.score - b.score;\r\n        if (d1 !== 0) {\r\n            return d1;\r\n        }\r\n        // Find the match index based on the match type.\r\n        var i1 = 0;\r\n        var i2 = 0;\r\n        switch (a.matchType) {\r\n            case 0 /* Label */:\r\n                i1 = a.labelIndices[0];\r\n                i2 = b.labelIndices[0];\r\n                break;\r\n            case 1 /* Category */:\r\n            case 2 /* Split */:\r\n                i1 = a.categoryIndices[0];\r\n                i2 = b.categoryIndices[0];\r\n                break;\r\n        }\r\n        // Compare based on the match index.\r\n        if (i1 !== i2) {\r\n            return i1 - i2;\r\n        }\r\n        // Otherwise, compare by category.\r\n        var d2 = a.item.category.localeCompare(b.item.category);\r\n        if (d2 !== 0) {\r\n            return d2;\r\n        }\r\n        // Otherwise, compare by rank.\r\n        var r1 = a.item.rank;\r\n        var r2 = b.item.rank;\r\n        if (r1 !== r2) {\r\n            return r1 < r2 ? -1 : 1; // Infinity safe\r\n        }\r\n        // Finally, compare by label.\r\n        return a.item.label.localeCompare(b.item.label);\r\n    }\r\n    /**\r\n     * Create the results from an array of sorted scores.\r\n     */\r\n    function createResults(scores) {\r\n        // Set up an array to track which scores have been visited.\r\n        var visited = new Array(scores.length);\r\n        algorithm_1.ArrayExt.fill(visited, false);\r\n        // Set up the search results array.\r\n        var results = [];\r\n        // Iterate over each score in the array.\r\n        for (var i = 0, n = scores.length; i < n; ++i) {\r\n            // Ignore a score which has already been processed.\r\n            if (visited[i]) {\r\n                continue;\r\n            }\r\n            // Extract the current item and indices.\r\n            var _a = scores[i], item = _a.item, categoryIndices = _a.categoryIndices;\r\n            // Extract the category for the current item.\r\n            var category = item.category;\r\n            // Add the header result for the category.\r\n            results.push({ type: 'header', category: category, indices: categoryIndices });\r\n            // Find the rest of the scores with the same category.\r\n            for (var j = i; j < n; ++j) {\r\n                // Ignore a score which has already been processed.\r\n                if (visited[j]) {\r\n                    continue;\r\n                }\r\n                // Extract the data for the current score.\r\n                var _b = scores[j], item_1 = _b.item, labelIndices = _b.labelIndices;\r\n                // Ignore an item with a different category.\r\n                if (item_1.category !== category) {\r\n                    continue;\r\n                }\r\n                // Create the item result for the score.\r\n                results.push({ type: 'item', item: item_1, indices: labelIndices });\r\n                // Mark the score as processed.\r\n                visited[j] = true;\r\n            }\r\n        }\r\n        // Return the final results.\r\n        return results;\r\n    }\r\n    /**\r\n     * A concrete implementation of `CommandPalette.IItem`.\r\n     */\r\n    var CommandItem = (function () {\r\n        /**\r\n         * Construct a new command item.\r\n         */\r\n        function CommandItem(commands, options) {\r\n            this._commands = commands;\r\n            this.category = normalizeCategory(options.category);\r\n            this.command = options.command;\r\n            this.args = options.args || coreutils_1.JSONExt.emptyObject;\r\n            this.rank = options.rank !== undefined ? options.rank : Infinity;\r\n        }\r\n        Object.defineProperty(CommandItem.prototype, \"label\", {\r\n            /**\r\n             * The display label for the command item.\r\n             */\r\n            get: function () {\r\n                return this._commands.label(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"iconClass\", {\r\n            /**\r\n             * The icon class for the command item.\r\n             */\r\n            get: function () {\r\n                return this._commands.iconClass(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"iconLabel\", {\r\n            /**\r\n             * The icon label for the command item.\r\n             */\r\n            get: function () {\r\n                return this._commands.iconLabel(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"caption\", {\r\n            /**\r\n             * The display caption for the command item.\r\n             */\r\n            get: function () {\r\n                return this._commands.caption(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"className\", {\r\n            /**\r\n             * The extra class name for the command item.\r\n             */\r\n            get: function () {\r\n                return this._commands.className(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"dataset\", {\r\n            /**\r\n             * The dataset for the command item.\r\n             */\r\n            get: function () {\r\n                return this._commands.dataset(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"isEnabled\", {\r\n            /**\r\n             * Whether the command item is enabled.\r\n             */\r\n            get: function () {\r\n                return this._commands.isEnabled(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"isToggled\", {\r\n            /**\r\n             * Whether the command item is toggled.\r\n             */\r\n            get: function () {\r\n                return this._commands.isToggled(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"isVisible\", {\r\n            /**\r\n             * Whether the command item is visible.\r\n             */\r\n            get: function () {\r\n                return this._commands.isVisible(this.command, this.args);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(CommandItem.prototype, \"keyBinding\", {\r\n            /**\r\n             * The key binding for the command item.\r\n             */\r\n            get: function () {\r\n                var _a = this, command = _a.command, args = _a.args;\r\n                return algorithm_1.ArrayExt.findLastValue(this._commands.keyBindings, function (kb) {\r\n                    return kb.command === command && coreutils_1.JSONExt.deepEqual(kb.args, args);\r\n                }) || null;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        return CommandItem;\r\n    }());\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar disposable_1 = require(\"@phosphor/disposable\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar menu_1 = require(\"./menu\");\r\n/**\r\n * An object which implements a universal context menu.\r\n *\r\n * #### Notes\r\n * The items shown in the context menu are determined by CSS selector\r\n * matching against the DOM hierarchy at the site of the mouse click.\r\n * This is similar in concept to how keyboard shortcuts are matched\r\n * in the command registry.\r\n */\r\nvar ContextMenu = (function () {\r\n    /**\r\n     * Construct a new context menu.\r\n     *\r\n     * @param options - The options for initializing the menu.\r\n     */\r\n    function ContextMenu(options) {\r\n        this._idTick = 0;\r\n        this._items = [];\r\n        this.menu = new menu_1.Menu(options);\r\n    }\r\n    /**\r\n     * Add an item to the context menu.\r\n     *\r\n     * @param options - The options for creating the item.\r\n     *\r\n     * @returns A disposable which will remove the item from the menu.\r\n     */\r\n    ContextMenu.prototype.addItem = function (options) {\r\n        var _this = this;\r\n        // Create an item from the given options.\r\n        var item = Private.createItem(options, this._idTick++);\r\n        // Add the item to the internal array.\r\n        this._items.push(item);\r\n        // Return a disposable which will remove the item.\r\n        return new disposable_1.DisposableDelegate(function () {\r\n            algorithm_1.ArrayExt.removeFirstOf(_this._items, item);\r\n        });\r\n    };\r\n    /**\r\n     * Open the context menu in response to a `'contextmenu'` event.\r\n     *\r\n     * @param event - The `'contextmenu'` event of interest.\r\n     *\r\n     * @returns `true` if the menu was opened, or `false` if no items\r\n     *   matched the event and the menu was not opened.\r\n     *\r\n     * #### Notes\r\n     * This method will populate the context menu with items which match\r\n     * the propagation path of the event, then open the menu at the mouse\r\n     * position indicated by the event.\r\n     */\r\n    ContextMenu.prototype.open = function (event) {\r\n        var _this = this;\r\n        // Clear the current contents of the context menu.\r\n        this.menu.clearItems();\r\n        // Bail early if there are no items to match.\r\n        if (this._items.length === 0) {\r\n            return false;\r\n        }\r\n        // Find the matching items for the event.\r\n        var items = Private.matchItems(this._items, event);\r\n        // Bail if there are no matching items.\r\n        if (!items || items.length === 0) {\r\n            return false;\r\n        }\r\n        // Add the filtered items to the menu.\r\n        algorithm_1.each(items, function (item) { _this.menu.addItem(item); });\r\n        // Open the context menu at the current mouse position.\r\n        this.menu.open(event.clientX, event.clientY);\r\n        // Indicate success.\r\n        return true;\r\n    };\r\n    return ContextMenu;\r\n}());\r\nexports.ContextMenu = ContextMenu;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create a normalized context menu item from an options object.\r\n     */\r\n    function createItem(options, id) {\r\n        var selector = validateSelector(options.selector);\r\n        var rank = options.rank !== undefined ? options.rank : Infinity;\r\n        return __assign({}, options, { selector: selector, rank: rank, id: id });\r\n    }\r\n    Private.createItem = createItem;\r\n    /**\r\n     * Find the items which match a context menu event.\r\n     *\r\n     * The results are sorted by DOM level, specificity, and rank.\r\n     */\r\n    function matchItems(items, event) {\r\n        // Look up the target of the event.\r\n        var target = event.target;\r\n        // Bail if there is no target.\r\n        if (!target) {\r\n            return null;\r\n        }\r\n        // Look up the current target of the event.\r\n        var currentTarget = event.currentTarget;\r\n        // Bail if there is no current target.\r\n        if (!currentTarget) {\r\n            return null;\r\n        }\r\n        // There are some third party libraries that cause the `target` to\r\n        // be detached from the DOM before Phosphor can process the event.\r\n        // If that happens, search for a new target node by point. If that\r\n        // node is still dangling, bail.\r\n        if (!currentTarget.contains(target)) {\r\n            target = document.elementFromPoint(event.clientX, event.clientY);\r\n            if (!target || !currentTarget.contains(target)) {\r\n                return null;\r\n            }\r\n        }\r\n        // Set up the result array.\r\n        var result = [];\r\n        // Copy the items array to allow in-place modification.\r\n        var availableItems = items.slice();\r\n        // Walk up the DOM hierarchy searching for matches.\r\n        while (target !== null) {\r\n            // Set up the match array for this DOM level.\r\n            var matches = [];\r\n            // Search the remaining items for matches.\r\n            for (var i = 0, n = availableItems.length; i < n; ++i) {\r\n                // Fetch the item.\r\n                var item = availableItems[i];\r\n                // Skip items which are already consumed.\r\n                if (!item) {\r\n                    continue;\r\n                }\r\n                // Skip items which do not match the element.\r\n                if (!domutils_1.Selector.matches(target, item.selector)) {\r\n                    continue;\r\n                }\r\n                // Add the matched item to the result for this DOM level.\r\n                matches.push(item);\r\n                // Mark the item as consumed.\r\n                availableItems[i] = null;\r\n            }\r\n            // Sort the matches for this level and add them to the results.\r\n            if (matches.length !== 0) {\r\n                matches.sort(itemCmp);\r\n                result.push.apply(result, matches);\r\n            }\r\n            // Stop searching at the limits of the DOM range.\r\n            if (target === currentTarget) {\r\n                break;\r\n            }\r\n            // Step to the parent DOM level.\r\n            target = target.parentElement;\r\n        }\r\n        // Return the matched and sorted results.\r\n        return result;\r\n    }\r\n    Private.matchItems = matchItems;\r\n    /**\r\n     * Validate the selector for a menu item.\r\n     *\r\n     * This returns the validated selector, or throws if the selector is\r\n     * invalid or contains commas.\r\n     */\r\n    function validateSelector(selector) {\r\n        if (selector.indexOf(',') !== -1) {\r\n            throw new Error(\"Selector cannot contain commas: \" + selector);\r\n        }\r\n        if (!domutils_1.Selector.isValid(selector)) {\r\n            throw new Error(\"Invalid selector: \" + selector);\r\n        }\r\n        return selector;\r\n    }\r\n    /**\r\n     * A sort comparison function for a context menu item.\r\n     */\r\n    function itemCmp(a, b) {\r\n        // Sort first based on selector specificity.\r\n        var s1 = domutils_1.Selector.calculateSpecificity(a.selector);\r\n        var s2 = domutils_1.Selector.calculateSpecificity(b.selector);\r\n        if (s1 !== s2) {\r\n            return s2 - s1;\r\n        }\r\n        // If specificities are equal, sort based on rank.\r\n        var r1 = a.rank;\r\n        var r2 = b.rank;\r\n        if (r1 !== r2) {\r\n            return r1 < r2 ? -1 : 1; // Infinity-safe\r\n        }\r\n        // When all else fails, sort by item id.\r\n        return a.id - b.id;\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar boxengine_1 = require(\"./boxengine\");\r\nvar layout_1 = require(\"./layout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A layout which provides a flexible docking arrangement.\r\n *\r\n * #### Notes\r\n * The consumer of this layout is repsonsible for handling all signals\r\n * from the generated tab bars and managing the visibility of widgets\r\n * and tab bars as needed.\r\n */\r\nvar DockLayout = (function (_super) {\r\n    __extends(DockLayout, _super);\r\n    /**\r\n     * Construct a new dock layout.\r\n     *\r\n     * @param options - The options for initializing the layout.\r\n     */\r\n    function DockLayout(options) {\r\n        var _this = _super.call(this) || this;\r\n        _this._spacing = 4;\r\n        _this._dirty = false;\r\n        _this._root = null;\r\n        _this._box = null;\r\n        _this._items = new Map();\r\n        _this.renderer = options.renderer;\r\n        if (options.spacing !== undefined) {\r\n            _this._spacing = Private.clampSpacing(options.spacing);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     *\r\n     * #### Notes\r\n     * This will clear and dispose all widgets in the layout.\r\n     */\r\n    DockLayout.prototype.dispose = function () {\r\n        // Get an iterator over the widgets in the layout.\r\n        var widgets = this.iter();\r\n        // Dispose of the layout items.\r\n        this._items.forEach(function (item) { item.dispose(); });\r\n        // Clear the layout state before disposing the widgets.\r\n        this._box = null;\r\n        this._root = null;\r\n        this._items.clear();\r\n        // Dispose of the widgets contained in the old layout root.\r\n        algorithm_1.each(widgets, function (widget) { widget.dispose(); });\r\n        // Dispose of the base class.\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(DockLayout.prototype, \"spacing\", {\r\n        /**\r\n         * Get the inter-element spacing for the dock layout.\r\n         */\r\n        get: function () {\r\n            return this._spacing;\r\n        },\r\n        /**\r\n         * Set the inter-element spacing for the dock layout.\r\n         */\r\n        set: function (value) {\r\n            value = Private.clampSpacing(value);\r\n            if (this._spacing === value) {\r\n                return;\r\n            }\r\n            this._spacing = value;\r\n            if (!this.parent) {\r\n                return;\r\n            }\r\n            this.parent.fit();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DockLayout.prototype, \"isEmpty\", {\r\n        /**\r\n         * Whether the dock layout is empty.\r\n         */\r\n        get: function () {\r\n            return this._root === null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create an iterator over all widgets in the layout.\r\n     *\r\n     * @returns A new iterator over the widgets in the layout.\r\n     *\r\n     * #### Notes\r\n     * This iterator includes the generated tab bars.\r\n     */\r\n    DockLayout.prototype.iter = function () {\r\n        return this._root ? this._root.iterAllWidgets() : algorithm_1.empty();\r\n    };\r\n    /**\r\n     * Create an iterator over the user widgets in the layout.\r\n     *\r\n     * @returns A new iterator over the user widgets in the layout.\r\n     *\r\n     * #### Notes\r\n     * This iterator does not include the generated tab bars.\r\n     */\r\n    DockLayout.prototype.widgets = function () {\r\n        return this._root ? this._root.iterUserWidgets() : algorithm_1.empty();\r\n    };\r\n    /**\r\n     * Create an iterator over the selected widgets in the layout.\r\n     *\r\n     * @returns A new iterator over the selected user widgets.\r\n     *\r\n     * #### Notes\r\n     * This iterator yields the widgets corresponding to the current tab\r\n     * of each tab bar in the layout.\r\n     */\r\n    DockLayout.prototype.selectedWidgets = function () {\r\n        return this._root ? this._root.iterSelectedWidgets() : algorithm_1.empty();\r\n    };\r\n    /**\r\n     * Create an iterator over the tab bars in the layout.\r\n     *\r\n     * @returns A new iterator over the tab bars in the layout.\r\n     *\r\n     * #### Notes\r\n     * This iterator does not include the user widgets.\r\n     */\r\n    DockLayout.prototype.tabBars = function () {\r\n        return this._root ? this._root.iterTabBars() : algorithm_1.empty();\r\n    };\r\n    /**\r\n     * Create an iterator over the handles in the layout.\r\n     *\r\n     * @returns A new iterator over the handles in the layout.\r\n     */\r\n    DockLayout.prototype.handles = function () {\r\n        return this._root ? this._root.iterHandles() : algorithm_1.empty();\r\n    };\r\n    /**\r\n     * Move a handle to the given offset position.\r\n     *\r\n     * @param handle - The handle to move.\r\n     *\r\n     * @param offsetX - The desired offset X position of the handle.\r\n     *\r\n     * @param offsetY - The desired offset Y position of the handle.\r\n     *\r\n     * #### Notes\r\n     * If the given handle is not contained in the layout, this is no-op.\r\n     *\r\n     * The handle will be moved as close as possible to the desired\r\n     * position without violating any of the layout constraints.\r\n     *\r\n     * Only one of the coordinates is used depending on the orientation\r\n     * of the handle. This method accepts both coordinates to make it\r\n     * easy to invoke from a mouse move event without needing to know\r\n     * the handle orientation.\r\n     */\r\n    DockLayout.prototype.moveHandle = function (handle, offsetX, offsetY) {\r\n        // Bail early if there is no root or if the handle is hidden.\r\n        if (!this._root || handle.classList.contains('p-mod-hidden')) {\r\n            return;\r\n        }\r\n        // Lookup the split node for the handle.\r\n        var data = this._root.findSplitNode(handle);\r\n        if (!data) {\r\n            return;\r\n        }\r\n        // Compute the desired delta movement for the handle.\r\n        var delta;\r\n        if (data.node.orientation === 'horizontal') {\r\n            delta = offsetX - handle.offsetLeft;\r\n        }\r\n        else {\r\n            delta = offsetY - handle.offsetTop;\r\n        }\r\n        // Bail if there is no handle movement.\r\n        if (delta === 0) {\r\n            return;\r\n        }\r\n        // Prevent sibling resizing unless needed.\r\n        data.node.holdSizes();\r\n        // Adjust the sizers to reflect the handle movement.\r\n        boxengine_1.BoxEngine.adjust(data.node.sizers, data.index, delta);\r\n        // Update the layout of the widgets.\r\n        if (this.parent) {\r\n            this.parent.update();\r\n        }\r\n    };\r\n    /**\r\n     * Save the current configuration of the dock layout.\r\n     *\r\n     * @returns A new config object for the current layout state.\r\n     *\r\n     * #### Notes\r\n     * The return value can be provided to the `restoreLayout` method\r\n     * in order to restore the layout to its current configuration.\r\n     */\r\n    DockLayout.prototype.saveLayout = function () {\r\n        // Bail early if there is no root.\r\n        if (!this._root) {\r\n            return { main: null };\r\n        }\r\n        // Hold the current sizes in the layout tree.\r\n        this._root.holdAllSizes();\r\n        // Return the layout config.\r\n        return { main: this._root.createConfig() };\r\n    };\r\n    /**\r\n     * Restore the layout to a previously saved configuration.\r\n     *\r\n     * @param config - The layout configuration to restore.\r\n     *\r\n     * #### Notes\r\n     * Widgets which currently belong to the layout but which are not\r\n     * contained in the config will be unparented.\r\n     */\r\n    DockLayout.prototype.restoreLayout = function (config) {\r\n        var _this = this;\r\n        // Create the widget set for validating the config.\r\n        var widgetSet = new Set();\r\n        // Normalize the main area config and collect the widgets.\r\n        var mainConfig;\r\n        if (config.main) {\r\n            mainConfig = Private.normalizeAreaConfig(config.main, widgetSet);\r\n        }\r\n        else {\r\n            mainConfig = null;\r\n        }\r\n        // Create iterators over the old content.\r\n        var oldWidgets = this.widgets();\r\n        var oldTabBars = this.tabBars();\r\n        var oldHandles = this.handles();\r\n        // Clear the root before removing the old content.\r\n        this._root = null;\r\n        // Unparent the old widgets which are not in the new config.\r\n        algorithm_1.each(oldWidgets, function (widget) {\r\n            if (!widgetSet.has(widget)) {\r\n                widget.parent = null;\r\n            }\r\n        });\r\n        // Dispose of the old tab bars.\r\n        algorithm_1.each(oldTabBars, function (tabBar) {\r\n            tabBar.dispose();\r\n        });\r\n        // Remove the old handles.\r\n        algorithm_1.each(oldHandles, function (handle) {\r\n            if (handle.parentNode) {\r\n                handle.parentNode.removeChild(handle);\r\n            }\r\n        });\r\n        // Reparent the new widgets to the current parent.\r\n        widgetSet.forEach(function (widget) {\r\n            widget.parent = _this.parent;\r\n        });\r\n        // Create the root node for the new config.\r\n        if (mainConfig) {\r\n            this._root = Private.realizeAreaConfig(mainConfig, {\r\n                createTabBar: function () { return _this._createTabBar(); },\r\n                createHandle: function () { return _this._createHandle(); }\r\n            });\r\n        }\r\n        else {\r\n            this._root = null;\r\n        }\r\n        // If there is no parent, there is nothing more to do.\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        // Attach the new widgets to the parent.\r\n        widgetSet.forEach(function (widget) {\r\n            _this.attachWidget(widget);\r\n        });\r\n        // Post a fit request to the parent.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Add a widget to the dock layout.\r\n     *\r\n     * @param widget - The widget to add to the dock layout.\r\n     *\r\n     * @param options - The additional options for adding the widget.\r\n     *\r\n     * #### Notes\r\n     * The widget will be moved if it is already contained in the layout.\r\n     *\r\n     * An error will be thrown if the reference widget is invalid.\r\n     */\r\n    DockLayout.prototype.addWidget = function (widget, options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Parse the options.\r\n        var ref = options.ref || null;\r\n        var mode = options.mode || 'tab-after';\r\n        // Find the tab node which holds the reference widget.\r\n        var refNode = null;\r\n        if (this._root && ref) {\r\n            refNode = this._root.findTabNode(ref);\r\n        }\r\n        // Throw an error if the reference widget is invalid.\r\n        if (ref && !refNode) {\r\n            throw new Error('Reference widget is not in the layout.');\r\n        }\r\n        // Reparent the widget to the current layout parent.\r\n        widget.parent = this.parent;\r\n        // Insert the widget according to the insert mode.\r\n        switch (mode) {\r\n            case 'tab-after':\r\n                this._insertTab(widget, ref, refNode, true);\r\n                break;\r\n            case 'tab-before':\r\n                this._insertTab(widget, ref, refNode, false);\r\n                break;\r\n            case 'split-top':\r\n                this._insertSplit(widget, ref, refNode, 'vertical', false);\r\n                break;\r\n            case 'split-left':\r\n                this._insertSplit(widget, ref, refNode, 'horizontal', false);\r\n                break;\r\n            case 'split-right':\r\n                this._insertSplit(widget, ref, refNode, 'horizontal', true);\r\n                break;\r\n            case 'split-bottom':\r\n                this._insertSplit(widget, ref, refNode, 'vertical', true);\r\n                break;\r\n        }\r\n        // Do nothing else if there is no parent widget.\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        // Ensure the widget is attached to the parent widget.\r\n        this.attachWidget(widget);\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Remove a widget from the layout.\r\n     *\r\n     * @param widget - The widget to remove from the layout.\r\n     *\r\n     * #### Notes\r\n     * A widget is automatically removed from the layout when its `parent`\r\n     * is set to `null`. This method should only be invoked directly when\r\n     * removing a widget from a layout which has yet to be installed on a\r\n     * parent widget.\r\n     *\r\n     * This method does *not* modify the widget's `parent`.\r\n     */\r\n    DockLayout.prototype.removeWidget = function (widget) {\r\n        // Remove the widget from its current layout location.\r\n        this._removeWidget(widget);\r\n        // Do nothing else if there is no parent widget.\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        // Detach the widget from the parent widget.\r\n        this.detachWidget(widget);\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Find the tab area which contains the given client position.\r\n     *\r\n     * @param clientX - The client X position of interest.\r\n     *\r\n     * @param clientY - The client Y position of interest.\r\n     *\r\n     * @returns The geometry of the tab area at the given position, or\r\n     *   `null` if there is no tab area at the given position.\r\n     */\r\n    DockLayout.prototype.hitTestTabAreas = function (clientX, clientY) {\r\n        // Bail early if hit testing cannot produce valid results.\r\n        if (!this._root || !this.parent || !this.parent.isVisible) {\r\n            return null;\r\n        }\r\n        // Ensure the parent box sizing data is computed.\r\n        if (!this._box) {\r\n            this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        }\r\n        // Convert from client to local coordinates.\r\n        var rect = this.parent.node.getBoundingClientRect();\r\n        var x = clientX - rect.left - this._box.borderLeft;\r\n        var y = clientY - rect.top - this._box.borderTop;\r\n        // Find the tab layout node at the local position.\r\n        var tabNode = this._root.hitTestTabNodes(x, y);\r\n        // Bail if a tab layout node was not found.\r\n        if (!tabNode) {\r\n            return null;\r\n        }\r\n        // Extract the data from the tab node.\r\n        var tabBar = tabNode.tabBar, top = tabNode.top, left = tabNode.left, width = tabNode.width, height = tabNode.height;\r\n        // Compute the right and bottom edges of the tab area.\r\n        var borderWidth = this._box.borderLeft + this._box.borderRight;\r\n        var borderHeight = this._box.borderTop + this._box.borderBottom;\r\n        var right = rect.width - borderWidth - (left + width);\r\n        var bottom = rect.height - borderHeight - (top + height);\r\n        // Return the hit test results.\r\n        return { tabBar: tabBar, x: x, y: y, top: top, left: left, right: right, bottom: bottom, width: width, height: height };\r\n    };\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    DockLayout.prototype.init = function () {\r\n        var _this = this;\r\n        // Perform superclass initialization.\r\n        _super.prototype.init.call(this);\r\n        // Attach each widget to the parent.\r\n        algorithm_1.each(this, function (widget) { _this.attachWidget(widget); });\r\n        // Attach each handle to the parent.\r\n        algorithm_1.each(this.handles(), function (handle) { _this.parent.node.appendChild(handle); });\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Attach the widget to the layout parent widget.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the widget is already attached.\r\n     */\r\n    DockLayout.prototype.attachWidget = function (widget) {\r\n        // Do nothing if the widget is already attached.\r\n        if (this.parent.node === widget.node.parentNode) {\r\n            return;\r\n        }\r\n        // Create the layout item for the widget.\r\n        this._items.set(widget, new layout_1.LayoutItem(widget));\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Add the widget's node to the parent.\r\n        this.parent.node.appendChild(widget.node);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n    };\r\n    /**\r\n     * Detach the widget from the layout parent widget.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the widget is not attached.\r\n     */\r\n    DockLayout.prototype.detachWidget = function (widget) {\r\n        // Do nothing if the widget is not attached.\r\n        if (this.parent.node !== widget.node.parentNode) {\r\n            return;\r\n        }\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget's node from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        // Send an `'after-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n        // Delete the layout item for the widget.\r\n        var item = this._items.get(widget);\r\n        if (item) {\r\n            this._items.delete(widget);\r\n            item.dispose();\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-show'` message.\r\n     */\r\n    DockLayout.prototype.onBeforeShow = function (msg) {\r\n        _super.prototype.onBeforeShow.call(this, msg);\r\n        this.parent.update();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    DockLayout.prototype.onBeforeAttach = function (msg) {\r\n        _super.prototype.onBeforeAttach.call(this, msg);\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     */\r\n    DockLayout.prototype.onChildShown = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     */\r\n    DockLayout.prototype.onChildHidden = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     */\r\n    DockLayout.prototype.onResize = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(msg.width, msg.height);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    DockLayout.prototype.onUpdateRequest = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(-1, -1);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     */\r\n    DockLayout.prototype.onFitRequest = function (msg) {\r\n        if (this.parent.isAttached) {\r\n            this._fit();\r\n        }\r\n    };\r\n    /**\r\n     * Remove the specified widget from the layout structure.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the widget is not in the layout tree.\r\n     *\r\n     * This does not detach the widget from the parent node.\r\n     */\r\n    DockLayout.prototype._removeWidget = function (widget) {\r\n        // Bail early if there is no layout root.\r\n        if (!this._root) {\r\n            return;\r\n        }\r\n        // Find the tab node which contains the given widget.\r\n        var tabNode = this._root.findTabNode(widget);\r\n        // Bail early if the tab node is not found.\r\n        if (!tabNode) {\r\n            return;\r\n        }\r\n        // If there are multiple tabs, just remove the widget's tab.\r\n        if (tabNode.tabBar.titles.length > 1) {\r\n            tabNode.tabBar.removeTab(widget.title);\r\n            return;\r\n        }\r\n        // Otherwise, the tab node needs to be removed...\r\n        // Dispose the tab bar.\r\n        tabNode.tabBar.dispose();\r\n        // Handle the case where the tab node is the root.\r\n        if (this._root === tabNode) {\r\n            this._root = null;\r\n            return;\r\n        }\r\n        // Otherwise, remove the tab node from its parent...\r\n        // Prevent widget resizing unless needed.\r\n        this._root.holdAllSizes();\r\n        // Clear the parent reference on the tab node.\r\n        var splitNode = tabNode.parent;\r\n        tabNode.parent = null;\r\n        // Remove the tab node from its parent split node.\r\n        var i = algorithm_1.ArrayExt.removeFirstOf(splitNode.children, tabNode);\r\n        var handle = algorithm_1.ArrayExt.removeAt(splitNode.handles, i);\r\n        algorithm_1.ArrayExt.removeAt(splitNode.sizers, i);\r\n        // Remove the handle from its parent DOM node.\r\n        if (handle.parentNode) {\r\n            handle.parentNode.removeChild(handle);\r\n        }\r\n        // If there are multiple children, just update the handles.\r\n        if (splitNode.children.length > 1) {\r\n            splitNode.syncHandles();\r\n            return;\r\n        }\r\n        // Otherwise, the split node also needs to be removed...\r\n        // Clear the parent reference on the split node.\r\n        var maybeParent = splitNode.parent;\r\n        splitNode.parent = null;\r\n        // Lookup the remaining child node and handle.\r\n        var childNode = splitNode.children[0];\r\n        var childHandle = splitNode.handles[0];\r\n        // Clear the split node data.\r\n        splitNode.children.length = 0;\r\n        splitNode.handles.length = 0;\r\n        splitNode.sizers.length = 0;\r\n        // Remove the child handle from its parent node.\r\n        if (childHandle.parentNode) {\r\n            childHandle.parentNode.removeChild(childHandle);\r\n        }\r\n        // Handle the case where the split node is the root.\r\n        if (this._root === splitNode) {\r\n            childNode.parent = null;\r\n            this._root = childNode;\r\n            return;\r\n        }\r\n        // Otherwise, move the child node to the parent node...\r\n        var parentNode = maybeParent;\r\n        // Lookup the index of the split node.\r\n        var j = parentNode.children.indexOf(splitNode);\r\n        // Handle the case where the child node is a tab node.\r\n        if (childNode instanceof Private.TabLayoutNode) {\r\n            childNode.parent = parentNode;\r\n            parentNode.children[j] = childNode;\r\n            return;\r\n        }\r\n        // Remove the split data from the parent.\r\n        var splitHandle = algorithm_1.ArrayExt.removeAt(parentNode.handles, j);\r\n        algorithm_1.ArrayExt.removeAt(parentNode.children, j);\r\n        algorithm_1.ArrayExt.removeAt(parentNode.sizers, j);\r\n        // Remove the handle from its parent node.\r\n        if (splitHandle.parentNode) {\r\n            splitHandle.parentNode.removeChild(splitHandle);\r\n        }\r\n        // The child node and the split parent node will have the same\r\n        // orientation. Merge the grand-children with the parent node.\r\n        for (var i_1 = 0, n = childNode.children.length; i_1 < n; ++i_1) {\r\n            var gChild = childNode.children[i_1];\r\n            var gHandle = childNode.handles[i_1];\r\n            var gSizer = childNode.sizers[i_1];\r\n            algorithm_1.ArrayExt.insert(parentNode.children, j + i_1, gChild);\r\n            algorithm_1.ArrayExt.insert(parentNode.handles, j + i_1, gHandle);\r\n            algorithm_1.ArrayExt.insert(parentNode.sizers, j + i_1, gSizer);\r\n            gChild.parent = parentNode;\r\n        }\r\n        // Clear the child node.\r\n        childNode.children.length = 0;\r\n        childNode.handles.length = 0;\r\n        childNode.sizers.length = 0;\r\n        childNode.parent = null;\r\n        // Sync the handles on the parent node.\r\n        parentNode.syncHandles();\r\n    };\r\n    /**\r\n     * Insert a widget next to an existing tab.\r\n     *\r\n     * #### Notes\r\n     * This does not attach the widget to the parent widget.\r\n     */\r\n    DockLayout.prototype._insertTab = function (widget, ref, refNode, after) {\r\n        // Do nothing if the tab is inserted next to itself.\r\n        if (widget === ref) {\r\n            return;\r\n        }\r\n        // Create the root if it does not exist.\r\n        if (!this._root) {\r\n            var tabNode = new Private.TabLayoutNode(this._createTabBar());\r\n            tabNode.tabBar.addTab(widget.title);\r\n            this._root = tabNode;\r\n            return;\r\n        }\r\n        // Use the first tab node as the ref node if needed.\r\n        if (!refNode) {\r\n            refNode = this._root.findFirstTabNode();\r\n        }\r\n        // If the widget is not contained in the ref node, ensure it is\r\n        // removed from the layout and hidden before being added again.\r\n        if (refNode.tabBar.titles.indexOf(widget.title) === -1) {\r\n            this._removeWidget(widget);\r\n            widget.hide();\r\n        }\r\n        // Lookup the target index for inserting the tab.\r\n        var index;\r\n        if (ref) {\r\n            index = refNode.tabBar.titles.indexOf(ref.title);\r\n        }\r\n        else {\r\n            index = refNode.tabBar.currentIndex;\r\n        }\r\n        // Insert the widget's tab relative to the target index.\r\n        refNode.tabBar.insertTab(index + (after ? 1 : 0), widget.title);\r\n    };\r\n    /**\r\n     * Insert a widget as a new split area.\r\n     *\r\n     * #### Notes\r\n     * This does not attach the widget to the parent widget.\r\n     */\r\n    DockLayout.prototype._insertSplit = function (widget, ref, refNode, orientation, after) {\r\n        // Do nothing if there is no effective split.\r\n        if (widget === ref && refNode && refNode.tabBar.titles.length === 1) {\r\n            return;\r\n        }\r\n        // Ensure the widget is removed from the current layout.\r\n        this._removeWidget(widget);\r\n        // Create the tab layout node to hold the widget.\r\n        var tabNode = new Private.TabLayoutNode(this._createTabBar());\r\n        tabNode.tabBar.addTab(widget.title);\r\n        // Set the root if it does not exist.\r\n        if (!this._root) {\r\n            this._root = tabNode;\r\n            return;\r\n        }\r\n        // If the ref node parent is null, split the root.\r\n        if (!refNode || !refNode.parent) {\r\n            // Ensure the root is split with the correct orientation.\r\n            var root = this._splitRoot(orientation);\r\n            // Determine the insert index for the new tab node.\r\n            var i_2 = after ? root.children.length : 0;\r\n            // Normalize the split node.\r\n            root.normalizeSizes();\r\n            // Create the sizer for new tab node.\r\n            var sizer = Private.createSizer(refNode ? 1 : Private.GOLDEN_RATIO);\r\n            // Insert the tab node sized to the golden ratio.\r\n            algorithm_1.ArrayExt.insert(root.children, i_2, tabNode);\r\n            algorithm_1.ArrayExt.insert(root.sizers, i_2, sizer);\r\n            algorithm_1.ArrayExt.insert(root.handles, i_2, this._createHandle());\r\n            tabNode.parent = root;\r\n            // Re-normalize the split node to maintain the ratios.\r\n            root.normalizeSizes();\r\n            // Finally, synchronize the visibility of the handles.\r\n            root.syncHandles();\r\n            return;\r\n        }\r\n        // Lookup the split node for the ref widget.\r\n        var splitNode = refNode.parent;\r\n        // If the split node already had the correct orientation,\r\n        // the widget can be inserted into the split node directly.\r\n        if (splitNode.orientation === orientation) {\r\n            // Find the index of the ref node.\r\n            var i_3 = splitNode.children.indexOf(refNode);\r\n            // Normalize the split node.\r\n            splitNode.normalizeSizes();\r\n            // Consume half the space for the insert location.\r\n            var s = splitNode.sizers[i_3].sizeHint /= 2;\r\n            // Insert the tab node sized to the other half.\r\n            var j_1 = i_3 + (after ? 1 : 0);\r\n            algorithm_1.ArrayExt.insert(splitNode.children, j_1, tabNode);\r\n            algorithm_1.ArrayExt.insert(splitNode.sizers, j_1, Private.createSizer(s));\r\n            algorithm_1.ArrayExt.insert(splitNode.handles, j_1, this._createHandle());\r\n            tabNode.parent = splitNode;\r\n            // Finally, synchronize the visibility of the handles.\r\n            splitNode.syncHandles();\r\n            return;\r\n        }\r\n        // Remove the ref node from the split node.\r\n        var i = algorithm_1.ArrayExt.removeFirstOf(splitNode.children, refNode);\r\n        // Create a new normalized split node for the children.\r\n        var childNode = new Private.SplitLayoutNode(orientation);\r\n        childNode.normalized = true;\r\n        // Add the ref node sized to half the space.\r\n        childNode.children.push(refNode);\r\n        childNode.sizers.push(Private.createSizer(0.5));\r\n        childNode.handles.push(this._createHandle());\r\n        refNode.parent = childNode;\r\n        // Add the tab node sized to the other half.\r\n        var j = after ? 1 : 0;\r\n        algorithm_1.ArrayExt.insert(childNode.children, j, tabNode);\r\n        algorithm_1.ArrayExt.insert(childNode.sizers, j, Private.createSizer(0.5));\r\n        algorithm_1.ArrayExt.insert(childNode.handles, j, this._createHandle());\r\n        tabNode.parent = childNode;\r\n        // Synchronize the visibility of the handles.\r\n        childNode.syncHandles();\r\n        // Finally, add the new child node to the original split node.\r\n        algorithm_1.ArrayExt.insert(splitNode.children, i, childNode);\r\n        childNode.parent = splitNode;\r\n    };\r\n    /**\r\n     * Ensure the root is a split node with the given orientation.\r\n     */\r\n    DockLayout.prototype._splitRoot = function (orientation) {\r\n        // Bail early if the root already meets the requirements.\r\n        var oldRoot = this._root;\r\n        if (oldRoot instanceof Private.SplitLayoutNode) {\r\n            if (oldRoot.orientation === orientation) {\r\n                return oldRoot;\r\n            }\r\n        }\r\n        // Create a new root node with the specified orientation.\r\n        var newRoot = this._root = new Private.SplitLayoutNode(orientation);\r\n        // Add the old root to the new root.\r\n        if (oldRoot) {\r\n            newRoot.children.push(oldRoot);\r\n            newRoot.sizers.push(Private.createSizer(0));\r\n            newRoot.handles.push(this._createHandle());\r\n            oldRoot.parent = newRoot;\r\n        }\r\n        // Return the new root as a convenience.\r\n        return newRoot;\r\n    };\r\n    /**\r\n     * Fit the layout to the total size required by the widgets.\r\n     */\r\n    DockLayout.prototype._fit = function () {\r\n        // Set up the computed minimum size.\r\n        var minW = 0;\r\n        var minH = 0;\r\n        // Update the size limits for the layout tree.\r\n        if (this._root) {\r\n            var limits = this._root.fit(this._spacing, this._items);\r\n            minW = limits.minWidth;\r\n            minH = limits.minHeight;\r\n        }\r\n        // Update the box sizing and add it to the computed min size.\r\n        var box = this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        minW += box.horizontalSum;\r\n        minH += box.verticalSum;\r\n        // Update the parent's min size constraints.\r\n        var style = this.parent.node.style;\r\n        style.minWidth = minW + \"px\";\r\n        style.minHeight = minH + \"px\";\r\n        // Set the dirty flag to ensure only a single update occurs.\r\n        this._dirty = true;\r\n        // Notify the ancestor that it should fit immediately. This may\r\n        // cause a resize of the parent, fulfilling the required update.\r\n        if (this.parent.parent) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent.parent, widget_1.Widget.Msg.FitRequest);\r\n        }\r\n        // If the dirty flag is still set, the parent was not resized.\r\n        // Trigger the required update on the parent widget immediately.\r\n        if (this._dirty) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widget_1.Widget.Msg.UpdateRequest);\r\n        }\r\n    };\r\n    /**\r\n     * Update the layout position and size of the widgets.\r\n     *\r\n     * The parent offset dimensions should be `-1` if unknown.\r\n     */\r\n    DockLayout.prototype._update = function (offsetWidth, offsetHeight) {\r\n        // Clear the dirty flag to indicate the update occurred.\r\n        this._dirty = false;\r\n        // Bail early if there is no root layout node.\r\n        if (!this._root) {\r\n            return;\r\n        }\r\n        // Measure the parent if the offset dimensions are unknown.\r\n        if (offsetWidth < 0) {\r\n            offsetWidth = this.parent.node.offsetWidth;\r\n        }\r\n        if (offsetHeight < 0) {\r\n            offsetHeight = this.parent.node.offsetHeight;\r\n        }\r\n        // Ensure the parent box sizing data is computed.\r\n        if (!this._box) {\r\n            this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        }\r\n        // Compute the actual layout bounds adjusted for border and padding.\r\n        var x = this._box.paddingTop;\r\n        var y = this._box.paddingLeft;\r\n        var width = offsetWidth - this._box.horizontalSum;\r\n        var height = offsetHeight - this._box.verticalSum;\r\n        // Update the geometry of the layout tree.\r\n        this._root.update(x, y, width, height, this._spacing, this._items);\r\n    };\r\n    /**\r\n     * Create a new tab bar for use by the dock layout.\r\n     *\r\n     * #### Notes\r\n     * The tab bar will be attached to the parent if it exists.\r\n     */\r\n    DockLayout.prototype._createTabBar = function () {\r\n        // Create the tab bar using the renderer.\r\n        var tabBar = this.renderer.createTabBar();\r\n        // Enforce necessary tab bar behavior.\r\n        tabBar.orientation = 'horizontal';\r\n        // Reparent and attach the tab bar to the parent if possible.\r\n        if (this.parent) {\r\n            tabBar.parent = this.parent;\r\n            this.attachWidget(tabBar);\r\n        }\r\n        // Return the initialized tab bar.\r\n        return tabBar;\r\n    };\r\n    /**\r\n     * Create a new handle for the dock layout.\r\n     *\r\n     * #### Notes\r\n     * The handle will be attached to the parent if it exists.\r\n     */\r\n    DockLayout.prototype._createHandle = function () {\r\n        // Create the handle using the renderer.\r\n        var handle = this.renderer.createHandle();\r\n        // Initialize the handle layout behavior.\r\n        var style = handle.style;\r\n        style.position = 'absolute';\r\n        style.top = '0';\r\n        style.left = '0';\r\n        style.width = '0';\r\n        style.height = '0';\r\n        // Attach the handle to the parent if it exists.\r\n        if (this.parent) {\r\n            this.parent.node.appendChild(handle);\r\n        }\r\n        // Return the initialized handle.\r\n        return handle;\r\n    };\r\n    return DockLayout;\r\n}(layout_1.Layout));\r\nexports.DockLayout = DockLayout;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * A fraction used for sizing root panels; ~= `1 / golden_ratio`.\r\n     */\r\n    Private.GOLDEN_RATIO = 0.618;\r\n    /**\r\n     * Clamp a spacing value to an integer >= 0.\r\n     */\r\n    function clampSpacing(value) {\r\n        return Math.max(0, Math.floor(value));\r\n    }\r\n    Private.clampSpacing = clampSpacing;\r\n    /**\r\n     * Create a box sizer with an initial size hint.\r\n     */\r\n    function createSizer(hint) {\r\n        var sizer = new boxengine_1.BoxSizer();\r\n        sizer.sizeHint = hint;\r\n        sizer.size = hint;\r\n        return sizer;\r\n    }\r\n    Private.createSizer = createSizer;\r\n    /**\r\n     * Normalize an area config object and collect the visited widgets.\r\n     */\r\n    function normalizeAreaConfig(config, widgetSet) {\r\n        var result;\r\n        if (config.type === 'tab-area') {\r\n            result = normalizeTabAreaConfig(config, widgetSet);\r\n        }\r\n        else {\r\n            result = normalizeSplitAreaConfig(config, widgetSet);\r\n        }\r\n        return result;\r\n    }\r\n    Private.normalizeAreaConfig = normalizeAreaConfig;\r\n    /**\r\n     * Convert a normalized area config into a layout tree.\r\n     */\r\n    function realizeAreaConfig(config, renderer) {\r\n        var node;\r\n        if (config.type === 'tab-area') {\r\n            node = realizeTabAreaConfig(config, renderer);\r\n        }\r\n        else {\r\n            node = realizeSplitAreaConfig(config, renderer);\r\n        }\r\n        return node;\r\n    }\r\n    Private.realizeAreaConfig = realizeAreaConfig;\r\n    /**\r\n     * A layout node which holds the data for a tabbed area.\r\n     */\r\n    var TabLayoutNode = (function () {\r\n        /**\r\n         * Construct a new tab layout node.\r\n         *\r\n         * @param tabBar - The tab bar to use for the layout node.\r\n         */\r\n        function TabLayoutNode(tabBar) {\r\n            /**\r\n             * The parent of the layout node.\r\n             */\r\n            this.parent = null;\r\n            this._top = 0;\r\n            this._left = 0;\r\n            this._width = 0;\r\n            this._height = 0;\r\n            var tabSizer = new boxengine_1.BoxSizer();\r\n            var widgetSizer = new boxengine_1.BoxSizer();\r\n            tabSizer.stretch = 0;\r\n            widgetSizer.stretch = 1;\r\n            this.tabBar = tabBar;\r\n            this.sizers = [tabSizer, widgetSizer];\r\n        }\r\n        Object.defineProperty(TabLayoutNode.prototype, \"top\", {\r\n            /**\r\n             * The most recent value for the `top` edge of the layout box.\r\n             */\r\n            get: function () {\r\n                return this._top;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TabLayoutNode.prototype, \"left\", {\r\n            /**\r\n             * The most recent value for the `left` edge of the layout box.\r\n             */\r\n            get: function () {\r\n                return this._left;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TabLayoutNode.prototype, \"width\", {\r\n            /**\r\n             * The most recent value for the `width` of the layout box.\r\n             */\r\n            get: function () {\r\n                return this._width;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TabLayoutNode.prototype, \"height\", {\r\n            /**\r\n             * The most recent value for the `height` of the layout box.\r\n             */\r\n            get: function () {\r\n                return this._height;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Create an iterator for all widgets in the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.iterAllWidgets = function () {\r\n            return algorithm_1.chain(algorithm_1.once(this.tabBar), this.iterUserWidgets());\r\n        };\r\n        /**\r\n         * Create an iterator for the user widgets in the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.iterUserWidgets = function () {\r\n            return algorithm_1.map(this.tabBar.titles, function (title) { return title.owner; });\r\n        };\r\n        /**\r\n         * Create an iterator for the selected widgets in the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.iterSelectedWidgets = function () {\r\n            var title = this.tabBar.currentTitle;\r\n            return title ? algorithm_1.once(title.owner) : algorithm_1.empty();\r\n        };\r\n        /**\r\n         * Create an iterator for the tab bars in the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.iterTabBars = function () {\r\n            return algorithm_1.once(this.tabBar);\r\n        };\r\n        /**\r\n         * Create an iterator for the handles in the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.iterHandles = function () {\r\n            return algorithm_1.empty();\r\n        };\r\n        /**\r\n         * Find the tab layout node which contains the given widget.\r\n         */\r\n        TabLayoutNode.prototype.findTabNode = function (widget) {\r\n            return this.tabBar.titles.indexOf(widget.title) !== -1 ? this : null;\r\n        };\r\n        /**\r\n         * Find the split layout node which contains the given handle.\r\n         */\r\n        TabLayoutNode.prototype.findSplitNode = function (handle) {\r\n            return null;\r\n        };\r\n        /**\r\n         * Find the first tab layout node in a layout tree.\r\n         */\r\n        TabLayoutNode.prototype.findFirstTabNode = function () {\r\n            return this;\r\n        };\r\n        /**\r\n         * Find the tab layout node which contains the local point.\r\n         */\r\n        TabLayoutNode.prototype.hitTestTabNodes = function (x, y) {\r\n            if (x < this._left || x >= this._left + this._width) {\r\n                return null;\r\n            }\r\n            if (y < this._top || y >= this._top + this._height) {\r\n                return null;\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Create a configuration object for the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.createConfig = function () {\r\n            var widgets = this.tabBar.titles.map(function (title) { return title.owner; });\r\n            var currentIndex = this.tabBar.currentIndex;\r\n            return { type: 'tab-area', widgets: widgets, currentIndex: currentIndex };\r\n        };\r\n        /**\r\n         * Recursively hold all of the sizes in the layout tree.\r\n         *\r\n         * This ignores the sizers of tab layout nodes.\r\n         */\r\n        TabLayoutNode.prototype.holdAllSizes = function () {\r\n            return;\r\n        };\r\n        /**\r\n         * Fit the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.fit = function (spacing, items) {\r\n            // Set up the limit variables.\r\n            var minWidth = 0;\r\n            var minHeight = 0;\r\n            var maxWidth = Infinity;\r\n            var maxHeight = Infinity;\r\n            // Lookup the tab bar layout item.\r\n            var tabBarItem = items.get(this.tabBar);\r\n            // Lookup the widget layout item.\r\n            var current = this.tabBar.currentTitle;\r\n            var widgetItem = current ? items.get(current.owner) : undefined;\r\n            // Lookup the tab bar and widget sizers.\r\n            var _a = this.sizers, tabBarSizer = _a[0], widgetSizer = _a[1];\r\n            // Update the tab bar limits.\r\n            if (tabBarItem) {\r\n                tabBarItem.fit();\r\n            }\r\n            // Update the widget limits.\r\n            if (widgetItem) {\r\n                widgetItem.fit();\r\n            }\r\n            // Update the results and sizer for the tab bar.\r\n            if (tabBarItem && !tabBarItem.isHidden) {\r\n                minWidth = Math.max(minWidth, tabBarItem.minWidth);\r\n                minHeight += tabBarItem.minHeight;\r\n                tabBarSizer.minSize = tabBarItem.minHeight;\r\n                tabBarSizer.maxSize = tabBarItem.maxHeight;\r\n            }\r\n            else {\r\n                tabBarSizer.minSize = 0;\r\n                tabBarSizer.maxSize = 0;\r\n            }\r\n            // Update the results and sizer for the current widget.\r\n            if (widgetItem && !widgetItem.isHidden) {\r\n                minWidth = Math.max(minWidth, widgetItem.minWidth);\r\n                minHeight += widgetItem.minHeight;\r\n                widgetSizer.minSize = widgetItem.minHeight;\r\n                widgetSizer.maxSize = Infinity;\r\n            }\r\n            else {\r\n                widgetSizer.minSize = 0;\r\n                widgetSizer.maxSize = Infinity;\r\n            }\r\n            // Return the computed size limits for the layout node.\r\n            return { minWidth: minWidth, minHeight: minHeight, maxWidth: maxWidth, maxHeight: maxHeight };\r\n        };\r\n        /**\r\n         * Update the layout tree.\r\n         */\r\n        TabLayoutNode.prototype.update = function (left, top, width, height, spacing, items) {\r\n            // Update the layout box values.\r\n            this._top = top;\r\n            this._left = left;\r\n            this._width = width;\r\n            this._height = height;\r\n            // Lookup the tab bar layout item.\r\n            var tabBarItem = items.get(this.tabBar);\r\n            // Lookup the widget layout item.\r\n            var current = this.tabBar.currentTitle;\r\n            var widgetItem = current ? items.get(current.owner) : undefined;\r\n            // Distribute the layout space to the sizers.\r\n            boxengine_1.BoxEngine.calc(this.sizers, height);\r\n            // Update the tab bar item using the computed size.\r\n            if (tabBarItem && !tabBarItem.isHidden) {\r\n                var size = this.sizers[0].size;\r\n                tabBarItem.update(left, top, width, size);\r\n                top += size;\r\n            }\r\n            // Layout the widget using the computed size.\r\n            if (widgetItem && !widgetItem.isHidden) {\r\n                var size = this.sizers[1].size;\r\n                widgetItem.update(left, top, width, size);\r\n            }\r\n        };\r\n        return TabLayoutNode;\r\n    }());\r\n    Private.TabLayoutNode = TabLayoutNode;\r\n    /**\r\n     * A layout node which holds the data for a split area.\r\n     */\r\n    var SplitLayoutNode = (function () {\r\n        /**\r\n         * Construct a new split layout node.\r\n         *\r\n         * @param orientation - The orientation of the node.\r\n         */\r\n        function SplitLayoutNode(orientation) {\r\n            /**\r\n             * The parent of the layout node.\r\n             */\r\n            this.parent = null;\r\n            /**\r\n             * Whether the sizers have been normalized.\r\n             */\r\n            this.normalized = false;\r\n            /**\r\n             * The child nodes for the split node.\r\n             */\r\n            this.children = [];\r\n            /**\r\n             * The box sizers for the layout children.\r\n             */\r\n            this.sizers = [];\r\n            /**\r\n             * The handles for the layout children.\r\n             */\r\n            this.handles = [];\r\n            this.orientation = orientation;\r\n        }\r\n        /**\r\n         * Create an iterator for all widgets in the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.iterAllWidgets = function () {\r\n            var children = algorithm_1.map(this.children, function (child) { return child.iterAllWidgets(); });\r\n            return new algorithm_1.ChainIterator(children);\r\n        };\r\n        /**\r\n         * Create an iterator for the user widgets in the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.iterUserWidgets = function () {\r\n            var children = algorithm_1.map(this.children, function (child) { return child.iterUserWidgets(); });\r\n            return new algorithm_1.ChainIterator(children);\r\n        };\r\n        /**\r\n         * Create an iterator for the selected widgets in the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.iterSelectedWidgets = function () {\r\n            var children = algorithm_1.map(this.children, function (child) { return child.iterSelectedWidgets(); });\r\n            return new algorithm_1.ChainIterator(children);\r\n        };\r\n        /**\r\n         * Create an iterator for the tab bars in the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.iterTabBars = function () {\r\n            var children = algorithm_1.map(this.children, function (child) { return child.iterTabBars(); });\r\n            return new algorithm_1.ChainIterator(children);\r\n        };\r\n        /**\r\n         * Create an iterator for the handles in the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.iterHandles = function () {\r\n            var children = algorithm_1.map(this.children, function (child) { return child.iterHandles(); });\r\n            return algorithm_1.chain(this.handles, new algorithm_1.ChainIterator(children));\r\n        };\r\n        /**\r\n         * Find the tab layout node which contains the given widget.\r\n         */\r\n        SplitLayoutNode.prototype.findTabNode = function (widget) {\r\n            for (var i = 0, n = this.children.length; i < n; ++i) {\r\n                var result = this.children[i].findTabNode(widget);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Find the split layout node which contains the given handle.\r\n         */\r\n        SplitLayoutNode.prototype.findSplitNode = function (handle) {\r\n            var index = this.handles.indexOf(handle);\r\n            if (index !== -1) {\r\n                return { index: index, node: this };\r\n            }\r\n            for (var i = 0, n = this.children.length; i < n; ++i) {\r\n                var result = this.children[i].findSplitNode(handle);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Find the first tab layout node in a layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.findFirstTabNode = function () {\r\n            if (this.children.length === 0) {\r\n                return null;\r\n            }\r\n            return this.children[0].findFirstTabNode();\r\n        };\r\n        /**\r\n         * Find the tab layout node which contains the local point.\r\n         */\r\n        SplitLayoutNode.prototype.hitTestTabNodes = function (x, y) {\r\n            for (var i = 0, n = this.children.length; i < n; ++i) {\r\n                var result = this.children[i].hitTestTabNodes(x, y);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Create a configuration object for the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.createConfig = function () {\r\n            var orientation = this.orientation;\r\n            var sizes = this.createNormalizedSizes();\r\n            var children = this.children.map(function (child) { return child.createConfig(); });\r\n            return { type: 'split-area', orientation: orientation, children: children, sizes: sizes };\r\n        };\r\n        /**\r\n         * Sync the visibility and orientation of the handles.\r\n         */\r\n        SplitLayoutNode.prototype.syncHandles = function () {\r\n            var _this = this;\r\n            algorithm_1.each(this.handles, function (handle, i) {\r\n                handle.setAttribute('data-orientation', _this.orientation);\r\n                if (i === _this.handles.length - 1) {\r\n                    handle.classList.add('p-mod-hidden');\r\n                }\r\n                else {\r\n                    handle.classList.remove('p-mod-hidden');\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Hold the current sizes of the box sizers.\r\n         *\r\n         * This sets the size hint of each sizer to its current size.\r\n         */\r\n        SplitLayoutNode.prototype.holdSizes = function () {\r\n            algorithm_1.each(this.sizers, function (sizer) { sizer.sizeHint = sizer.size; });\r\n        };\r\n        /**\r\n         * Recursively hold all of the sizes in the layout tree.\r\n         *\r\n         * This ignores the sizers of tab layout nodes.\r\n         */\r\n        SplitLayoutNode.prototype.holdAllSizes = function () {\r\n            algorithm_1.each(this.children, function (child) { return child.holdAllSizes(); });\r\n            this.holdSizes();\r\n        };\r\n        /**\r\n         * Normalize the sizes of the split layout node.\r\n         */\r\n        SplitLayoutNode.prototype.normalizeSizes = function () {\r\n            // Bail early if the sizers are empty.\r\n            var n = this.sizers.length;\r\n            if (n === 0) {\r\n                return;\r\n            }\r\n            // Hold the current sizes of the sizers.\r\n            this.holdSizes();\r\n            // Compute the sum of the sizes.\r\n            var sum = algorithm_1.reduce(this.sizers, function (v, sizer) { return v + sizer.sizeHint; }, 0);\r\n            // Normalize the sizes based on the sum.\r\n            if (sum === 0) {\r\n                algorithm_1.each(this.sizers, function (sizer) {\r\n                    sizer.size = sizer.sizeHint = 1 / n;\r\n                });\r\n            }\r\n            else {\r\n                algorithm_1.each(this.sizers, function (sizer) {\r\n                    sizer.size = sizer.sizeHint /= sum;\r\n                });\r\n            }\r\n            // Mark the sizes as normalized.\r\n            this.normalized = true;\r\n        };\r\n        /**\r\n         * Snap the normalized sizes of the split layout node.\r\n         */\r\n        SplitLayoutNode.prototype.createNormalizedSizes = function () {\r\n            // Bail early if the sizers are empty.\r\n            var n = this.sizers.length;\r\n            if (n === 0) {\r\n                return [];\r\n            }\r\n            // Grab the current sizes of the sizers.\r\n            var sizes = this.sizers.map(function (sizer) { return sizer.size; });\r\n            // Compute the sum of the sizes.\r\n            var sum = algorithm_1.reduce(sizes, function (v, size) { return v + size; }, 0);\r\n            // Normalize the sizes based on the sum.\r\n            if (sum === 0) {\r\n                algorithm_1.each(sizes, function (size, i) { sizes[i] = 1 / n; });\r\n            }\r\n            else {\r\n                algorithm_1.each(sizes, function (size, i) { sizes[i] = size / sum; });\r\n            }\r\n            // Return the normalized sizes.\r\n            return sizes;\r\n        };\r\n        /**\r\n         * Fit the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.fit = function (spacing, items) {\r\n            // Compute the required fixed space.\r\n            var horizontal = this.orientation === 'horizontal';\r\n            var fixed = Math.max(0, this.children.length - 1) * spacing;\r\n            // Set up the limit variables.\r\n            var minWidth = horizontal ? fixed : 0;\r\n            var minHeight = horizontal ? 0 : fixed;\r\n            var maxWidth = Infinity;\r\n            var maxHeight = Infinity;\r\n            // Fit the children and update the limits.\r\n            for (var i = 0, n = this.children.length; i < n; ++i) {\r\n                var limits = this.children[i].fit(spacing, items);\r\n                if (horizontal) {\r\n                    minHeight = Math.max(minHeight, limits.minHeight);\r\n                    minWidth += limits.minWidth;\r\n                    this.sizers[i].minSize = limits.minWidth;\r\n                }\r\n                else {\r\n                    minWidth = Math.max(minWidth, limits.minWidth);\r\n                    minHeight += limits.minHeight;\r\n                    this.sizers[i].minSize = limits.minHeight;\r\n                }\r\n            }\r\n            // Return the computed limits for the layout node.\r\n            return { minWidth: minWidth, minHeight: minHeight, maxWidth: maxWidth, maxHeight: maxHeight };\r\n        };\r\n        /**\r\n         * Update the layout tree.\r\n         */\r\n        SplitLayoutNode.prototype.update = function (left, top, width, height, spacing, items) {\r\n            // Compute the available layout space.\r\n            var horizontal = this.orientation === 'horizontal';\r\n            var fixed = Math.max(0, this.children.length - 1) * spacing;\r\n            var space = Math.max(0, (horizontal ? width : height) - fixed);\r\n            // De-normalize the sizes if needed.\r\n            if (this.normalized) {\r\n                algorithm_1.each(this.sizers, function (sizer) { sizer.sizeHint *= space; });\r\n                this.normalized = false;\r\n            }\r\n            // Distribute the layout space to the sizers.\r\n            boxengine_1.BoxEngine.calc(this.sizers, space);\r\n            // Update the geometry of the child nodes and handles.\r\n            for (var i = 0, n = this.children.length; i < n; ++i) {\r\n                var child = this.children[i];\r\n                var size = this.sizers[i].size;\r\n                var handleStyle = this.handles[i].style;\r\n                if (horizontal) {\r\n                    child.update(left, top, size, height, spacing, items);\r\n                    left += size;\r\n                    handleStyle.top = top + \"px\";\r\n                    handleStyle.left = left + \"px\";\r\n                    handleStyle.width = spacing + \"px\";\r\n                    handleStyle.height = height + \"px\";\r\n                    left += spacing;\r\n                }\r\n                else {\r\n                    child.update(left, top, width, size, spacing, items);\r\n                    top += size;\r\n                    handleStyle.top = top + \"px\";\r\n                    handleStyle.left = left + \"px\";\r\n                    handleStyle.width = width + \"px\";\r\n                    handleStyle.height = spacing + \"px\";\r\n                    top += spacing;\r\n                }\r\n            }\r\n        };\r\n        return SplitLayoutNode;\r\n    }());\r\n    Private.SplitLayoutNode = SplitLayoutNode;\r\n    /**\r\n     * Normalize a tab area config and collect the visited widgets.\r\n     */\r\n    function normalizeTabAreaConfig(config, widgetSet) {\r\n        // Bail early if there is no content.\r\n        if (config.widgets.length === 0) {\r\n            return null;\r\n        }\r\n        // Setup the filtered widgets array.\r\n        var widgets = [];\r\n        // Filter the config for unique widgets.\r\n        algorithm_1.each(config.widgets, function (widget) {\r\n            if (!widgetSet.has(widget)) {\r\n                widgetSet.add(widget);\r\n                widgets.push(widget);\r\n            }\r\n        });\r\n        // Bail if there are no effective widgets.\r\n        if (widgets.length === 0) {\r\n            return null;\r\n        }\r\n        // Normalize the current index.\r\n        var index = config.currentIndex;\r\n        if (index !== -1 && (index < 0 || index >= widgets.length)) {\r\n            index = 0;\r\n        }\r\n        // Return a normalized config object.\r\n        return { type: 'tab-area', widgets: widgets, currentIndex: index };\r\n    }\r\n    /**\r\n     * Normalize a split area config and collect the visited widgets.\r\n     */\r\n    function normalizeSplitAreaConfig(config, widgetSet) {\r\n        // Set up the result variables.\r\n        var orientation = config.orientation;\r\n        var children = [];\r\n        var sizes = [];\r\n        // Normalize the config children.\r\n        for (var i = 0, n = config.children.length; i < n; ++i) {\r\n            // Normalize the child config.\r\n            var child = normalizeAreaConfig(config.children[i], widgetSet);\r\n            // Ignore an empty child.\r\n            if (!child) {\r\n                continue;\r\n            }\r\n            // Add the child or hoist its content as appropriate.\r\n            if (child.type === 'tab-area' || child.orientation !== orientation) {\r\n                children.push(child);\r\n                sizes.push(Math.abs(config.sizes[i] || 0));\r\n            }\r\n            else {\r\n                children.push.apply(children, child.children);\r\n                sizes.push.apply(sizes, child.sizes);\r\n            }\r\n        }\r\n        // Bail if there are no effective children.\r\n        if (children.length === 0) {\r\n            return null;\r\n        }\r\n        // If there is only one effective child, return that child.\r\n        if (children.length === 1) {\r\n            return children[0];\r\n        }\r\n        // Return a normalized config object.\r\n        return { type: 'split-area', orientation: orientation, children: children, sizes: sizes };\r\n    }\r\n    /**\r\n     * Convert a normalized tab area config into a layout tree.\r\n     */\r\n    function realizeTabAreaConfig(config, renderer) {\r\n        // Create the tab bar for the layout node.\r\n        var tabBar = renderer.createTabBar();\r\n        // Hide each widget and add it to the tab bar.\r\n        algorithm_1.each(config.widgets, function (widget) {\r\n            widget.hide();\r\n            tabBar.addTab(widget.title);\r\n        });\r\n        // Set the current index of the tab bar.\r\n        tabBar.currentIndex = config.currentIndex;\r\n        // Return the new tab layout node.\r\n        return new TabLayoutNode(tabBar);\r\n    }\r\n    /**\r\n     * Convert a normalized split area config into a layout tree.\r\n     */\r\n    function realizeSplitAreaConfig(config, renderer) {\r\n        // Create the split layout node.\r\n        var node = new SplitLayoutNode(config.orientation);\r\n        // Add each child to the layout node.\r\n        algorithm_1.each(config.children, function (child, i) {\r\n            // Create the child data for the layout node.\r\n            var childNode = realizeAreaConfig(child, renderer);\r\n            var sizer = createSizer(config.sizes[i]);\r\n            var handle = renderer.createHandle();\r\n            // Add the child data to the layout node.\r\n            node.children.push(childNode);\r\n            node.handles.push(handle);\r\n            node.sizers.push(sizer);\r\n            // Update the parent for the child node.\r\n            childNode.parent = node;\r\n        });\r\n        // Synchronize the handle state for the layout node.\r\n        node.syncHandles();\r\n        // Normalize the sizes for the layout node.\r\n        node.normalizeSizes();\r\n        // Return the new layout node.\r\n        return node;\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar coreutils_1 = require(\"@phosphor/coreutils\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar dragdrop_1 = require(\"@phosphor/dragdrop\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar properties_1 = require(\"@phosphor/properties\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar docklayout_1 = require(\"./docklayout\");\r\nvar tabbar_1 = require(\"./tabbar\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A widget which provides a flexible docking area for widgets.\r\n */\r\nvar DockPanel = (function (_super) {\r\n    __extends(DockPanel, _super);\r\n    /**\r\n     * Construct a new dock panel.\r\n     *\r\n     * @param options - The options for initializing the panel.\r\n     */\r\n    function DockPanel(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this._drag = null;\r\n        _this._pressData = null;\r\n        _this._layoutModified = new signaling_1.Signal(_this);\r\n        _this.addClass('p-DockPanel');\r\n        _this._mode = options.mode || 'multiple-document';\r\n        _this._renderer = options.renderer || DockPanel.defaultRenderer;\r\n        // Toggle the CSS mode attribute.\r\n        _this.dataset['mode'] = _this._mode;\r\n        // Create the delegate renderer for the layout.\r\n        var renderer = {\r\n            createTabBar: function () { return _this._createTabBar(); },\r\n            createHandle: function () { return _this._createHandle(); }\r\n        };\r\n        // Set up the dock layout for the panel.\r\n        _this.layout = new docklayout_1.DockLayout({ renderer: renderer, spacing: options.spacing });\r\n        // Set up the overlay drop indicator.\r\n        _this.overlay = options.overlay || new DockPanel.Overlay();\r\n        _this.node.appendChild(_this.overlay.node);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the panel.\r\n     */\r\n    DockPanel.prototype.dispose = function () {\r\n        // Ensure the mouse is released.\r\n        this._releaseMouse();\r\n        // Hide the overlay.\r\n        this.overlay.hide(0);\r\n        // Cancel a drag if one is in progress.\r\n        if (this._drag) {\r\n            this._drag.dispose();\r\n        }\r\n        // Dispose of the base class.\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(DockPanel.prototype, \"layoutModified\", {\r\n        /**\r\n         * A signal emitted when the layout configuration is modified.\r\n         *\r\n         * #### Notes\r\n         * This signal is emitted whenever the current layout configuration\r\n         * may have changed.\r\n         *\r\n         * This signal is emitted asynchronously in a collapsed fashion, so\r\n         * that multiple synchronous modifications results in only a single\r\n         * emit of the signal.\r\n         */\r\n        get: function () {\r\n            return this._layoutModified;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DockPanel.prototype, \"renderer\", {\r\n        /**\r\n         * The renderer used by the dock panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.renderer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DockPanel.prototype, \"spacing\", {\r\n        /**\r\n         * Get the spacing between the widgets.\r\n         */\r\n        get: function () {\r\n            return this.layout.spacing;\r\n        },\r\n        /**\r\n         * Set the spacing between the widgets.\r\n         */\r\n        set: function (value) {\r\n            this.layout.spacing = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DockPanel.prototype, \"mode\", {\r\n        /**\r\n         * Get the mode for the dock panel.\r\n         */\r\n        get: function () {\r\n            return this._mode;\r\n        },\r\n        /**\r\n         * Set the mode for the dock panel.\r\n         *\r\n         * #### Notes\r\n         * Changing the mode is a destructive operation with respect to the\r\n         * panel's layout configuration. If layout state must be preserved,\r\n         * save the current layout config before changing the mode.\r\n         */\r\n        set: function (value) {\r\n            // Bail early if the mode does not change.\r\n            if (this._mode === value) {\r\n                return;\r\n            }\r\n            // Update the internal mode.\r\n            this._mode = value;\r\n            // Toggle the CSS mode attribute.\r\n            this.dataset['mode'] = value;\r\n            // Get the layout for the panel.\r\n            var layout = this.layout;\r\n            // Configure the layout for the specified mode.\r\n            switch (value) {\r\n                case 'multiple-document':\r\n                    algorithm_1.each(layout.tabBars(), function (tabBar) { tabBar.show(); });\r\n                    break;\r\n                case 'single-document':\r\n                    layout.restoreLayout(Private.createSingleDocumentConfig(this));\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n            // Schedule an emit of the layout modified signal.\r\n            messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DockPanel.prototype, \"isEmpty\", {\r\n        /**\r\n         * Whether the dock panel is empty.\r\n         */\r\n        get: function () {\r\n            return this.layout.isEmpty;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create an iterator over the user widgets in the panel.\r\n     *\r\n     * @returns A new iterator over the user widgets in the panel.\r\n     *\r\n     * #### Notes\r\n     * This iterator does not include the generated tab bars.\r\n     */\r\n    DockPanel.prototype.widgets = function () {\r\n        return this.layout.widgets();\r\n    };\r\n    /**\r\n     * Create an iterator over the selected widgets in the panel.\r\n     *\r\n     * @returns A new iterator over the selected user widgets.\r\n     *\r\n     * #### Notes\r\n     * This iterator yields the widgets corresponding to the current tab\r\n     * of each tab bar in the panel.\r\n     */\r\n    DockPanel.prototype.selectedWidgets = function () {\r\n        return this.layout.selectedWidgets();\r\n    };\r\n    /**\r\n     * Create an iterator over the tab bars in the panel.\r\n     *\r\n     * @returns A new iterator over the tab bars in the panel.\r\n     *\r\n     * #### Notes\r\n     * This iterator does not include the user widgets.\r\n     */\r\n    DockPanel.prototype.tabBars = function () {\r\n        return this.layout.tabBars();\r\n    };\r\n    /**\r\n     * Create an iterator over the handles in the panel.\r\n     *\r\n     * @returns A new iterator over the handles in the panel.\r\n     */\r\n    DockPanel.prototype.handles = function () {\r\n        return this.layout.handles();\r\n    };\r\n    /**\r\n     * Select a specific widget in the dock panel.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * #### Notes\r\n     * This will make the widget the current widget in its tab area.\r\n     */\r\n    DockPanel.prototype.selectWidget = function (widget) {\r\n        // Find the tab bar which contains the widget.\r\n        var tabBar = algorithm_1.find(this.tabBars(), function (bar) {\r\n            return bar.titles.indexOf(widget.title) !== -1;\r\n        });\r\n        // Throw an error if no tab bar is found.\r\n        if (!tabBar) {\r\n            throw new Error('Widget is not contained in the dock panel.');\r\n        }\r\n        // Ensure the widget is the current widget.\r\n        tabBar.currentTitle = widget.title;\r\n    };\r\n    /**\r\n     * Activate a specified widget in the dock panel.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * #### Notes\r\n     * This will select and activate the given widget.\r\n     */\r\n    DockPanel.prototype.activateWidget = function (widget) {\r\n        this.selectWidget(widget);\r\n        widget.activate();\r\n    };\r\n    /**\r\n     * Save the current layout configuration of the dock panel.\r\n     *\r\n     * @returns A new config object for the current layout state.\r\n     *\r\n     * #### Notes\r\n     * The return value can be provided to the `restoreLayout` method\r\n     * in order to restore the layout to its current configuration.\r\n     */\r\n    DockPanel.prototype.saveLayout = function () {\r\n        return this.layout.saveLayout();\r\n    };\r\n    /**\r\n     * Restore the layout to a previously saved configuration.\r\n     *\r\n     * @param config - The layout configuration to restore.\r\n     *\r\n     * #### Notes\r\n     * Widgets which currently belong to the layout but which are not\r\n     * contained in the config will be unparented.\r\n     *\r\n     * The dock panel automatically reverts to `'multiple-document'`\r\n     * mode when a layout config is restored.\r\n     */\r\n    DockPanel.prototype.restoreLayout = function (config) {\r\n        // Reset the mode.\r\n        this._mode = 'multiple-document';\r\n        // Restore the layout.\r\n        this.layout.restoreLayout(config);\r\n        // Flush the message loop on IE and Edge to prevent flicker.\r\n        if (domutils_1.Platform.IS_EDGE || domutils_1.Platform.IS_IE) {\r\n            messaging_1.MessageLoop.flush();\r\n        }\r\n        // Schedule an emit of the layout modified signal.\r\n        messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n    };\r\n    /**\r\n     * Add a widget to the dock panel.\r\n     *\r\n     * @param widget - The widget to add to the dock panel.\r\n     *\r\n     * @param options - The additional options for adding the widget.\r\n     *\r\n     * #### Notes\r\n     * If the panel is in single document mode, the options are ignored\r\n     * and the widget is always added as tab in the hidden tab bar.\r\n     */\r\n    DockPanel.prototype.addWidget = function (widget, options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Add the widget to the layout.\r\n        if (this._mode === 'single-document') {\r\n            this.layout.addWidget(widget);\r\n        }\r\n        else {\r\n            this.layout.addWidget(widget, options);\r\n        }\r\n        // Schedule an emit of the layout modified signal.\r\n        messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n    };\r\n    /**\r\n     * Process a message sent to the widget.\r\n     *\r\n     * @param msg - The message sent to the widget.\r\n     */\r\n    DockPanel.prototype.processMessage = function (msg) {\r\n        if (msg.type === 'layout-modified') {\r\n            this._layoutModified.emit(undefined);\r\n        }\r\n        else {\r\n            _super.prototype.processMessage.call(this, msg);\r\n        }\r\n    };\r\n    /**\r\n     * Handle the DOM events for the dock panel.\r\n     *\r\n     * @param event - The DOM event sent to the panel.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the panel's DOM node. It should\r\n     * not be called directly by user code.\r\n     */\r\n    DockPanel.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'p-dragenter':\r\n                this._evtDragEnter(event);\r\n                break;\r\n            case 'p-dragleave':\r\n                this._evtDragLeave(event);\r\n                break;\r\n            case 'p-dragover':\r\n                this._evtDragOver(event);\r\n                break;\r\n            case 'p-drop':\r\n                this._evtDrop(event);\r\n                break;\r\n            case 'mousedown':\r\n                this._evtMouseDown(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtMouseMove(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtMouseUp(event);\r\n                break;\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            case 'contextmenu':\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    DockPanel.prototype.onBeforeAttach = function (msg) {\r\n        this.node.addEventListener('p-dragenter', this);\r\n        this.node.addEventListener('p-dragleave', this);\r\n        this.node.addEventListener('p-dragover', this);\r\n        this.node.addEventListener('p-drop', this);\r\n        this.node.addEventListener('mousedown', this);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     */\r\n    DockPanel.prototype.onAfterDetach = function (msg) {\r\n        this.node.removeEventListener('p-dragenter', this);\r\n        this.node.removeEventListener('p-dragleave', this);\r\n        this.node.removeEventListener('p-dragover', this);\r\n        this.node.removeEventListener('p-drop', this);\r\n        this.node.removeEventListener('mousedown', this);\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-added'` message.\r\n     */\r\n    DockPanel.prototype.onChildAdded = function (msg) {\r\n        // Ignore the generated tab bars.\r\n        if (Private.isGeneratedTabBarProperty.get(msg.child)) {\r\n            return;\r\n        }\r\n        // Add the widget class to the child.\r\n        msg.child.addClass('p-DockPanel-widget');\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     */\r\n    DockPanel.prototype.onChildRemoved = function (msg) {\r\n        // Ignore the generated tab bars.\r\n        if (Private.isGeneratedTabBarProperty.get(msg.child)) {\r\n            return;\r\n        }\r\n        // Remove the widget class from the child.\r\n        msg.child.removeClass('p-DockPanel-widget');\r\n        // Schedule an emit of the layout modified signal.\r\n        messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n    };\r\n    /**\r\n     * Handle the `'p-dragenter'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtDragEnter = function (event) {\r\n        // If the factory mime type is present, mark the event as\r\n        // handled in order to get the rest of the drag events.\r\n        if (event.mimeData.hasData('application/vnd.phosphor.widget-factory')) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'p-dragleave'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtDragLeave = function (event) {\r\n        // Mark the event as handled.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Get the node into which the drag is entering.\r\n        var related = event.relatedTarget;\r\n        // Hide the overlay if the drag is leaving the dock panel.\r\n        if (!related || !this.node.contains(related)) {\r\n            this.overlay.hide(0);\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'p-dragover'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtDragOver = function (event) {\r\n        // Mark the event as handled.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Show the drop indicator overlay and update the drop\r\n        // action based on the drop target zone under the mouse.\r\n        if (this._showOverlay(event.clientX, event.clientY) === 'invalid') {\r\n            event.dropAction = 'none';\r\n        }\r\n        else {\r\n            event.dropAction = event.proposedAction;\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'p-drop'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtDrop = function (event) {\r\n        // Mark the event as handled.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Hide the drop indicator overlay.\r\n        this.overlay.hide(0);\r\n        // Bail if the proposed action is to do nothing.\r\n        if (event.proposedAction === 'none') {\r\n            event.dropAction = 'none';\r\n            return;\r\n        }\r\n        // Find the drop target under the mouse.\r\n        var clientX = event.clientX, clientY = event.clientY;\r\n        var _a = Private.findDropTarget(this, clientX, clientY), zone = _a.zone, target = _a.target;\r\n        // Bail if the drop zone is invalid.\r\n        if (zone === 'invalid') {\r\n            event.dropAction = 'none';\r\n            return;\r\n        }\r\n        // Bail if the factory mime type has invalid data.\r\n        var mimeData = event.mimeData;\r\n        var factory = mimeData.getData('application/vnd.phosphor.widget-factory');\r\n        if (typeof factory !== 'function') {\r\n            event.dropAction = 'none';\r\n            return;\r\n        }\r\n        // Bail if the factory does not produce a widget.\r\n        var widget = factory();\r\n        if (!(widget instanceof widget_1.Widget)) {\r\n            event.dropAction = 'none';\r\n            return;\r\n        }\r\n        // Bail if the widget is an ancestor of the dock panel.\r\n        if (widget.contains(this)) {\r\n            event.dropAction = 'none';\r\n            return;\r\n        }\r\n        // Find the reference widget for the drop target.\r\n        var ref = target ? Private.getDropRef(target.tabBar) : null;\r\n        // Add the widget according to the indicated drop zone.\r\n        switch (zone) {\r\n            case 'root-all':\r\n                this.addWidget(widget);\r\n                break;\r\n            case 'root-top':\r\n                this.addWidget(widget, { mode: 'split-top' });\r\n                break;\r\n            case 'root-left':\r\n                this.addWidget(widget, { mode: 'split-left' });\r\n                break;\r\n            case 'root-right':\r\n                this.addWidget(widget, { mode: 'split-right' });\r\n                break;\r\n            case 'root-bottom':\r\n                this.addWidget(widget, { mode: 'split-bottom' });\r\n                break;\r\n            case 'widget-all':\r\n                this.addWidget(widget, { mode: 'tab-after', ref: ref });\r\n                break;\r\n            case 'widget-top':\r\n                this.addWidget(widget, { mode: 'split-top', ref: ref });\r\n                break;\r\n            case 'widget-left':\r\n                this.addWidget(widget, { mode: 'split-left', ref: ref });\r\n                break;\r\n            case 'widget-right':\r\n                this.addWidget(widget, { mode: 'split-right', ref: ref });\r\n                break;\r\n            case 'widget-bottom':\r\n                this.addWidget(widget, { mode: 'split-bottom', ref: ref });\r\n                break;\r\n            default:\r\n                throw 'unreachable';\r\n        }\r\n        // Accept the proposed drop action.\r\n        event.dropAction = event.proposedAction;\r\n        // Activate the dropped widget.\r\n        this.activateWidget(widget);\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtKeyDown = function (event) {\r\n        // Stop input events during drag.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Release the mouse if `Escape` is pressed.\r\n        if (event.keyCode === 27) {\r\n            // Finalize the mouse release.\r\n            this._releaseMouse();\r\n            // Schedule an emit of the layout modified signal.\r\n            messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousedown'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtMouseDown = function (event) {\r\n        // Do nothing if the left mouse button is not pressed.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Find the handle which contains the mouse target, if any.\r\n        var layout = this.layout;\r\n        var target = event.target;\r\n        var handle = algorithm_1.find(layout.handles(), function (handle) { return handle.contains(target); });\r\n        if (!handle) {\r\n            return;\r\n        }\r\n        // Stop the event when a handle is pressed.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Add the extra document listeners.\r\n        document.addEventListener('keydown', this, true);\r\n        document.addEventListener('mouseup', this, true);\r\n        document.addEventListener('mousemove', this, true);\r\n        document.addEventListener('contextmenu', this, true);\r\n        // Compute the offset deltas for the handle press.\r\n        var rect = handle.getBoundingClientRect();\r\n        var deltaX = event.clientX - rect.left;\r\n        var deltaY = event.clientY - rect.top;\r\n        // Override the cursor and store the press data.\r\n        var style = window.getComputedStyle(handle);\r\n        var override = dragdrop_1.Drag.overrideCursor(style.cursor);\r\n        this._pressData = { handle: handle, deltaX: deltaX, deltaY: deltaY, override: override };\r\n    };\r\n    /**\r\n     * Handle the `'mousemove'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtMouseMove = function (event) {\r\n        // Bail early if no drag is in progress.\r\n        if (!this._pressData) {\r\n            return;\r\n        }\r\n        // Stop the event when dragging a handle.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Compute the desired offset position for the handle.\r\n        var rect = this.node.getBoundingClientRect();\r\n        var xPos = event.clientX - rect.left - this._pressData.deltaX;\r\n        var yPos = event.clientY - rect.top - this._pressData.deltaY;\r\n        // Set the handle as close to the desired position as possible.\r\n        var layout = this.layout;\r\n        layout.moveHandle(this._pressData.handle, xPos, yPos);\r\n    };\r\n    /**\r\n     * Handle the `'mouseup'` event for the dock panel.\r\n     */\r\n    DockPanel.prototype._evtMouseUp = function (event) {\r\n        // Do nothing if the left mouse button is not released.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Stop the event when releasing a handle.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Finalize the mouse release.\r\n        this._releaseMouse();\r\n        // Schedule an emit of the layout modified signal.\r\n        messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n    };\r\n    /**\r\n     * Release the mouse grab for the dock panel.\r\n     */\r\n    DockPanel.prototype._releaseMouse = function () {\r\n        // Bail early if no drag is in progress.\r\n        if (!this._pressData) {\r\n            return;\r\n        }\r\n        // Clear the override cursor.\r\n        this._pressData.override.dispose();\r\n        this._pressData = null;\r\n        // Remove the extra document listeners.\r\n        document.removeEventListener('keydown', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('contextmenu', this, true);\r\n    };\r\n    /**\r\n     * Show the overlay indicator at the given client position.\r\n     *\r\n     * Returns the drop zone at the specified client position.\r\n     *\r\n     * #### Notes\r\n     * If the position is not over a valid zone, the overlay is hidden.\r\n     */\r\n    DockPanel.prototype._showOverlay = function (clientX, clientY) {\r\n        // Find the dock target for the given client position.\r\n        var _a = Private.findDropTarget(this, clientX, clientY), zone = _a.zone, target = _a.target;\r\n        // If the drop zone is invalid, hide the overlay and bail.\r\n        if (zone === 'invalid') {\r\n            this.overlay.hide(100);\r\n            return zone;\r\n        }\r\n        // Setup the variables needed to compute the overlay geometry.\r\n        var top;\r\n        var left;\r\n        var right;\r\n        var bottom;\r\n        var box = domutils_1.ElementExt.boxSizing(this.node); // TODO cache this?\r\n        var rect = this.node.getBoundingClientRect();\r\n        // Compute the overlay geometry based on the dock zone.\r\n        switch (zone) {\r\n            case 'root-all':\r\n                top = box.paddingTop;\r\n                left = box.paddingLeft;\r\n                right = box.paddingRight;\r\n                bottom = box.paddingBottom;\r\n                break;\r\n            case 'root-top':\r\n                top = box.paddingTop;\r\n                left = box.paddingLeft;\r\n                right = box.paddingRight;\r\n                bottom = rect.height * Private.GOLDEN_RATIO;\r\n                break;\r\n            case 'root-left':\r\n                top = box.paddingTop;\r\n                left = box.paddingLeft;\r\n                right = rect.width * Private.GOLDEN_RATIO;\r\n                bottom = box.paddingBottom;\r\n                break;\r\n            case 'root-right':\r\n                top = box.paddingTop;\r\n                left = rect.width * Private.GOLDEN_RATIO;\r\n                right = box.paddingRight;\r\n                bottom = box.paddingBottom;\r\n                break;\r\n            case 'root-bottom':\r\n                top = rect.height * Private.GOLDEN_RATIO;\r\n                left = box.paddingLeft;\r\n                right = box.paddingRight;\r\n                bottom = box.paddingBottom;\r\n                break;\r\n            case 'widget-all':\r\n                top = target.top;\r\n                left = target.left;\r\n                right = target.right;\r\n                bottom = target.bottom;\r\n                break;\r\n            case 'widget-top':\r\n                top = target.top;\r\n                left = target.left;\r\n                right = target.right;\r\n                bottom = target.bottom + target.height / 2;\r\n                break;\r\n            case 'widget-left':\r\n                top = target.top;\r\n                left = target.left;\r\n                right = target.right + target.width / 2;\r\n                bottom = target.bottom;\r\n                break;\r\n            case 'widget-right':\r\n                top = target.top;\r\n                left = target.left + target.width / 2;\r\n                right = target.right;\r\n                bottom = target.bottom;\r\n                break;\r\n            case 'widget-bottom':\r\n                top = target.top + target.height / 2;\r\n                left = target.left;\r\n                right = target.right;\r\n                bottom = target.bottom;\r\n                break;\r\n            default:\r\n                throw 'unreachable';\r\n        }\r\n        // Show the overlay with the computed geometry.\r\n        this.overlay.show({ top: top, left: left, right: right, bottom: bottom });\r\n        // Finally, return the computed drop zone.\r\n        return zone;\r\n    };\r\n    /**\r\n     * Create a new tab bar for use by the panel.\r\n     */\r\n    DockPanel.prototype._createTabBar = function () {\r\n        // Create the tab bar.\r\n        var tabBar = this._renderer.createTabBar();\r\n        // Set the generated tab bar property for the tab bar.\r\n        Private.isGeneratedTabBarProperty.set(tabBar, true);\r\n        // Hide the tab bar when in single document mode.\r\n        if (this._mode === 'single-document') {\r\n            tabBar.hide();\r\n        }\r\n        // Enforce necessary tab bar behavior.\r\n        // TODO do we really want to enforce *all* of these?\r\n        tabBar.tabsMovable = true;\r\n        tabBar.allowDeselect = false;\r\n        tabBar.removeBehavior = 'select-previous-tab';\r\n        tabBar.insertBehavior = 'select-tab-if-needed';\r\n        // Connect the signal handlers for the tab bar.\r\n        tabBar.tabMoved.connect(this._onTabMoved, this);\r\n        tabBar.currentChanged.connect(this._onCurrentChanged, this);\r\n        tabBar.tabCloseRequested.connect(this._onTabCloseRequested, this);\r\n        tabBar.tabDetachRequested.connect(this._onTabDetachRequested, this);\r\n        tabBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\r\n        // Return the initialized tab bar.\r\n        return tabBar;\r\n    };\r\n    /**\r\n     * Create a new handle for use by the panel.\r\n     */\r\n    DockPanel.prototype._createHandle = function () {\r\n        return this._renderer.createHandle();\r\n    };\r\n    /**\r\n     * Handle the `tabMoved` signal from a tab bar.\r\n     */\r\n    DockPanel.prototype._onTabMoved = function () {\r\n        messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n    };\r\n    /**\r\n     * Handle the `currentChanged` signal from a tab bar.\r\n     */\r\n    DockPanel.prototype._onCurrentChanged = function (sender, args) {\r\n        // Extract the previous and current title from the args.\r\n        var previousTitle = args.previousTitle, currentTitle = args.currentTitle;\r\n        // Hide the previous widget.\r\n        if (previousTitle) {\r\n            previousTitle.owner.hide();\r\n        }\r\n        // Show the current widget.\r\n        if (currentTitle) {\r\n            currentTitle.owner.show();\r\n        }\r\n        // Flush the message loop on IE and Edge to prevent flicker.\r\n        if (domutils_1.Platform.IS_EDGE || domutils_1.Platform.IS_IE) {\r\n            messaging_1.MessageLoop.flush();\r\n        }\r\n        // Schedule an emit of the layout modified signal.\r\n        messaging_1.MessageLoop.postMessage(this, Private.LayoutModified);\r\n    };\r\n    /**\r\n     * Handle the `tabActivateRequested` signal from a tab bar.\r\n     */\r\n    DockPanel.prototype._onTabActivateRequested = function (sender, args) {\r\n        args.title.owner.activate();\r\n    };\r\n    /**\r\n     * Handle the `tabCloseRequested` signal from a tab bar.\r\n     */\r\n    DockPanel.prototype._onTabCloseRequested = function (sender, args) {\r\n        args.title.owner.close();\r\n    };\r\n    /**\r\n     * Handle the `tabDetachRequested` signal from a tab bar.\r\n     */\r\n    DockPanel.prototype._onTabDetachRequested = function (sender, args) {\r\n        var _this = this;\r\n        // Do nothing if a drag is already in progress.\r\n        if (this._drag) {\r\n            return;\r\n        }\r\n        // Release the tab bar's hold on the mouse.\r\n        sender.releaseMouse();\r\n        // Extract the data from the args.\r\n        var title = args.title, tab = args.tab, clientX = args.clientX, clientY = args.clientY;\r\n        // Setup the mime data for the drag operation.\r\n        var mimeData = new coreutils_1.MimeData();\r\n        var factory = function () { return title.owner; };\r\n        mimeData.setData('application/vnd.phosphor.widget-factory', factory);\r\n        // Create the drag image for the drag operation.\r\n        var dragImage = tab.cloneNode(true);\r\n        // Create the drag object to manage the drag-drop operation.\r\n        this._drag = new dragdrop_1.Drag({\r\n            mimeData: mimeData, dragImage: dragImage,\r\n            proposedAction: 'move',\r\n            supportedActions: 'move',\r\n        });\r\n        // Hide the tab node in the original tab.\r\n        tab.classList.add('p-mod-hidden');\r\n        // Create the cleanup callback.\r\n        var cleanup = (function () {\r\n            _this._drag = null;\r\n            tab.classList.remove('p-mod-hidden');\r\n        });\r\n        // Start the drag operation and cleanup when done.\r\n        this._drag.start(clientX, clientY).then(cleanup);\r\n    };\r\n    return DockPanel;\r\n}(widget_1.Widget));\r\nexports.DockPanel = DockPanel;\r\n/**\r\n * The namespace for the `DockPanel` class statics.\r\n */\r\n(function (DockPanel) {\r\n    /**\r\n     * A concrete implementation of `IOverlay`.\r\n     *\r\n     * This is the default overlay implementation for a dock panel.\r\n     */\r\n    var Overlay = (function () {\r\n        /**\r\n         * Construct a new overlay.\r\n         */\r\n        function Overlay() {\r\n            this._timer = -1;\r\n            this._hidden = true;\r\n            this.node = document.createElement('div');\r\n            this.node.classList.add('p-DockPanel-overlay');\r\n            this.node.classList.add('p-mod-hidden');\r\n            this.node.style.position = 'absolute';\r\n        }\r\n        /**\r\n         * Show the overlay using the given overlay geometry.\r\n         *\r\n         * @param geo - The desired geometry for the overlay.\r\n         */\r\n        Overlay.prototype.show = function (geo) {\r\n            // Update the position of the overlay.\r\n            var style = this.node.style;\r\n            style.top = geo.top + \"px\";\r\n            style.left = geo.left + \"px\";\r\n            style.right = geo.right + \"px\";\r\n            style.bottom = geo.bottom + \"px\";\r\n            // Clear any pending hide timer.\r\n            clearTimeout(this._timer);\r\n            this._timer = -1;\r\n            // If the overlay is already visible, we're done.\r\n            if (!this._hidden) {\r\n                return;\r\n            }\r\n            // Clear the hidden flag.\r\n            this._hidden = false;\r\n            // Finally, show the overlay.\r\n            this.node.classList.remove('p-mod-hidden');\r\n        };\r\n        /**\r\n         * Hide the overlay node.\r\n         *\r\n         * @param delay - The delay (in ms) before hiding the overlay.\r\n         *   A delay value <= 0 will hide the overlay immediately.\r\n         */\r\n        Overlay.prototype.hide = function (delay) {\r\n            var _this = this;\r\n            // Do nothing if the overlay is already hidden.\r\n            if (this._hidden) {\r\n                return;\r\n            }\r\n            // Hide immediately if the delay is <= 0.\r\n            if (delay <= 0) {\r\n                clearTimeout(this._timer);\r\n                this._timer = -1;\r\n                this._hidden = true;\r\n                this.node.classList.add('p-mod-hidden');\r\n                return;\r\n            }\r\n            // Do nothing if a hide is already pending.\r\n            if (this._timer !== -1) {\r\n                return;\r\n            }\r\n            // Otherwise setup the hide timer.\r\n            this._timer = setTimeout(function () {\r\n                _this._timer = -1;\r\n                _this._hidden = true;\r\n                _this.node.classList.add('p-mod-hidden');\r\n            }, delay);\r\n        };\r\n        return Overlay;\r\n    }());\r\n    DockPanel.Overlay = Overlay;\r\n    /**\r\n     * The default implementation of `IRenderer`.\r\n     */\r\n    var Renderer = (function () {\r\n        function Renderer() {\r\n        }\r\n        /**\r\n         * Create a new tab bar for use with a dock panel.\r\n         *\r\n         * @returns A new tab bar for a dock panel.\r\n         */\r\n        Renderer.prototype.createTabBar = function () {\r\n            var bar = new tabbar_1.TabBar();\r\n            bar.addClass('p-DockPanel-tabBar');\r\n            return bar;\r\n        };\r\n        /**\r\n         * Create a new handle node for use with a dock panel.\r\n         *\r\n         * @returns A new handle node for a dock panel.\r\n         */\r\n        Renderer.prototype.createHandle = function () {\r\n            var handle = document.createElement('div');\r\n            handle.className = 'p-DockPanel-handle';\r\n            return handle;\r\n        };\r\n        return Renderer;\r\n    }());\r\n    DockPanel.Renderer = Renderer;\r\n    /**\r\n     * The default `Renderer` instance.\r\n     */\r\n    DockPanel.defaultRenderer = new Renderer();\r\n})(DockPanel = exports.DockPanel || (exports.DockPanel = {}));\r\nexports.DockPanel = DockPanel;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * A fraction used for sizing root panels; ~= `1 / golden_ratio`.\r\n     */\r\n    Private.GOLDEN_RATIO = 0.618;\r\n    /**\r\n     * The size of the edge dock zone for the root panel, in pixels.\r\n     */\r\n    Private.EDGE_SIZE = 40;\r\n    /**\r\n     * A singleton `'layout-modified'` conflatable message.\r\n     */\r\n    Private.LayoutModified = new messaging_1.ConflatableMessage('layout-modified');\r\n    /**\r\n     * An attached property used to track generated tab bars.\r\n     */\r\n    Private.isGeneratedTabBarProperty = new properties_1.AttachedProperty({\r\n        name: 'isGeneratedTabBar',\r\n        create: function () { return false; }\r\n    });\r\n    /**\r\n     * Create a single document config for the widgets in a dock panel.\r\n     */\r\n    function createSingleDocumentConfig(panel) {\r\n        // Return an empty config if the panel is empty.\r\n        if (panel.isEmpty) {\r\n            return { main: null };\r\n        }\r\n        // Get a flat array of the widgets in the panel.\r\n        var widgets = algorithm_1.toArray(panel.widgets());\r\n        // Get the first selected widget in the panel.\r\n        var selected = panel.selectedWidgets().next();\r\n        // Compute the current index for the new config.\r\n        var currentIndex = selected ? widgets.indexOf(selected) : -1;\r\n        // Return the single document config.\r\n        return { main: { type: 'tab-area', widgets: widgets, currentIndex: currentIndex } };\r\n    }\r\n    Private.createSingleDocumentConfig = createSingleDocumentConfig;\r\n    /**\r\n     * Find the drop target at the given client position.\r\n     */\r\n    function findDropTarget(panel, clientX, clientY) {\r\n        // Bail if the mouse is not over the dock panel.\r\n        if (!domutils_1.ElementExt.hitTest(panel.node, clientX, clientY)) {\r\n            return { zone: 'invalid', target: null };\r\n        }\r\n        // Look up the layout for the panel.\r\n        var layout = panel.layout;\r\n        // If the layout is empty, indicate the entire root drop zone.\r\n        if (layout.isEmpty) {\r\n            return { zone: 'root-all', target: null };\r\n        }\r\n        // Test the edge zones when in multiple document mode.\r\n        if (panel.mode === 'multiple-document') {\r\n            // Get the client rect for the dock panel.\r\n            var panelRect = panel.node.getBoundingClientRect();\r\n            // Compute the distance to each edge of the panel.\r\n            var pl = clientX - panelRect.left + 1;\r\n            var pt = clientY - panelRect.top + 1;\r\n            var pr = panelRect.right - clientX;\r\n            var pb = panelRect.bottom - clientY;\r\n            // Find the minimum distance to an edge.\r\n            var pd = Math.min(pl, pt, pr, pb);\r\n            // Return a root zone if the mouse is within an edge.\r\n            if (pd <= Private.EDGE_SIZE) {\r\n                var zone_1;\r\n                switch (pd) {\r\n                    case pl:\r\n                        zone_1 = 'root-left';\r\n                        break;\r\n                    case pt:\r\n                        zone_1 = 'root-top';\r\n                        break;\r\n                    case pr:\r\n                        zone_1 = 'root-right';\r\n                        break;\r\n                    case pb:\r\n                        zone_1 = 'root-bottom';\r\n                        break;\r\n                    default:\r\n                        throw 'unreachable';\r\n                }\r\n                return { zone: zone_1, target: null };\r\n            }\r\n        }\r\n        // Hit test the dock layout at the given client position.\r\n        var target = layout.hitTestTabAreas(clientX, clientY);\r\n        // Bail if no target area was found.\r\n        if (!target) {\r\n            return { zone: 'invalid', target: null };\r\n        }\r\n        // Return the whole tab area when in single document mode.\r\n        if (panel.mode === 'single-document') {\r\n            return { zone: 'widget-all', target: target };\r\n        }\r\n        // Compute the distance to each edge of the tab area.\r\n        var al = target.x - target.left + 1;\r\n        var at = target.y - target.top + 1;\r\n        var ar = target.left + target.width - target.x;\r\n        var ab = target.top + target.height - target.y;\r\n        // Get the X and Y edge sizes for the area.\r\n        var rx = Math.round(target.width / 3);\r\n        var ry = Math.round(target.height / 3);\r\n        // If the mouse is not within an edge, indicate the entire area.\r\n        if (al > rx && ar > rx && at > ry && ab > ry) {\r\n            return { zone: 'widget-all', target: target };\r\n        }\r\n        // Scale the distances by the slenderness ratio.\r\n        al /= rx;\r\n        at /= ry;\r\n        ar /= rx;\r\n        ab /= ry;\r\n        // Find the minimum distance to the area edge.\r\n        var ad = Math.min(al, at, ar, ab);\r\n        // Find the widget zone for the area edge.\r\n        var zone;\r\n        switch (ad) {\r\n            case al:\r\n                zone = 'widget-left';\r\n                break;\r\n            case at:\r\n                zone = 'widget-top';\r\n                break;\r\n            case ar:\r\n                zone = 'widget-right';\r\n                break;\r\n            case ab:\r\n                zone = 'widget-bottom';\r\n                break;\r\n            default:\r\n                throw 'unreachable';\r\n        }\r\n        // Return the final drop target.\r\n        return { zone: zone, target: target };\r\n    }\r\n    Private.findDropTarget = findDropTarget;\r\n    /**\r\n     * Get the drop reference widget for a tab bar.\r\n     */\r\n    function getDropRef(tabBar) {\r\n        if (tabBar.titles.length === 0) {\r\n            return null;\r\n        }\r\n        if (tabBar.currentTitle) {\r\n            return tabBar.currentTitle.owner;\r\n        }\r\n        return tabBar.titles[tabBar.titles.length - 1].owner;\r\n    }\r\n    Private.getDropRef = getDropRef;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\n/**\r\n * A class which tracks focus among a set of widgets.\r\n *\r\n * This class is useful when code needs to keep track of the most\r\n * recently focused widget(s) among a set of related widgets.\r\n */\r\nvar FocusTracker = (function () {\r\n    /**\r\n     * Construct a new focus tracker.\r\n     */\r\n    function FocusTracker() {\r\n        this._counter = 0;\r\n        this._widgets = [];\r\n        this._activeWidget = null;\r\n        this._currentWidget = null;\r\n        this._numbers = new Map();\r\n        this._nodes = new Map();\r\n        this._activeChanged = new signaling_1.Signal(this);\r\n        this._currentChanged = new signaling_1.Signal(this);\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the tracker.\r\n     */\r\n    FocusTracker.prototype.dispose = function () {\r\n        var _this = this;\r\n        // Do nothing if the tracker is already disposed.\r\n        if (this._counter < 0) {\r\n            return;\r\n        }\r\n        // Mark the tracker as disposed.\r\n        this._counter = -1;\r\n        // Clear the connections for the tracker.\r\n        signaling_1.Signal.clearData(this);\r\n        // Remove all event listeners.\r\n        algorithm_1.each(this._widgets, function (w) {\r\n            w.node.removeEventListener('focus', _this, true);\r\n            w.node.removeEventListener('blur', _this, true);\r\n        });\r\n        // Clear the internal data structures.\r\n        this._activeWidget = null;\r\n        this._currentWidget = null;\r\n        this._nodes.clear();\r\n        this._numbers.clear();\r\n        this._widgets.length = 0;\r\n    };\r\n    Object.defineProperty(FocusTracker.prototype, \"currentChanged\", {\r\n        /**\r\n         * A signal emitted when the current widget has changed.\r\n         */\r\n        get: function () {\r\n            return this._currentChanged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusTracker.prototype, \"activeChanged\", {\r\n        /**\r\n         * A signal emitted when the active widget has changed.\r\n         */\r\n        get: function () {\r\n            return this._activeChanged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusTracker.prototype, \"isDisposed\", {\r\n        /**\r\n         * A flag indicating whether the tracker is disposed.\r\n         */\r\n        get: function () {\r\n            return this._counter < 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusTracker.prototype, \"currentWidget\", {\r\n        /**\r\n         * The current widget in the tracker.\r\n         *\r\n         * #### Notes\r\n         * The current widget is the widget among the tracked widgets which\r\n         * has the *descendant node* which has most recently been focused.\r\n         *\r\n         * The current widget will not be updated if the node loses focus. It\r\n         * will only be updated when a different tracked widget gains focus.\r\n         *\r\n         * If the current widget is removed from the tracker, the previous\r\n         * current widget will be restored.\r\n         *\r\n         * This behavior is intended to follow a user's conceptual model of\r\n         * a semantically \"current\" widget, where the \"last thing of type X\"\r\n         * to be interacted with is the \"current instance of X\", regardless\r\n         * of whether that instance still has focus.\r\n         */\r\n        get: function () {\r\n            return this._currentWidget;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusTracker.prototype, \"activeWidget\", {\r\n        /**\r\n         * The active widget in the tracker.\r\n         *\r\n         * #### Notes\r\n         * The active widget is the widget among the tracked widgets which\r\n         * has the *descendant node* which is currently focused.\r\n         */\r\n        get: function () {\r\n            return this._activeWidget;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusTracker.prototype, \"widgets\", {\r\n        /**\r\n         * A read only array of the widgets being tracked.\r\n         */\r\n        get: function () {\r\n            return this._widgets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the focus number for a particular widget in the tracker.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The focus number for the given widget, or `-1` if the\r\n     *   widget has not had focus since being added to the tracker, or\r\n     *   is not contained by the tracker.\r\n     *\r\n     * #### Notes\r\n     * The focus number indicates the relative order in which the widgets\r\n     * have gained focus. A widget with a larger number has gained focus\r\n     * more recently than a widget with a smaller number.\r\n     *\r\n     * The `currentWidget` will always have the largest focus number.\r\n     *\r\n     * All widgets start with a focus number of `-1`, which indicates that\r\n     * the widget has not been focused since being added to the tracker.\r\n     */\r\n    FocusTracker.prototype.focusNumber = function (widget) {\r\n        var n = this._numbers.get(widget);\r\n        return n === undefined ? -1 : n;\r\n    };\r\n    /**\r\n     * Test whether the focus tracker contains a given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns `true` if the widget is tracked, `false` otherwise.\r\n     */\r\n    FocusTracker.prototype.has = function (widget) {\r\n        return this._numbers.has(widget);\r\n    };\r\n    /**\r\n     * Add a widget to the focus tracker.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * #### Notes\r\n     * A widget will be automatically removed from the tracker if it\r\n     * is disposed after being added.\r\n     *\r\n     * If the widget is already tracked, this is a no-op.\r\n     */\r\n    FocusTracker.prototype.add = function (widget) {\r\n        // Do nothing if the widget is already tracked.\r\n        if (this._numbers.has(widget)) {\r\n            return;\r\n        }\r\n        // Test whether the widget has focus.\r\n        var focused = widget.node.contains(document.activeElement);\r\n        // Set up the initial focus number.\r\n        var n = focused ? this._counter++ : -1;\r\n        // Add the widget to the internal data structures.\r\n        this._widgets.push(widget);\r\n        this._numbers.set(widget, n);\r\n        this._nodes.set(widget.node, widget);\r\n        // Set up the event listeners. The capturing phase must be used\r\n        // since the 'focus' and 'blur' events don't bubble and Firefox\r\n        // doesn't support the 'focusin' or 'focusout' events.\r\n        widget.node.addEventListener('focus', this, true);\r\n        widget.node.addEventListener('blur', this, true);\r\n        // Connect the disposed signal handler.\r\n        widget.disposed.connect(this._onWidgetDisposed, this);\r\n        // Set the current and active widgets if needed.\r\n        if (focused) {\r\n            this._setWidgets(widget, widget);\r\n        }\r\n    };\r\n    /**\r\n     * Remove a widget from the focus tracker.\r\n     *\r\n     * #### Notes\r\n     * If the widget is the `currentWidget`, the previous current widget\r\n     * will become the new `currentWidget`.\r\n     *\r\n     * A widget will be automatically removed from the tracker if it\r\n     * is disposed after being added.\r\n     *\r\n     * If the widget is not tracked, this is a no-op.\r\n     */\r\n    FocusTracker.prototype.remove = function (widget) {\r\n        var _this = this;\r\n        // Bail early if the widget is not tracked.\r\n        if (!this._numbers.has(widget)) {\r\n            return;\r\n        }\r\n        // Disconnect the disposed signal handler.\r\n        widget.disposed.disconnect(this._onWidgetDisposed, this);\r\n        // Remove the event listeners.\r\n        widget.node.removeEventListener('focus', this, true);\r\n        widget.node.removeEventListener('blur', this, true);\r\n        // Remove the widget from the internal data structures.\r\n        algorithm_1.ArrayExt.removeFirstOf(this._widgets, widget);\r\n        this._nodes.delete(widget.node);\r\n        this._numbers.delete(widget);\r\n        // Bail early if the widget is not the current widget.\r\n        if (this._currentWidget !== widget) {\r\n            return;\r\n        }\r\n        // Filter the widgets for those which have had focus.\r\n        var valid = algorithm_1.filter(this._widgets, function (w) { return _this._numbers.get(w) !== -1; });\r\n        // Get the valid widget with the max focus number.\r\n        var previous = algorithm_1.max(valid, function (first, second) {\r\n            var a = _this._numbers.get(first);\r\n            var b = _this._numbers.get(second);\r\n            return a - b;\r\n        }) || null;\r\n        // Set the current and active widgets.\r\n        this._setWidgets(previous, null);\r\n    };\r\n    /**\r\n     * Handle the DOM events for the focus tracker.\r\n     *\r\n     * @param event - The DOM event sent to the panel.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the tracked nodes. It should\r\n     * not be called directly by user code.\r\n     */\r\n    FocusTracker.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'focus':\r\n                this._evtFocus(event);\r\n                break;\r\n            case 'blur':\r\n                this._evtBlur(event);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Set the current and active widgets for the tracker.\r\n     */\r\n    FocusTracker.prototype._setWidgets = function (current, active) {\r\n        // Swap the current widget.\r\n        var oldCurrent = this._currentWidget;\r\n        this._currentWidget = current;\r\n        // Swap the active widget.\r\n        var oldActive = this._activeWidget;\r\n        this._activeWidget = active;\r\n        // Emit the `currentChanged` signal if needed.\r\n        if (oldCurrent !== current) {\r\n            this._currentChanged.emit({ oldValue: oldCurrent, newValue: current });\r\n        }\r\n        // Emit the `activeChanged` signal if needed.\r\n        if (oldActive !== active) {\r\n            this._activeChanged.emit({ oldValue: oldActive, newValue: active });\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'focus'` event for a tracked widget.\r\n     */\r\n    FocusTracker.prototype._evtFocus = function (event) {\r\n        // Find the widget which gained focus, which is known to exist.\r\n        var widget = this._nodes.get(event.currentTarget);\r\n        // Update the focus number if necessary.\r\n        if (widget !== this._currentWidget) {\r\n            this._numbers.set(widget, this._counter++);\r\n        }\r\n        // Set the current and active widgets.\r\n        this._setWidgets(widget, widget);\r\n    };\r\n    /**\r\n     * Handle the `'blur'` event for a tracked widget.\r\n     */\r\n    FocusTracker.prototype._evtBlur = function (event) {\r\n        // Find the widget which lost focus, which is known to exist.\r\n        var widget = this._nodes.get(event.currentTarget);\r\n        // Get the node which being focused after this blur.\r\n        var focusTarget = event.relatedTarget;\r\n        // If no other node is being focused, clear the active widget.\r\n        if (!focusTarget) {\r\n            this._setWidgets(this._currentWidget, null);\r\n            return;\r\n        }\r\n        // Bail if the focus widget is not changing.\r\n        if (widget.node.contains(focusTarget)) {\r\n            return;\r\n        }\r\n        // If no tracked widget is being focused, clear the active widget.\r\n        if (!algorithm_1.find(this._widgets, function (w) { return w.node.contains(focusTarget); })) {\r\n            this._setWidgets(this._currentWidget, null);\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `disposed` signal for a tracked widget.\r\n     */\r\n    FocusTracker.prototype._onWidgetDisposed = function (sender) {\r\n        this.remove(sender);\r\n    };\r\n    return FocusTracker;\r\n}());\r\nexports.FocusTracker = FocusTracker;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar properties_1 = require(\"@phosphor/properties\");\r\nvar boxengine_1 = require(\"./boxengine\");\r\nvar layout_1 = require(\"./layout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A layout which arranges its widgets in a grid.\r\n */\r\nvar GridLayout = (function (_super) {\r\n    __extends(GridLayout, _super);\r\n    /**\r\n     * Construct a new grid layout.\r\n     *\r\n     * @param options - The options for initializing the layout.\r\n     */\r\n    function GridLayout(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, options) || this;\r\n        _this._dirty = false;\r\n        _this._rowSpacing = 4;\r\n        _this._columnSpacing = 4;\r\n        _this._items = [];\r\n        _this._rowStarts = [];\r\n        _this._columnStarts = [];\r\n        _this._rowSizers = [new boxengine_1.BoxSizer()];\r\n        _this._columnSizers = [new boxengine_1.BoxSizer()];\r\n        _this._box = null;\r\n        if (options.rowCount !== undefined) {\r\n            Private.reallocSizers(_this._rowSizers, options.rowCount);\r\n        }\r\n        if (options.columnCount !== undefined) {\r\n            Private.reallocSizers(_this._columnSizers, options.columnCount);\r\n        }\r\n        if (options.rowSpacing !== undefined) {\r\n            _this._rowSpacing = Private.clampValue(options.rowSpacing);\r\n        }\r\n        if (options.columnSpacing !== undefined) {\r\n            _this._columnSpacing = Private.clampValue(options.columnSpacing);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     */\r\n    GridLayout.prototype.dispose = function () {\r\n        // Dispose of the widgets and layout items.\r\n        algorithm_1.each(this._items, function (item) {\r\n            var widget = item.widget;\r\n            item.dispose();\r\n            widget.dispose();\r\n        });\r\n        // Clear the layout state.\r\n        this._box = null;\r\n        this._items.length = 0;\r\n        this._rowStarts.length = 0;\r\n        this._rowSizers.length = 0;\r\n        this._columnStarts.length = 0;\r\n        this._columnSizers.length = 0;\r\n        // Dispose of the rest of the layout.\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(GridLayout.prototype, \"rowCount\", {\r\n        /**\r\n         * Get the number of rows in the layout.\r\n         */\r\n        get: function () {\r\n            return this._rowSizers.length;\r\n        },\r\n        /**\r\n         * Set the number of rows in the layout.\r\n         *\r\n         * #### Notes\r\n         * The minimum row count is `1`.\r\n         */\r\n        set: function (value) {\r\n            // Do nothing if the row count does not change.\r\n            if (value === this.rowCount) {\r\n                return;\r\n            }\r\n            // Reallocate the row sizers.\r\n            Private.reallocSizers(this._rowSizers, value);\r\n            // Schedule a fit of the parent.\r\n            if (this.parent) {\r\n                this.parent.fit();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GridLayout.prototype, \"columnCount\", {\r\n        /**\r\n         * Get the number of columns in the layout.\r\n         */\r\n        get: function () {\r\n            return this._columnSizers.length;\r\n        },\r\n        /**\r\n         * Set the number of columns in the layout.\r\n         *\r\n         * #### Notes\r\n         * The minimum column count is `1`.\r\n         */\r\n        set: function (value) {\r\n            // Do nothing if the column count does not change.\r\n            if (value === this.columnCount) {\r\n                return;\r\n            }\r\n            // Reallocate the column sizers.\r\n            Private.reallocSizers(this._columnSizers, value);\r\n            // Schedule a fit of the parent.\r\n            if (this.parent) {\r\n                this.parent.fit();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GridLayout.prototype, \"rowSpacing\", {\r\n        /**\r\n         * Get the row spacing for the layout.\r\n         */\r\n        get: function () {\r\n            return this._rowSpacing;\r\n        },\r\n        /**\r\n         * Set the row spacing for the layout.\r\n         */\r\n        set: function (value) {\r\n            // Clamp the spacing to the allowed range.\r\n            value = Private.clampValue(value);\r\n            // Bail if the spacing does not change\r\n            if (this._rowSpacing === value) {\r\n                return;\r\n            }\r\n            // Update the internal spacing.\r\n            this._rowSpacing = value;\r\n            // Schedule a fit of the parent.\r\n            if (this.parent) {\r\n                this.parent.fit();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GridLayout.prototype, \"columnSpacing\", {\r\n        /**\r\n         * Get the column spacing for the layout.\r\n         */\r\n        get: function () {\r\n            return this._columnSpacing;\r\n        },\r\n        /**\r\n         * Set the col spacing for the layout.\r\n         */\r\n        set: function (value) {\r\n            // Clamp the spacing to the allowed range.\r\n            value = Private.clampValue(value);\r\n            // Bail if the spacing does not change\r\n            if (this._columnSpacing === value) {\r\n                return;\r\n            }\r\n            // Update the internal spacing.\r\n            this._columnSpacing = value;\r\n            // Schedule a fit of the parent.\r\n            if (this.parent) {\r\n                this.parent.fit();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the stretch factor for a specific row.\r\n     *\r\n     * @param index - The row index of interest.\r\n     *\r\n     * @returns The stretch factor for the row.\r\n     *\r\n     * #### Notes\r\n     * This returns `-1` if the index is out of range.\r\n     */\r\n    GridLayout.prototype.rowStretch = function (index) {\r\n        var sizer = this._rowSizers[index];\r\n        return sizer ? sizer.stretch : -1;\r\n    };\r\n    /**\r\n     * Set the stretch factor for a specific row.\r\n     *\r\n     * @param index - The row index of interest.\r\n     *\r\n     * @param value - The stretch factor for the row.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the index is out of range.\r\n     */\r\n    GridLayout.prototype.setRowStretch = function (index, value) {\r\n        // Look up the row sizer.\r\n        var sizer = this._rowSizers[index];\r\n        // Bail if the index is out of range.\r\n        if (!sizer) {\r\n            return;\r\n        }\r\n        // Clamp the value to the allowed range.\r\n        value = Private.clampValue(value);\r\n        // Bail if the stretch does not change.\r\n        if (sizer.stretch === value) {\r\n            return;\r\n        }\r\n        // Update the sizer stretch.\r\n        sizer.stretch = value;\r\n        // Schedule an update of the parent.\r\n        if (this.parent) {\r\n            this.parent.update();\r\n        }\r\n    };\r\n    /**\r\n     * Get the stretch factor for a specific column.\r\n     *\r\n     * @param index - The column index of interest.\r\n     *\r\n     * @returns The stretch factor for the column.\r\n     *\r\n     * #### Notes\r\n     * This returns `-1` if the index is out of range.\r\n     */\r\n    GridLayout.prototype.columnStretch = function (index) {\r\n        var sizer = this._columnSizers[index];\r\n        return sizer ? sizer.stretch : -1;\r\n    };\r\n    /**\r\n     * Set the stretch factor for a specific column.\r\n     *\r\n     * @param index - The column index of interest.\r\n     *\r\n     * @param value - The stretch factor for the column.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the index is out of range.\r\n     */\r\n    GridLayout.prototype.setColumnStretch = function (index, value) {\r\n        // Look up the column sizer.\r\n        var sizer = this._columnSizers[index];\r\n        // Bail if the index is out of range.\r\n        if (!sizer) {\r\n            return;\r\n        }\r\n        // Clamp the value to the allowed range.\r\n        value = Private.clampValue(value);\r\n        // Bail if the stretch does not change.\r\n        if (sizer.stretch === value) {\r\n            return;\r\n        }\r\n        // Update the sizer stretch.\r\n        sizer.stretch = value;\r\n        // Schedule an update of the parent.\r\n        if (this.parent) {\r\n            this.parent.update();\r\n        }\r\n    };\r\n    /**\r\n     * Create an iterator over the widgets in the layout.\r\n     *\r\n     * @returns A new iterator over the widgets in the layout.\r\n     */\r\n    GridLayout.prototype.iter = function () {\r\n        return algorithm_1.map(this._items, function (item) { return item.widget; });\r\n    };\r\n    /**\r\n     * Add a widget to the grid layout.\r\n     *\r\n     * @param widget - The widget to add to the layout.\r\n     *\r\n     * #### Notes\r\n     * If the widget is already contained in the layout, this is no-op.\r\n     */\r\n    GridLayout.prototype.addWidget = function (widget) {\r\n        // Look up the index for the widget.\r\n        var i = algorithm_1.ArrayExt.findFirstIndex(this._items, function (it) { return it.widget === widget; });\r\n        // Bail if the widget is already in the layout.\r\n        if (i !== -1) {\r\n            return;\r\n        }\r\n        // Add the widget to the layout.\r\n        this._items.push(new layout_1.LayoutItem(widget));\r\n        // Attach the widget to the parent.\r\n        if (this.parent) {\r\n            this.attachWidget(widget);\r\n        }\r\n    };\r\n    /**\r\n     * Remove a widget from the grid layout.\r\n     *\r\n     * @param widget - The widget to remove from the layout.\r\n     *\r\n     * #### Notes\r\n     * A widget is automatically removed from the layout when its `parent`\r\n     * is set to `null`. This method should only be invoked directly when\r\n     * removing a widget from a layout which has yet to be installed on a\r\n     * parent widget.\r\n     *\r\n     * This method does *not* modify the widget's `parent`.\r\n     */\r\n    GridLayout.prototype.removeWidget = function (widget) {\r\n        // Look up the index for the widget.\r\n        var i = algorithm_1.ArrayExt.findFirstIndex(this._items, function (it) { return it.widget === widget; });\r\n        // Bail if the widget is not in the layout.\r\n        if (i !== -1) {\r\n            return;\r\n        }\r\n        // Remove the widget from the layout.\r\n        var item = algorithm_1.ArrayExt.removeAt(this._items, i);\r\n        // Detach the widget from the parent.\r\n        if (this.parent) {\r\n            this.detachWidget(widget);\r\n        }\r\n        // Dispose the layout item.\r\n        item.dispose();\r\n    };\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    GridLayout.prototype.init = function () {\r\n        var _this = this;\r\n        _super.prototype.init.call(this);\r\n        algorithm_1.each(this, function (widget) { _this.attachWidget(widget); });\r\n    };\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     */\r\n    GridLayout.prototype.attachWidget = function (widget) {\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Add the widget's node to the parent.\r\n        this.parent.node.appendChild(widget.node);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     */\r\n    GridLayout.prototype.detachWidget = function (widget) {\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget's node from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        // Send an `'after-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-show'` message.\r\n     */\r\n    GridLayout.prototype.onBeforeShow = function (msg) {\r\n        _super.prototype.onBeforeShow.call(this, msg);\r\n        this.parent.update();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    GridLayout.prototype.onBeforeAttach = function (msg) {\r\n        _super.prototype.onBeforeAttach.call(this, msg);\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     */\r\n    GridLayout.prototype.onChildShown = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     */\r\n    GridLayout.prototype.onChildHidden = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     */\r\n    GridLayout.prototype.onResize = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(msg.width, msg.height);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    GridLayout.prototype.onUpdateRequest = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(-1, -1);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     */\r\n    GridLayout.prototype.onFitRequest = function (msg) {\r\n        if (this.parent.isAttached) {\r\n            this._fit();\r\n        }\r\n    };\r\n    /**\r\n     * Fit the layout to the total size required by the widgets.\r\n     */\r\n    GridLayout.prototype._fit = function () {\r\n        // Reset the min sizes of the sizers.\r\n        for (var i = 0, n = this.rowCount; i < n; ++i) {\r\n            this._rowSizers[i].minSize = 0;\r\n        }\r\n        for (var i = 0, n = this.columnCount; i < n; ++i) {\r\n            this._columnSizers[i].minSize = 0;\r\n        }\r\n        // Filter for the visible layout items.\r\n        var items = this._items.filter(function (it) { return !it.isHidden; });\r\n        // Fit the layout items.\r\n        for (var i = 0, n = items.length; i < n; ++i) {\r\n            items[i].fit();\r\n        }\r\n        // Get the max row and column index.\r\n        var maxRow = this.rowCount - 1;\r\n        var maxCol = this.columnCount - 1;\r\n        // Sort the items by row span.\r\n        items.sort(Private.rowSpanCmp);\r\n        // Update the min sizes of the row sizers.\r\n        for (var i = 0, n = items.length; i < n; ++i) {\r\n            // Fetch the item.\r\n            var item = items[i];\r\n            // Get the row bounds for the item.\r\n            var config = GridLayout.getCellConfig(item.widget);\r\n            var r1 = Math.min(config.row, maxRow);\r\n            var r2 = Math.min(config.row + config.rowSpan - 1, maxRow);\r\n            // Distribute the minimum height to the sizers as needed.\r\n            Private.distributeMin(this._rowSizers, r1, r2, item.minHeight);\r\n        }\r\n        // Sort the items by column span.\r\n        items.sort(Private.columnSpanCmp);\r\n        // Update the min sizes of the column sizers.\r\n        for (var i = 0, n = items.length; i < n; ++i) {\r\n            // Fetch the item.\r\n            var item = items[i];\r\n            // Get the column bounds for the item.\r\n            var config = GridLayout.getCellConfig(item.widget);\r\n            var c1 = Math.min(config.column, maxCol);\r\n            var c2 = Math.min(config.column + config.columnSpan - 1, maxCol);\r\n            // Distribute the minimum width to the sizers as needed.\r\n            Private.distributeMin(this._columnSizers, c1, c2, item.minWidth);\r\n        }\r\n        // If no size constraint is needed, just update the parent.\r\n        if (this.fitPolicy === 'set-no-constraint') {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widget_1.Widget.Msg.UpdateRequest);\r\n            return;\r\n        }\r\n        // Set up the computed min size.\r\n        var minH = maxRow * this._rowSpacing;\r\n        var minW = maxCol * this._columnSpacing;\r\n        // Add the sizer minimums to the computed min size.\r\n        for (var i = 0, n = this.rowCount; i < n; ++i) {\r\n            minH += this._rowSizers[i].minSize;\r\n        }\r\n        for (var i = 0, n = this.columnCount; i < n; ++i) {\r\n            minW += this._columnSizers[i].minSize;\r\n        }\r\n        // Update the box sizing and add it to the computed min size.\r\n        var box = this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        minW += box.horizontalSum;\r\n        minH += box.verticalSum;\r\n        // Update the parent's min size constraints.\r\n        var style = this.parent.node.style;\r\n        style.minWidth = minW + \"px\";\r\n        style.minHeight = minH + \"px\";\r\n        // Set the dirty flag to ensure only a single update occurs.\r\n        this._dirty = true;\r\n        // Notify the ancestor that it should fit immediately. This may\r\n        // cause a resize of the parent, fulfilling the required update.\r\n        if (this.parent.parent) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent.parent, widget_1.Widget.Msg.FitRequest);\r\n        }\r\n        // If the dirty flag is still set, the parent was not resized.\r\n        // Trigger the required update on the parent widget immediately.\r\n        if (this._dirty) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widget_1.Widget.Msg.UpdateRequest);\r\n        }\r\n    };\r\n    /**\r\n     * Update the layout position and size of the widgets.\r\n     *\r\n     * The parent offset dimensions should be `-1` if unknown.\r\n     */\r\n    GridLayout.prototype._update = function (offsetWidth, offsetHeight) {\r\n        // Clear the dirty flag to indicate the update occurred.\r\n        this._dirty = false;\r\n        // Measure the parent if the offset dimensions are unknown.\r\n        if (offsetWidth < 0) {\r\n            offsetWidth = this.parent.node.offsetWidth;\r\n        }\r\n        if (offsetHeight < 0) {\r\n            offsetHeight = this.parent.node.offsetHeight;\r\n        }\r\n        // Ensure the parent box sizing data is computed.\r\n        if (!this._box) {\r\n            this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        }\r\n        // Compute the layout area adjusted for border and padding.\r\n        var top = this._box.paddingTop;\r\n        var left = this._box.paddingLeft;\r\n        var width = offsetWidth - this._box.horizontalSum;\r\n        var height = offsetHeight - this._box.verticalSum;\r\n        // Get the max row and column index.\r\n        var maxRow = this.rowCount - 1;\r\n        var maxCol = this.columnCount - 1;\r\n        // Compute the total fixed row and column space.\r\n        var fixedRowSpace = maxRow * this._rowSpacing;\r\n        var fixedColSpace = maxCol * this._columnSpacing;\r\n        // Distribute the available space to the box sizers.\r\n        boxengine_1.BoxEngine.calc(this._rowSizers, Math.max(0, height - fixedRowSpace));\r\n        boxengine_1.BoxEngine.calc(this._columnSizers, Math.max(0, width - fixedColSpace));\r\n        // Update the row start positions.\r\n        for (var i = 0, pos = top, n = this.rowCount; i < n; ++i) {\r\n            this._rowStarts[i] = pos;\r\n            pos += this._rowSizers[i].size + this._rowSpacing;\r\n        }\r\n        // Update the column start positions.\r\n        for (var i = 0, pos = left, n = this.columnCount; i < n; ++i) {\r\n            this._columnStarts[i] = pos;\r\n            pos += this._columnSizers[i].size + this._columnSpacing;\r\n        }\r\n        // Update the geometry of the layout items.\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            // Fetch the item.\r\n            var item = this._items[i];\r\n            // Ignore hidden items.\r\n            if (item.isHidden) {\r\n                continue;\r\n            }\r\n            // Fetch the cell bounds for the widget.\r\n            var config = GridLayout.getCellConfig(item.widget);\r\n            var r1 = Math.min(config.row, maxRow);\r\n            var c1 = Math.min(config.column, maxCol);\r\n            var r2 = Math.min(config.row + config.rowSpan - 1, maxRow);\r\n            var c2 = Math.min(config.column + config.columnSpan - 1, maxCol);\r\n            // Compute the cell geometry.\r\n            var x = this._columnStarts[c1];\r\n            var y = this._rowStarts[r1];\r\n            var w = this._columnStarts[c2] + this._columnSizers[c2].size - x;\r\n            var h = this._rowStarts[r2] + this._rowSizers[r2].size - y;\r\n            // Update the geometry of the layout item.\r\n            item.update(x, y, w, h);\r\n        }\r\n    };\r\n    return GridLayout;\r\n}(layout_1.Layout));\r\nexports.GridLayout = GridLayout;\r\n/**\r\n * The namespace for the `GridLayout` class statics.\r\n */\r\n(function (GridLayout) {\r\n    /**\r\n     * Get the cell config for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The cell config for the widget.\r\n     */\r\n    function getCellConfig(widget) {\r\n        return Private.cellConfigProperty.get(widget);\r\n    }\r\n    GridLayout.getCellConfig = getCellConfig;\r\n    /**\r\n     * Set the cell config for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the cell config.\r\n     */\r\n    function setCellConfig(widget, value) {\r\n        Private.cellConfigProperty.set(widget, Private.normalizeConfig(value));\r\n    }\r\n    GridLayout.setCellConfig = setCellConfig;\r\n})(GridLayout = exports.GridLayout || (exports.GridLayout = {}));\r\nexports.GridLayout = GridLayout;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The property descriptor for the widget cell config.\r\n     */\r\n    Private.cellConfigProperty = new properties_1.AttachedProperty({\r\n        name: 'cellConfig',\r\n        create: function () { return ({ row: 0, column: 0, rowSpan: 1, columnSpan: 1 }); },\r\n        changed: onChildCellConfigChanged\r\n    });\r\n    /**\r\n     * Normalize a partial cell config object.\r\n     */\r\n    function normalizeConfig(config) {\r\n        var row = Math.max(0, Math.floor(config.row || 0));\r\n        var column = Math.max(0, Math.floor(config.column || 0));\r\n        var rowSpan = Math.max(1, Math.floor(config.rowSpan || 0));\r\n        var columnSpan = Math.max(1, Math.floor(config.columnSpan || 0));\r\n        return { row: row, column: column, rowSpan: rowSpan, columnSpan: columnSpan };\r\n    }\r\n    Private.normalizeConfig = normalizeConfig;\r\n    /**\r\n     * Clamp a value to an integer >= 0.\r\n     */\r\n    function clampValue(value) {\r\n        return Math.max(0, Math.floor(value));\r\n    }\r\n    Private.clampValue = clampValue;\r\n    /**\r\n     * A sort comparison function for row spans.\r\n     */\r\n    function rowSpanCmp(a, b) {\r\n        var c1 = Private.cellConfigProperty.get(a.widget);\r\n        var c2 = Private.cellConfigProperty.get(b.widget);\r\n        return c1.rowSpan - c2.rowSpan;\r\n    }\r\n    Private.rowSpanCmp = rowSpanCmp;\r\n    /**\r\n     * A sort comparison function for column spans.\r\n     */\r\n    function columnSpanCmp(a, b) {\r\n        var c1 = Private.cellConfigProperty.get(a.widget);\r\n        var c2 = Private.cellConfigProperty.get(b.widget);\r\n        return c1.columnSpan - c2.columnSpan;\r\n    }\r\n    Private.columnSpanCmp = columnSpanCmp;\r\n    /**\r\n     * Reallocate the box sizers for the given grid dimensions.\r\n     */\r\n    function reallocSizers(sizers, count) {\r\n        // Coerce the count to the valid range.\r\n        count = Math.max(1, Math.floor(count));\r\n        // Add the missing sizers.\r\n        while (sizers.length < count) {\r\n            sizers.push(new boxengine_1.BoxSizer());\r\n        }\r\n        // Remove the extra sizers.\r\n        if (sizers.length < count) {\r\n            sizers.length = count;\r\n        }\r\n    }\r\n    Private.reallocSizers = reallocSizers;\r\n    /**\r\n     * Distribute a min size constraint across a range of sizers.\r\n     */\r\n    function distributeMin(sizers, i1, i2, minSize) {\r\n        // Sanity check the indices.\r\n        if (i2 < i1) {\r\n            return;\r\n        }\r\n        // Handle the simple case of no cell span.\r\n        if (i1 === i2) {\r\n            var sizer = sizers[i1];\r\n            sizer.minSize = Math.max(sizer.minSize, minSize);\r\n            return;\r\n        }\r\n        // Compute the total current min size of the span.\r\n        var totalMin = 0;\r\n        for (var i = i1; i <= i2; ++i) {\r\n            totalMin += sizers[i].minSize;\r\n        }\r\n        // Do nothing if the total is greater than the required.\r\n        if (totalMin >= minSize) {\r\n            return;\r\n        }\r\n        // Compute the portion of the space to allocate to each sizer.\r\n        var portion = (minSize - totalMin) / (i2 - i1 + 1);\r\n        // Add the portion to each sizer.\r\n        for (var i = i1; i <= i2; ++i) {\r\n            sizers[i].minSize += portion;\r\n        }\r\n    }\r\n    Private.distributeMin = distributeMin;\r\n    /**\r\n     * The change handler for the child cell config property.\r\n     */\r\n    function onChildCellConfigChanged(child) {\r\n        if (child.parent && child.parent.layout instanceof GridLayout) {\r\n            child.parent.fit();\r\n        }\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\n__export(require(\"./boxengine\"));\r\n__export(require(\"./boxlayout\"));\r\n__export(require(\"./boxpanel\"));\r\n__export(require(\"./commandpalette\"));\r\n__export(require(\"./contextmenu\"));\r\n__export(require(\"./docklayout\"));\r\n__export(require(\"./dockpanel\"));\r\n__export(require(\"./focustracker\"));\r\n__export(require(\"./gridlayout\"));\r\n__export(require(\"./layout\"));\r\n__export(require(\"./menu\"));\r\n__export(require(\"./menubar\"));\r\n__export(require(\"./panel\"));\r\n__export(require(\"./panellayout\"));\r\n__export(require(\"./scrollbar\"));\r\n__export(require(\"./singletonlayout\"));\r\n__export(require(\"./splitlayout\"));\r\n__export(require(\"./splitpanel\"));\r\n__export(require(\"./stackedlayout\"));\r\n__export(require(\"./stackedpanel\"));\r\n__export(require(\"./tabbar\"));\r\n__export(require(\"./tabpanel\"));\r\n__export(require(\"./title\"));\r\n__export(require(\"./widget\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar properties_1 = require(\"@phosphor/properties\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * An abstract base class for creating Phosphor layouts.\r\n *\r\n * #### Notes\r\n * A layout is used to add widgets to a parent and to arrange those\r\n * widgets within the parent's DOM node.\r\n *\r\n * This class implements the base functionality which is required of\r\n * nearly all layouts. It must be subclassed in order to be useful.\r\n *\r\n * Notably, this class does not define a uniform interface for adding\r\n * widgets to the layout. A subclass should define that API in a way\r\n * which is meaningful for its intended use.\r\n */\r\nvar Layout = (function () {\r\n    /**\r\n     * Construct a new layout.\r\n     *\r\n     * @param options - The options for initializing the layout.\r\n     */\r\n    function Layout(options) {\r\n        if (options === void 0) { options = {}; }\r\n        this._disposed = false;\r\n        this._parent = null;\r\n        this._fitPolicy = options.fitPolicy || 'set-min-size';\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     *\r\n     * #### Notes\r\n     * This should be reimplemented to clear and dispose of the widgets.\r\n     *\r\n     * All reimplementations should call the superclass method.\r\n     *\r\n     * This method is called automatically when the parent is disposed.\r\n     */\r\n    Layout.prototype.dispose = function () {\r\n        this._parent = null;\r\n        this._disposed = true;\r\n        signaling_1.Signal.clearData(this);\r\n        properties_1.AttachedProperty.clearData(this);\r\n    };\r\n    Object.defineProperty(Layout.prototype, \"isDisposed\", {\r\n        /**\r\n         * Test whether the layout is disposed.\r\n         */\r\n        get: function () {\r\n            return this._disposed;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Layout.prototype, \"parent\", {\r\n        /**\r\n         * Get the parent widget of the layout.\r\n         */\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        /**\r\n         * Set the parent widget of the layout.\r\n         *\r\n         * #### Notes\r\n         * This is set automatically when installing the layout on the parent\r\n         * widget. The parent widget should not be set directly by user code.\r\n         */\r\n        set: function (value) {\r\n            if (this._parent === value) {\r\n                return;\r\n            }\r\n            if (this._parent) {\r\n                throw new Error('Cannot change parent widget.');\r\n            }\r\n            if (value.layout !== this) {\r\n                throw new Error('Invalid parent widget.');\r\n            }\r\n            this._parent = value;\r\n            this.init();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Layout.prototype, \"fitPolicy\", {\r\n        /**\r\n         * Get the fit policy for the layout.\r\n         *\r\n         * #### Notes\r\n         * The fit policy controls the computed size constraints which are\r\n         * applied to the parent widget by the layout.\r\n         *\r\n         * Some layout implementations may ignore the fit policy.\r\n         */\r\n        get: function () {\r\n            return this._fitPolicy;\r\n        },\r\n        /**\r\n         * Set the fit policy for the layout.\r\n         *\r\n         * #### Notes\r\n         * The fit policy controls the computed size constraints which are\r\n         * applied to the parent widget by the layout.\r\n         *\r\n         * Some layout implementations may ignore the fit policy.\r\n         *\r\n         * Changing the fit policy will clear the current size constraint\r\n         * for the parent widget and then re-fit the parent.\r\n         */\r\n        set: function (value) {\r\n            // Bail if the policy does not change\r\n            if (this._fitPolicy === value) {\r\n                return;\r\n            }\r\n            // Update the internal policy.\r\n            this._fitPolicy = value;\r\n            // Clear the size constraints and schedule a fit of the parent.\r\n            if (this._parent) {\r\n                var style = this._parent.node.style;\r\n                style.minWidth = '';\r\n                style.minHeight = '';\r\n                style.maxWidth = '';\r\n                style.maxHeight = '';\r\n                this._parent.fit();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Process a message sent to the parent widget.\r\n     *\r\n     * @param msg - The message sent to the parent widget.\r\n     *\r\n     * #### Notes\r\n     * This method is called by the parent widget to process a message.\r\n     *\r\n     * Subclasses may reimplement this method as needed.\r\n     */\r\n    Layout.prototype.processParentMessage = function (msg) {\r\n        switch (msg.type) {\r\n            case 'resize':\r\n                this.onResize(msg);\r\n                break;\r\n            case 'update-request':\r\n                this.onUpdateRequest(msg);\r\n                break;\r\n            case 'fit-request':\r\n                this.onFitRequest(msg);\r\n                break;\r\n            case 'before-show':\r\n                this.onBeforeShow(msg);\r\n                break;\r\n            case 'after-show':\r\n                this.onAfterShow(msg);\r\n                break;\r\n            case 'before-hide':\r\n                this.onBeforeHide(msg);\r\n                break;\r\n            case 'after-hide':\r\n                this.onAfterHide(msg);\r\n                break;\r\n            case 'before-attach':\r\n                this.onBeforeAttach(msg);\r\n                break;\r\n            case 'after-attach':\r\n                this.onAfterAttach(msg);\r\n                break;\r\n            case 'before-detach':\r\n                this.onBeforeDetach(msg);\r\n                break;\r\n            case 'after-detach':\r\n                this.onAfterDetach(msg);\r\n                break;\r\n            case 'child-removed':\r\n                this.onChildRemoved(msg);\r\n                break;\r\n            case 'child-shown':\r\n                this.onChildShown(msg);\r\n                break;\r\n            case 'child-hidden':\r\n                this.onChildHidden(msg);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     *\r\n     * #### Notes\r\n     * This method is invoked immediately after the layout is installed\r\n     * on the parent widget.\r\n     *\r\n     * The default implementation reparents all of the widgets to the\r\n     * layout parent widget.\r\n     *\r\n     * Subclasses should reimplement this method and attach the child\r\n     * widget nodes to the parent widget's node.\r\n     */\r\n    Layout.prototype.init = function () {\r\n        var _this = this;\r\n        algorithm_1.each(this, function (widget) {\r\n            widget.parent = _this.parent;\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     *\r\n     * #### Notes\r\n     * The layout should ensure that its widgets are resized according\r\n     * to the specified layout space, and that they are sent a `'resize'`\r\n     * message if appropriate.\r\n     *\r\n     * The default implementation of this method sends an `UnknownSize`\r\n     * resize message to all widgets.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onResize = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.ResizeMessage.UnknownSize);\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     *\r\n     * #### Notes\r\n     * The layout should ensure that its widgets are resized according\r\n     * to the available layout space, and that they are sent a `'resize'`\r\n     * message if appropriate.\r\n     *\r\n     * The default implementation of this method sends an `UnknownSize`\r\n     * resize message to all widgets.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onUpdateRequest = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.ResizeMessage.UnknownSize);\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message\r\n     * to all widgets. It assumes all widget nodes are attached to the\r\n     * parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onBeforeAttach = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            messaging_1.MessageLoop.sendMessage(widget, msg);\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-attach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message\r\n     * to all widgets. It assumes all widget nodes are attached to the\r\n     * parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onAfterAttach = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            messaging_1.MessageLoop.sendMessage(widget, msg);\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-detach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message\r\n     * to all widgets. It assumes all widget nodes are attached to the\r\n     * parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onBeforeDetach = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            messaging_1.MessageLoop.sendMessage(widget, msg);\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message\r\n     * to all widgets. It assumes all widget nodes are attached to the\r\n     * parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onAfterDetach = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            messaging_1.MessageLoop.sendMessage(widget, msg);\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-show'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message to\r\n     * all non-hidden widgets. It assumes all widget nodes are attached\r\n     * to the parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onBeforeShow = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            if (!widget.isHidden) {\r\n                messaging_1.MessageLoop.sendMessage(widget, msg);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-show'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message to\r\n     * all non-hidden widgets. It assumes all widget nodes are attached\r\n     * to the parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onAfterShow = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            if (!widget.isHidden) {\r\n                messaging_1.MessageLoop.sendMessage(widget, msg);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-hide'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message to\r\n     * all non-hidden widgets. It assumes all widget nodes are attached\r\n     * to the parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onBeforeHide = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            if (!widget.isHidden) {\r\n                messaging_1.MessageLoop.sendMessage(widget, msg);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-hide'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this method forwards the message to\r\n     * all non-hidden widgets. It assumes all widget nodes are attached\r\n     * to the parent widget node.\r\n     *\r\n     * This may be reimplemented by subclasses as needed.\r\n     */\r\n    Layout.prototype.onAfterHide = function (msg) {\r\n        algorithm_1.each(this, function (widget) {\r\n            if (!widget.isHidden) {\r\n                messaging_1.MessageLoop.sendMessage(widget, msg);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     *\r\n     * #### Notes\r\n     * This will remove the child widget from the layout.\r\n     *\r\n     * Subclasses should **not** typically reimplement this method.\r\n     */\r\n    Layout.prototype.onChildRemoved = function (msg) {\r\n        this.removeWidget(msg.child);\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Layout.prototype.onFitRequest = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Layout.prototype.onChildShown = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Layout.prototype.onChildHidden = function (msg) { };\r\n    return Layout;\r\n}());\r\nexports.Layout = Layout;\r\n/**\r\n * The namespace for the `Layout` class statics.\r\n */\r\n(function (Layout) {\r\n    /**\r\n     * Get the horizontal alignment for a widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The horizontal alignment for the widget.\r\n     *\r\n     * #### Notes\r\n     * If the layout width allocated to a widget is larger than its max\r\n     * width, the horizontal alignment controls how the widget is placed\r\n     * within the extra horizontal space.\r\n     *\r\n     * If the allocated width is less than the widget's max width, the\r\n     * horizontal alignment has no effect.\r\n     *\r\n     * Some layout implementations may ignore horizontal alignment.\r\n     */\r\n    function getHorizontalAlignment(widget) {\r\n        return Private.horizontalAlignmentProperty.get(widget);\r\n    }\r\n    Layout.getHorizontalAlignment = getHorizontalAlignment;\r\n    /**\r\n     * Set the horizontal alignment for a widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the horizontal alignment.\r\n     *\r\n     * #### Notes\r\n     * If the layout width allocated to a widget is larger than its max\r\n     * width, the horizontal alignment controls how the widget is placed\r\n     * within the extra horizontal space.\r\n     *\r\n     * If the allocated width is less than the widget's max width, the\r\n     * horizontal alignment has no effect.\r\n     *\r\n     * Some layout implementations may ignore horizontal alignment.\r\n     *\r\n     * Changing the horizontal alignment will post an `update-request`\r\n     * message to widget's parent, provided the parent has a layout\r\n     * installed.\r\n     */\r\n    function setHorizontalAlignment(widget, value) {\r\n        Private.horizontalAlignmentProperty.set(widget, value);\r\n    }\r\n    Layout.setHorizontalAlignment = setHorizontalAlignment;\r\n    /**\r\n     * Get the vertical alignment for a widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The vertical alignment for the widget.\r\n     *\r\n     * #### Notes\r\n     * If the layout height allocated to a widget is larger than its max\r\n     * height, the vertical alignment controls how the widget is placed\r\n     * within the extra vertical space.\r\n     *\r\n     * If the allocated height is less than the widget's max height, the\r\n     * vertical alignment has no effect.\r\n     *\r\n     * Some layout implementations may ignore vertical alignment.\r\n     */\r\n    function getVerticalAlignment(widget) {\r\n        return Private.verticalAlignmentProperty.get(widget);\r\n    }\r\n    Layout.getVerticalAlignment = getVerticalAlignment;\r\n    /**\r\n     * Set the vertical alignment for a widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the vertical alignment.\r\n     *\r\n     * #### Notes\r\n     * If the layout height allocated to a widget is larger than its max\r\n     * height, the vertical alignment controls how the widget is placed\r\n     * within the extra vertical space.\r\n     *\r\n     * If the allocated height is less than the widget's max height, the\r\n     * vertical alignment has no effect.\r\n     *\r\n     * Some layout implementations may ignore vertical alignment.\r\n     *\r\n     * Changing the horizontal alignment will post an `update-request`\r\n     * message to widget's parent, provided the parent has a layout\r\n     * installed.\r\n     */\r\n    function setVerticalAlignment(widget, value) {\r\n        Private.verticalAlignmentProperty.set(widget, value);\r\n    }\r\n    Layout.setVerticalAlignment = setVerticalAlignment;\r\n})(Layout = exports.Layout || (exports.Layout = {}));\r\nexports.Layout = Layout;\r\n/**\r\n * An object which assists in the absolute layout of widgets.\r\n *\r\n * #### Notes\r\n * This class is useful when implementing a layout which arranges its\r\n * widgets using absolute positioning.\r\n *\r\n * This class is used by nearly all of the built-in Phosphor layouts.\r\n */\r\nvar LayoutItem = (function () {\r\n    /**\r\n     * Construct a new layout item.\r\n     *\r\n     * @param widget - The widget to be managed by the item.\r\n     *\r\n     * #### Notes\r\n     * The widget will be set to absolute positioning.\r\n     */\r\n    function LayoutItem(widget) {\r\n        this._top = NaN;\r\n        this._left = NaN;\r\n        this._width = NaN;\r\n        this._height = NaN;\r\n        this._minWidth = 0;\r\n        this._minHeight = 0;\r\n        this._maxWidth = Infinity;\r\n        this._maxHeight = Infinity;\r\n        this._disposed = false;\r\n        this.widget = widget;\r\n        this.widget.node.style.position = 'absolute';\r\n    }\r\n    /**\r\n     * Dispose of the the layout item.\r\n     *\r\n     * #### Notes\r\n     * This will reset the positioning of the widget.\r\n     */\r\n    LayoutItem.prototype.dispose = function () {\r\n        // Do nothing if the item is already disposed.\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n        // Mark the item as disposed.\r\n        this._disposed = true;\r\n        // Reset the widget style.\r\n        var style = this.widget.node.style;\r\n        style.position = '';\r\n        style.top = '';\r\n        style.left = '';\r\n        style.width = '';\r\n        style.height = '';\r\n    };\r\n    Object.defineProperty(LayoutItem.prototype, \"minWidth\", {\r\n        /**\r\n         * The computed minimum width of the widget.\r\n         *\r\n         * #### Notes\r\n         * This value can be updated by calling the `fit` method.\r\n         */\r\n        get: function () {\r\n            return this._minWidth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LayoutItem.prototype, \"minHeight\", {\r\n        /**\r\n         * The computed minimum height of the widget.\r\n         *\r\n         * #### Notes\r\n         * This value can be updated by calling the `fit` method.\r\n         */\r\n        get: function () {\r\n            return this._minHeight;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LayoutItem.prototype, \"maxWidth\", {\r\n        /**\r\n         * The computed maximum width of the widget.\r\n         *\r\n         * #### Notes\r\n         * This value can be updated by calling the `fit` method.\r\n         */\r\n        get: function () {\r\n            return this._maxWidth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LayoutItem.prototype, \"maxHeight\", {\r\n        /**\r\n         * The computed maximum height of the widget.\r\n         *\r\n         * #### Notes\r\n         * This value can be updated by calling the `fit` method.\r\n         */\r\n        get: function () {\r\n            return this._maxHeight;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LayoutItem.prototype, \"isDisposed\", {\r\n        /**\r\n         * Whether the layout item is disposed.\r\n         */\r\n        get: function () {\r\n            return this._disposed;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LayoutItem.prototype, \"isHidden\", {\r\n        /**\r\n         * Whether the managed widget is hidden.\r\n         */\r\n        get: function () {\r\n            return this.widget.isHidden;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LayoutItem.prototype, \"isVisible\", {\r\n        /**\r\n         * Whether the managed widget is visible.\r\n         */\r\n        get: function () {\r\n            return this.widget.isVisible;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LayoutItem.prototype, \"isAttached\", {\r\n        /**\r\n         * Whether the managed widget is attached.\r\n         */\r\n        get: function () {\r\n            return this.widget.isAttached;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Update the computed size limits of the managed widget.\r\n     */\r\n    LayoutItem.prototype.fit = function () {\r\n        var limits = domutils_1.ElementExt.sizeLimits(this.widget.node);\r\n        this._minWidth = limits.minWidth;\r\n        this._minHeight = limits.minHeight;\r\n        this._maxWidth = limits.maxWidth;\r\n        this._maxHeight = limits.maxHeight;\r\n    };\r\n    /**\r\n     * Update the position and size of the managed widget.\r\n     *\r\n     * @param left - The left edge position of the layout box.\r\n     *\r\n     * @param top - The top edge position of the layout box.\r\n     *\r\n     * @param width - The width of the layout box.\r\n     *\r\n     * @param height - The height of the layout box.\r\n     */\r\n    LayoutItem.prototype.update = function (left, top, width, height) {\r\n        // Clamp the size to the computed size limits.\r\n        var clampW = Math.max(this._minWidth, Math.min(width, this._maxWidth));\r\n        var clampH = Math.max(this._minHeight, Math.min(height, this._maxHeight));\r\n        // Ajdust the left edge for the horizontal alignment, if needed.\r\n        if (clampW < width) {\r\n            switch (Layout.getHorizontalAlignment(this.widget)) {\r\n                case 'left':\r\n                    break;\r\n                case 'center':\r\n                    left += (width - clampW) / 2;\r\n                    break;\r\n                case 'right':\r\n                    left += width - clampW;\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n        }\r\n        // Ajdust the top edge for the vertical alignment, if needed.\r\n        if (clampH < height) {\r\n            switch (Layout.getVerticalAlignment(this.widget)) {\r\n                case 'top':\r\n                    break;\r\n                case 'center':\r\n                    top += (height - clampH) / 2;\r\n                    break;\r\n                case 'bottom':\r\n                    top += height - clampH;\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n        }\r\n        // Set up the resize variables.\r\n        var resized = false;\r\n        var style = this.widget.node.style;\r\n        // Update the top edge of the widget if needed.\r\n        if (this._top !== top) {\r\n            this._top = top;\r\n            style.top = top + \"px\";\r\n        }\r\n        // Update the left edge of the widget if needed.\r\n        if (this._left !== left) {\r\n            this._left = left;\r\n            style.left = left + \"px\";\r\n        }\r\n        // Update the width of the widget if needed.\r\n        if (this._width !== clampW) {\r\n            resized = true;\r\n            this._width = clampW;\r\n            style.width = clampW + \"px\";\r\n        }\r\n        // Update the height of the widget if needed.\r\n        if (this._height !== clampH) {\r\n            resized = true;\r\n            this._height = clampH;\r\n            style.height = clampH + \"px\";\r\n        }\r\n        // Send a resize message to the widget if needed.\r\n        if (resized) {\r\n            var msg = new widget_1.Widget.ResizeMessage(clampW, clampH);\r\n            messaging_1.MessageLoop.sendMessage(this.widget, msg);\r\n        }\r\n    };\r\n    return LayoutItem;\r\n}());\r\nexports.LayoutItem = LayoutItem;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The attached property for a widget horizontal alignment.\r\n     */\r\n    Private.horizontalAlignmentProperty = new properties_1.AttachedProperty({\r\n        name: 'horizontalAlignment',\r\n        create: function () { return 'center'; },\r\n        changed: onAlignmentChanged\r\n    });\r\n    /**\r\n     * The attached property for a widget vertical alignment.\r\n     */\r\n    Private.verticalAlignmentProperty = new properties_1.AttachedProperty({\r\n        name: 'verticalAlignment',\r\n        create: function () { return 'top'; },\r\n        changed: onAlignmentChanged\r\n    });\r\n    /**\r\n     * The change handler for the attached alignment properties.\r\n     */\r\n    function onAlignmentChanged(child) {\r\n        if (child.parent && child.parent.layout) {\r\n            child.parent.update();\r\n        }\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar commands_1 = require(\"@phosphor/commands\");\r\nvar coreutils_1 = require(\"@phosphor/coreutils\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar keyboard_1 = require(\"@phosphor/keyboard\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar virtualdom_1 = require(\"@phosphor/virtualdom\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A widget which displays items as a canonical menu.\r\n */\r\nvar Menu = (function (_super) {\r\n    __extends(Menu, _super);\r\n    /**\r\n     * Construct a new menu.\r\n     *\r\n     * @param options - The options for initializing the menu.\r\n     */\r\n    function Menu(options) {\r\n        var _this = _super.call(this, { node: Private.createNode() }) || this;\r\n        _this._childIndex = -1;\r\n        _this._activeIndex = -1;\r\n        _this._openTimerID = 0;\r\n        _this._closeTimerID = 0;\r\n        _this._items = [];\r\n        _this._childMenu = null;\r\n        _this._parentMenu = null;\r\n        _this._aboutToClose = new signaling_1.Signal(_this);\r\n        _this._menuRequested = new signaling_1.Signal(_this);\r\n        _this.addClass('p-Menu');\r\n        _this.setFlag(widget_1.Widget.Flag.DisallowLayout);\r\n        _this.commands = options.commands;\r\n        _this.renderer = options.renderer || Menu.defaultRenderer;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the menu.\r\n     */\r\n    Menu.prototype.dispose = function () {\r\n        this.close();\r\n        this._items.length = 0;\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(Menu.prototype, \"aboutToClose\", {\r\n        /**\r\n         * A signal emitted just before the menu is closed.\r\n         *\r\n         * #### Notes\r\n         * This signal is emitted when the menu receives a `'close-request'`\r\n         * message, just before it removes itself from the DOM.\r\n         *\r\n         * This signal is not emitted if the menu is already detached from\r\n         * the DOM when it receives the `'close-request'` message.\r\n         */\r\n        get: function () {\r\n            return this._aboutToClose;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"menuRequested\", {\r\n        /**\r\n         * A signal emitted when a new menu is requested by the user.\r\n         *\r\n         * #### Notes\r\n         * This signal is emitted whenever the user presses the right or left\r\n         * arrow keys, and a submenu cannot be opened or closed in response.\r\n         *\r\n         * This signal is useful when implementing menu bars in order to open\r\n         * the next or previous menu in response to a user key press.\r\n         *\r\n         * This signal is only emitted for the root menu in a hierarchy.\r\n         */\r\n        get: function () {\r\n            return this._menuRequested;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"parentMenu\", {\r\n        /**\r\n         * The parent menu of the menu.\r\n         *\r\n         * #### Notes\r\n         * This is `null` unless the menu is an open submenu.\r\n         */\r\n        get: function () {\r\n            return this._parentMenu;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"childMenu\", {\r\n        /**\r\n         * The child menu of the menu.\r\n         *\r\n         * #### Notes\r\n         * This is `null` unless the menu has an open submenu.\r\n         */\r\n        get: function () {\r\n            return this._childMenu;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"rootMenu\", {\r\n        /**\r\n         * The root menu of the menu hierarchy.\r\n         */\r\n        get: function () {\r\n            var menu = this;\r\n            while (menu._parentMenu) {\r\n                menu = menu._parentMenu;\r\n            }\r\n            return menu;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"leafMenu\", {\r\n        /**\r\n         * The leaf menu of the menu hierarchy.\r\n         */\r\n        get: function () {\r\n            var menu = this;\r\n            while (menu._childMenu) {\r\n                menu = menu._childMenu;\r\n            }\r\n            return menu;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"contentNode\", {\r\n        /**\r\n         * The menu content node.\r\n         *\r\n         * #### Notes\r\n         * This is the node which holds the menu item nodes.\r\n         *\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-Menu-content')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"activeItem\", {\r\n        /**\r\n         * Get the currently active menu item.\r\n         */\r\n        get: function () {\r\n            return this._items[this._activeIndex] || null;\r\n        },\r\n        /**\r\n         * Set the currently active menu item.\r\n         *\r\n         * #### Notes\r\n         * If the item cannot be activated, the item will be set to `null`.\r\n         */\r\n        set: function (value) {\r\n            this.activeIndex = value ? this._items.indexOf(value) : -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"activeIndex\", {\r\n        /**\r\n         * Get the index of the currently active menu item.\r\n         *\r\n         * #### Notes\r\n         * This will be `-1` if no menu item is active.\r\n         */\r\n        get: function () {\r\n            return this._activeIndex;\r\n        },\r\n        /**\r\n         * Set the index of the currently active menu item.\r\n         *\r\n         * #### Notes\r\n         * If the item cannot be activated, the index will be set to `-1`.\r\n         */\r\n        set: function (value) {\r\n            // Adjust the value for an out of range index.\r\n            if (value < 0 || value >= this._items.length) {\r\n                value = -1;\r\n            }\r\n            // Ensure the item can be activated.\r\n            if (value !== -1 && !Private.canActivate(this._items[value])) {\r\n                value = -1;\r\n            }\r\n            // Bail if the index will not change.\r\n            if (this._activeIndex === value) {\r\n                return;\r\n            }\r\n            // Update the active index.\r\n            this._activeIndex = value;\r\n            // schedule an update of the items.\r\n            this.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Menu.prototype, \"items\", {\r\n        /**\r\n         * A read-only array of the menu items in the menu.\r\n         */\r\n        get: function () {\r\n            return this._items;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Activate the next selectable item in the menu.\r\n     *\r\n     * #### Notes\r\n     * If no item is selectable, the index will be set to `-1`.\r\n     */\r\n    Menu.prototype.activateNextItem = function () {\r\n        var n = this._items.length;\r\n        var ai = this._activeIndex;\r\n        var start = ai < n - 1 ? ai + 1 : 0;\r\n        var stop = start === 0 ? n - 1 : start - 1;\r\n        this.activeIndex = algorithm_1.ArrayExt.findFirstIndex(this._items, Private.canActivate, start, stop);\r\n    };\r\n    /**\r\n     * Activate the previous selectable item in the menu.\r\n     *\r\n     * #### Notes\r\n     * If no item is selectable, the index will be set to `-1`.\r\n     */\r\n    Menu.prototype.activatePreviousItem = function () {\r\n        var n = this._items.length;\r\n        var ai = this._activeIndex;\r\n        var start = ai <= 0 ? n - 1 : ai - 1;\r\n        var stop = start === n - 1 ? 0 : start + 1;\r\n        this.activeIndex = algorithm_1.ArrayExt.findLastIndex(this._items, Private.canActivate, start, stop);\r\n    };\r\n    /**\r\n     * Trigger the active menu item.\r\n     *\r\n     * #### Notes\r\n     * If the active item is a submenu, it will be opened and the first\r\n     * item will be activated.\r\n     *\r\n     * If the active item is a command, the command will be executed.\r\n     *\r\n     * If the menu is not attached, this is a no-op.\r\n     *\r\n     * If there is no active item, this is a no-op.\r\n     */\r\n    Menu.prototype.triggerActiveItem = function () {\r\n        // Bail if the menu is not attached.\r\n        if (!this.isAttached) {\r\n            return;\r\n        }\r\n        // Bail if there is no active item.\r\n        var item = this.activeItem;\r\n        if (!item) {\r\n            return;\r\n        }\r\n        // Cancel the pending timers.\r\n        this._cancelOpenTimer();\r\n        this._cancelCloseTimer();\r\n        // If the item is a submenu, open it.\r\n        if (item.type === 'submenu') {\r\n            this._openChildMenu(true);\r\n            return;\r\n        }\r\n        // Close the root menu before executing the command.\r\n        this.rootMenu.close();\r\n        // Execute the command for the item.\r\n        var command = item.command, args = item.args;\r\n        if (this.commands.isEnabled(command, args)) {\r\n            this.commands.execute(command, args);\r\n        }\r\n        else {\r\n            console.log(\"Command '\" + command + \"' is disabled.\");\r\n        }\r\n    };\r\n    /**\r\n     * Add a menu item to the end of the menu.\r\n     *\r\n     * @param options - The options for creating the menu item.\r\n     *\r\n     * @returns The menu item added to the menu.\r\n     */\r\n    Menu.prototype.addItem = function (options) {\r\n        return this.insertItem(this._items.length, options);\r\n    };\r\n    /**\r\n     * Insert a menu item into the menu at the specified index.\r\n     *\r\n     * @param index - The index at which to insert the item.\r\n     *\r\n     * @param options - The options for creating the menu item.\r\n     *\r\n     * @returns The menu item added to the menu.\r\n     *\r\n     * #### Notes\r\n     * The index will be clamped to the bounds of the items.\r\n     */\r\n    Menu.prototype.insertItem = function (index, options) {\r\n        // Close the menu if it's attached.\r\n        if (this.isAttached) {\r\n            this.close();\r\n        }\r\n        // Reset the active index.\r\n        this.activeIndex = -1;\r\n        // Clamp the insert index to the array bounds.\r\n        var i = Math.max(0, Math.min(index, this._items.length));\r\n        // Create the item for the options.\r\n        var item = Private.createItem(this, options);\r\n        // Insert the item into the array.\r\n        algorithm_1.ArrayExt.insert(this._items, i, item);\r\n        // Schedule an update of the items.\r\n        this.update();\r\n        // Return the item added to the menu.\r\n        return item;\r\n    };\r\n    /**\r\n     * Remove an item from the menu.\r\n     *\r\n     * @param item - The item to remove from the menu.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the item is not in the menu.\r\n     */\r\n    Menu.prototype.removeItem = function (item) {\r\n        this.removeItemAt(this._items.indexOf(item));\r\n    };\r\n    /**\r\n     * Remove the item at a given index from the menu.\r\n     *\r\n     * @param index - The index of the item to remove.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the index is out of range.\r\n     */\r\n    Menu.prototype.removeItemAt = function (index) {\r\n        // Close the menu if it's attached.\r\n        if (this.isAttached) {\r\n            this.close();\r\n        }\r\n        // Reset the active index.\r\n        this.activeIndex = -1;\r\n        // Remove the item from the array.\r\n        var item = algorithm_1.ArrayExt.removeAt(this._items, index);\r\n        // Bail if the index is out of range.\r\n        if (!item) {\r\n            return;\r\n        }\r\n        // Schedule an update of the items.\r\n        this.update();\r\n    };\r\n    /**\r\n     * Remove all menu items from the menu.\r\n     */\r\n    Menu.prototype.clearItems = function () {\r\n        // Close the menu if it's attached.\r\n        if (this.isAttached) {\r\n            this.close();\r\n        }\r\n        // Reset the active index.\r\n        this.activeIndex = -1;\r\n        // Bail if there is nothing to remove.\r\n        if (this._items.length === 0) {\r\n            return;\r\n        }\r\n        // Clear the items.\r\n        this._items.length = 0;\r\n        // Schedule an update of the items.\r\n        this.update();\r\n    };\r\n    /**\r\n     * Open the menu at the specified location.\r\n     *\r\n     * @param x - The client X coordinate of the menu location.\r\n     *\r\n     * @param y - The client Y coordinate of the menu location.\r\n     *\r\n     * @param options - The additional options for opening the menu.\r\n     *\r\n     * #### Notes\r\n     * The menu will be opened at the given location unless it will not\r\n     * fully fit on the screen. If it will not fit, it will be adjusted\r\n     * to fit naturally on the screen.\r\n     *\r\n     * This is a no-op if the menu is already attached to the DOM.\r\n     */\r\n    Menu.prototype.open = function (x, y, options) {\r\n        if (options === void 0) { options = {}; }\r\n        // Bail early if the menu is already attached.\r\n        if (this.isAttached) {\r\n            return;\r\n        }\r\n        // Extract the position options.\r\n        var forceX = options.forceX || false;\r\n        var forceY = options.forceY || false;\r\n        // Open the menu as a root menu.\r\n        Private.openRootMenu(this, x, y, forceX, forceY);\r\n        // Activate the menu to accept keyboard input.\r\n        this.activate();\r\n    };\r\n    /**\r\n     * Handle the DOM events for the menu.\r\n     *\r\n     * @param event - The DOM event sent to the menu.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the menu's DOM nodes. It should\r\n     * not be called directly by user code.\r\n     */\r\n    Menu.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtMouseUp(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtMouseMove(event);\r\n                break;\r\n            case 'mouseenter':\r\n                this._evtMouseEnter(event);\r\n                break;\r\n            case 'mouseleave':\r\n                this._evtMouseLeave(event);\r\n                break;\r\n            case 'mousedown':\r\n                this._evtMouseDown(event);\r\n                break;\r\n            case 'contextmenu':\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    Menu.prototype.onBeforeAttach = function (msg) {\r\n        this.node.addEventListener('keydown', this);\r\n        this.node.addEventListener('mouseup', this);\r\n        this.node.addEventListener('mousemove', this);\r\n        this.node.addEventListener('mouseenter', this);\r\n        this.node.addEventListener('mouseleave', this);\r\n        this.node.addEventListener('contextmenu', this);\r\n        document.addEventListener('mousedown', this, true);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     */\r\n    Menu.prototype.onAfterDetach = function (msg) {\r\n        this.node.removeEventListener('keydown', this);\r\n        this.node.removeEventListener('mouseup', this);\r\n        this.node.removeEventListener('mousemove', this);\r\n        this.node.removeEventListener('mouseenter', this);\r\n        this.node.removeEventListener('mouseleave', this);\r\n        this.node.removeEventListener('contextmenu', this);\r\n        document.removeEventListener('mousedown', this, true);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'activate-request'` message.\r\n     */\r\n    Menu.prototype.onActivateRequest = function (msg) {\r\n        if (this.isAttached) {\r\n            this.node.focus();\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    Menu.prototype.onUpdateRequest = function (msg) {\r\n        var items = this._items;\r\n        var renderer = this.renderer;\r\n        var activeIndex = this._activeIndex;\r\n        var collapsedFlags = Private.computeCollapsed(items);\r\n        var content = new Array(items.length);\r\n        for (var i = 0, n = items.length; i < n; ++i) {\r\n            var item = items[i];\r\n            var active = i === activeIndex;\r\n            var collapsed = collapsedFlags[i];\r\n            content[i] = renderer.renderItem({ item: item, active: active, collapsed: collapsed });\r\n        }\r\n        virtualdom_1.VirtualDOM.render(content, this.contentNode);\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'close-request'` message.\r\n     */\r\n    Menu.prototype.onCloseRequest = function (msg) {\r\n        // Cancel the pending timers.\r\n        this._cancelOpenTimer();\r\n        this._cancelCloseTimer();\r\n        // Reset the active index.\r\n        this.activeIndex = -1;\r\n        // Close any open child menu.\r\n        var childMenu = this._childMenu;\r\n        if (childMenu) {\r\n            this._childIndex = -1;\r\n            this._childMenu = null;\r\n            childMenu._parentMenu = null;\r\n            childMenu.close();\r\n        }\r\n        // Remove this menu from its parent and activate the parent.\r\n        var parentMenu = this._parentMenu;\r\n        if (parentMenu) {\r\n            this._parentMenu = null;\r\n            parentMenu._childIndex = -1;\r\n            parentMenu._childMenu = null;\r\n            parentMenu.activate();\r\n        }\r\n        // Emit the `aboutToClose` signal if the menu is attached.\r\n        if (this.isAttached) {\r\n            this._aboutToClose.emit(undefined);\r\n        }\r\n        // Finish closing the menu.\r\n        _super.prototype.onCloseRequest.call(this, msg);\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the menu.\r\n     *\r\n     * #### Notes\r\n     * This listener is attached to the menu node.\r\n     */\r\n    Menu.prototype._evtKeyDown = function (event) {\r\n        // A menu handles all keydown events.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Fetch the key code for the event.\r\n        var kc = event.keyCode;\r\n        // Enter\r\n        if (kc === 13) {\r\n            this.triggerActiveItem();\r\n            return;\r\n        }\r\n        // Escape\r\n        if (kc === 27) {\r\n            this.close();\r\n            return;\r\n        }\r\n        // Left Arrow\r\n        if (kc === 37) {\r\n            if (this._parentMenu) {\r\n                this.close();\r\n            }\r\n            else {\r\n                this._menuRequested.emit('previous');\r\n            }\r\n            return;\r\n        }\r\n        // Up Arrow\r\n        if (kc === 38) {\r\n            this.activatePreviousItem();\r\n            return;\r\n        }\r\n        // Right Arrow\r\n        if (kc === 39) {\r\n            var item = this.activeItem;\r\n            if (item && item.type === 'submenu') {\r\n                this.triggerActiveItem();\r\n            }\r\n            else {\r\n                this.rootMenu._menuRequested.emit('next');\r\n            }\r\n            return;\r\n        }\r\n        // Down Arrow\r\n        if (kc === 40) {\r\n            this.activateNextItem();\r\n            return;\r\n        }\r\n        // Get the pressed key character.\r\n        var key = keyboard_1.getKeyboardLayout().keyForKeydownEvent(event);\r\n        // Bail if the key is not valid.\r\n        if (!key) {\r\n            return;\r\n        }\r\n        // Search for the next best matching mnemonic item.\r\n        var start = this._activeIndex + 1;\r\n        var result = Private.findMnemonic(this._items, key, start);\r\n        // Handle the requested mnemonic based on the search results.\r\n        // If exactly one mnemonic is matched, that item is triggered.\r\n        // Otherwise, the next mnemonic is activated if available,\r\n        // followed by the auto mnemonic if available.\r\n        if (result.index !== -1 && !result.multiple) {\r\n            this.activeIndex = result.index;\r\n            this.triggerActiveItem();\r\n        }\r\n        else if (result.index !== -1) {\r\n            this.activeIndex = result.index;\r\n        }\r\n        else if (result.auto !== -1) {\r\n            this.activeIndex = result.auto;\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mouseup'` event for the menu.\r\n     *\r\n     * #### Notes\r\n     * This listener is attached to the menu node.\r\n     */\r\n    Menu.prototype._evtMouseUp = function (event) {\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.triggerActiveItem();\r\n    };\r\n    /**\r\n     * Handle the `'mousemove'` event for the menu.\r\n     *\r\n     * #### Notes\r\n     * This listener is attached to the menu node.\r\n     */\r\n    Menu.prototype._evtMouseMove = function (event) {\r\n        // Hit test the item nodes for the item under the mouse.\r\n        var index = algorithm_1.ArrayExt.findFirstIndex(this.contentNode.children, function (node) {\r\n            return domutils_1.ElementExt.hitTest(node, event.clientX, event.clientY);\r\n        });\r\n        // Bail early if the mouse is already over the active index.\r\n        if (index === this._activeIndex) {\r\n            return;\r\n        }\r\n        // Update and coerce the active index.\r\n        this.activeIndex = index;\r\n        index = this.activeIndex;\r\n        // If the index is the current child index, cancel the timers.\r\n        if (index === this._childIndex) {\r\n            this._cancelOpenTimer();\r\n            this._cancelCloseTimer();\r\n            return;\r\n        }\r\n        // If a child menu is currently open, start the close timer.\r\n        if (this._childIndex !== -1) {\r\n            this._startCloseTimer();\r\n        }\r\n        // Cancel the open timer to give a full delay for opening.\r\n        this._cancelOpenTimer();\r\n        // Bail if the active item is not a valid submenu item.\r\n        var item = this.activeItem;\r\n        if (!item || item.type !== 'submenu' || !item.submenu) {\r\n            return;\r\n        }\r\n        // Start the open timer to open the active item submenu.\r\n        this._startOpenTimer();\r\n    };\r\n    /**\r\n     * Handle the `'mouseenter'` event for the menu.\r\n     *\r\n     * #### Notes\r\n     * This listener is attached to the menu node.\r\n     */\r\n    Menu.prototype._evtMouseEnter = function (event) {\r\n        // Synchronize the active ancestor items.\r\n        for (var menu = this._parentMenu; menu; menu = menu._parentMenu) {\r\n            menu._cancelOpenTimer();\r\n            menu._cancelCloseTimer();\r\n            menu.activeIndex = menu._childIndex;\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mouseleave'` event for the menu.\r\n     *\r\n     * #### Notes\r\n     * This listener is attached to the menu node.\r\n     */\r\n    Menu.prototype._evtMouseLeave = function (event) {\r\n        // Cancel any pending submenu opening.\r\n        this._cancelOpenTimer();\r\n        // If there is no open child menu, just reset the active index.\r\n        if (!this._childMenu) {\r\n            this.activeIndex = -1;\r\n            return;\r\n        }\r\n        // If the mouse is over the child menu, cancel the close timer.\r\n        var clientX = event.clientX, clientY = event.clientY;\r\n        if (domutils_1.ElementExt.hitTest(this._childMenu.node, clientX, clientY)) {\r\n            this._cancelCloseTimer();\r\n            return;\r\n        }\r\n        // Otherwise, reset the active index and start the close timer.\r\n        this.activeIndex = -1;\r\n        this._startCloseTimer();\r\n    };\r\n    /**\r\n     * Handle the `'mousedown'` event for the menu.\r\n     *\r\n     * #### Notes\r\n     * This listener is attached to the document node.\r\n     */\r\n    Menu.prototype._evtMouseDown = function (event) {\r\n        // Bail if the menu is not a root menu.\r\n        if (this._parentMenu) {\r\n            return;\r\n        }\r\n        // The mouse button which is pressed is irrelevant. If the press\r\n        // is not on a menu, the entire hierarchy is closed and the event\r\n        // is allowed to propagate. This allows other code to act on the\r\n        // event, such as focusing the clicked element.\r\n        if (Private.hitTestMenus(this, event.clientX, event.clientY)) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        else {\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     * Open the child menu at the active index immediately.\r\n     *\r\n     * If a different child menu is already open, it will be closed,\r\n     * even if the active item is not a valid submenu.\r\n     */\r\n    Menu.prototype._openChildMenu = function (activateFirst) {\r\n        if (activateFirst === void 0) { activateFirst = false; }\r\n        // If the item is not a valid submenu, close the child menu.\r\n        var item = this.activeItem;\r\n        if (!item || item.type !== 'submenu' || !item.submenu) {\r\n            this._closeChildMenu();\r\n            return;\r\n        }\r\n        // Do nothing if the child menu will not change.\r\n        var submenu = item.submenu;\r\n        if (submenu === this._childMenu) {\r\n            return;\r\n        }\r\n        // Ensure the current child menu is closed.\r\n        this._closeChildMenu();\r\n        // Update the private child state.\r\n        this._childMenu = submenu;\r\n        this._childIndex = this._activeIndex;\r\n        // Set the parent menu reference for the child.\r\n        submenu._parentMenu = this;\r\n        // Ensure the menu is updated and lookup the item node.\r\n        messaging_1.MessageLoop.sendMessage(this, widget_1.Widget.Msg.UpdateRequest);\r\n        var itemNode = this.contentNode.children[this._activeIndex];\r\n        // Open the submenu at the active node.\r\n        Private.openSubmenu(submenu, itemNode);\r\n        // Activate the first item if desired.\r\n        if (activateFirst) {\r\n            submenu.activeIndex = -1;\r\n            submenu.activateNextItem();\r\n        }\r\n        // Activate the child menu.\r\n        submenu.activate();\r\n    };\r\n    /**\r\n     * Close the child menu immediately.\r\n     *\r\n     * This is a no-op if a child menu is not open.\r\n     */\r\n    Menu.prototype._closeChildMenu = function () {\r\n        if (this._childMenu) {\r\n            this._childMenu.close();\r\n        }\r\n    };\r\n    /**\r\n     * Start the open timer, unless it is already pending.\r\n     */\r\n    Menu.prototype._startOpenTimer = function () {\r\n        var _this = this;\r\n        if (this._openTimerID === 0) {\r\n            this._openTimerID = setTimeout(function () {\r\n                _this._openTimerID = 0;\r\n                _this._openChildMenu();\r\n            }, Private.TIMER_DELAY);\r\n        }\r\n    };\r\n    /**\r\n     * Start the close timer, unless it is already pending.\r\n     */\r\n    Menu.prototype._startCloseTimer = function () {\r\n        var _this = this;\r\n        if (this._closeTimerID === 0) {\r\n            this._closeTimerID = setTimeout(function () {\r\n                _this._closeTimerID = 0;\r\n                _this._closeChildMenu();\r\n            }, Private.TIMER_DELAY);\r\n        }\r\n    };\r\n    /**\r\n     * Cancel the open timer, if the timer is pending.\r\n     */\r\n    Menu.prototype._cancelOpenTimer = function () {\r\n        if (this._openTimerID !== 0) {\r\n            clearTimeout(this._openTimerID);\r\n            this._openTimerID = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Cancel the close timer, if the timer is pending.\r\n     */\r\n    Menu.prototype._cancelCloseTimer = function () {\r\n        if (this._closeTimerID !== 0) {\r\n            clearTimeout(this._closeTimerID);\r\n            this._closeTimerID = 0;\r\n        }\r\n    };\r\n    return Menu;\r\n}(widget_1.Widget));\r\nexports.Menu = Menu;\r\n/**\r\n * The namespace for the `Menu` class statics.\r\n */\r\n(function (Menu) {\r\n    /**\r\n     * The default implementation of `IRenderer`.\r\n     *\r\n     * #### Notes\r\n     * Subclasses are free to reimplement rendering methods as needed.\r\n     */\r\n    var Renderer = (function () {\r\n        /**\r\n         * Construct a new renderer.\r\n         */\r\n        function Renderer() {\r\n        }\r\n        /**\r\n         * Render the virtual element for a menu item.\r\n         *\r\n         * @param data - The data to use for rendering the item.\r\n         *\r\n         * @returns A virtual element representing the item.\r\n         */\r\n        Renderer.prototype.renderItem = function (data) {\r\n            var className = this.createItemClass(data);\r\n            var dataset = this.createItemDataset(data);\r\n            return (virtualdom_1.h.li({ className: className, dataset: dataset }, this.renderIcon(data), this.renderLabel(data), this.renderShortcut(data), this.renderSubmenu(data)));\r\n        };\r\n        /**\r\n         * Render the icon element for a menu item.\r\n         *\r\n         * @param data - The data to use for rendering the icon.\r\n         *\r\n         * @returns A virtual element representing the item icon.\r\n         */\r\n        Renderer.prototype.renderIcon = function (data) {\r\n            var className = this.createIconClass(data);\r\n            return virtualdom_1.h.div({ className: className }, data.item.iconLabel);\r\n        };\r\n        /**\r\n         * Render the label element for a menu item.\r\n         *\r\n         * @param data - The data to use for rendering the label.\r\n         *\r\n         * @returns A virtual element representing the item label.\r\n         */\r\n        Renderer.prototype.renderLabel = function (data) {\r\n            var content = this.formatLabel(data);\r\n            return virtualdom_1.h.div({ className: 'p-Menu-itemLabel' }, content);\r\n        };\r\n        /**\r\n         * Render the shortcut element for a menu item.\r\n         *\r\n         * @param data - The data to use for rendering the shortcut.\r\n         *\r\n         * @returns A virtual element representing the item shortcut.\r\n         */\r\n        Renderer.prototype.renderShortcut = function (data) {\r\n            var content = this.formatShortcut(data);\r\n            return virtualdom_1.h.div({ className: 'p-Menu-itemShortcut' }, content);\r\n        };\r\n        /**\r\n         * Render the submenu icon element for a menu item.\r\n         *\r\n         * @param data - The data to use for rendering the submenu icon.\r\n         *\r\n         * @returns A virtual element representing the submenu icon.\r\n         */\r\n        Renderer.prototype.renderSubmenu = function (data) {\r\n            return virtualdom_1.h.div({ className: 'p-Menu-itemSubmenuIcon' });\r\n        };\r\n        /**\r\n         * Create the class name for the menu item.\r\n         *\r\n         * @param data - The data to use for the class name.\r\n         *\r\n         * @returns The full class name for the menu item.\r\n         */\r\n        Renderer.prototype.createItemClass = function (data) {\r\n            // Setup the initial class name.\r\n            var name = 'p-Menu-item';\r\n            // Add the boolean state classes.\r\n            if (!data.item.isEnabled) {\r\n                name += ' p-mod-disabled';\r\n            }\r\n            if (data.item.isToggled) {\r\n                name += ' p-mod-toggled';\r\n            }\r\n            if (!data.item.isVisible) {\r\n                name += ' p-mod-hidden';\r\n            }\r\n            if (data.active) {\r\n                name += ' p-mod-active';\r\n            }\r\n            if (data.collapsed) {\r\n                name += ' p-mod-collapsed';\r\n            }\r\n            // Add the extra class.\r\n            var extra = data.item.className;\r\n            if (extra) {\r\n                name += \" \" + extra;\r\n            }\r\n            // Return the complete class name.\r\n            return name;\r\n        };\r\n        /**\r\n         * Create the dataset for the menu item.\r\n         *\r\n         * @param data - The data to use for creating the dataset.\r\n         *\r\n         * @returns The dataset for the menu item.\r\n         */\r\n        Renderer.prototype.createItemDataset = function (data) {\r\n            var result;\r\n            var _a = data.item, type = _a.type, command = _a.command, dataset = _a.dataset;\r\n            if (type === 'command') {\r\n                result = __assign({}, dataset, { type: type, command: command });\r\n            }\r\n            else {\r\n                result = __assign({}, dataset, { type: type });\r\n            }\r\n            return result;\r\n        };\r\n        /**\r\n         * Create the class name for the menu item icon.\r\n         *\r\n         * @param data - The data to use for the class name.\r\n         *\r\n         * @returns The full class name for the item icon.\r\n         */\r\n        Renderer.prototype.createIconClass = function (data) {\r\n            var name = 'p-Menu-itemIcon';\r\n            var extra = data.item.iconClass;\r\n            return extra ? name + \" \" + extra : name;\r\n        };\r\n        /**\r\n         * Create the render content for the label node.\r\n         *\r\n         * @param data - The data to use for the label content.\r\n         *\r\n         * @returns The content to add to the label node.\r\n         */\r\n        Renderer.prototype.formatLabel = function (data) {\r\n            // Fetch the label text and mnemonic index.\r\n            var _a = data.item, label = _a.label, mnemonic = _a.mnemonic;\r\n            // If the index is out of range, do not modify the label.\r\n            if (mnemonic < 0 || mnemonic >= label.length) {\r\n                return label;\r\n            }\r\n            // Split the label into parts.\r\n            var prefix = label.slice(0, mnemonic);\r\n            var suffix = label.slice(mnemonic + 1);\r\n            var char = label[mnemonic];\r\n            // Wrap the mnemonic character in a span.\r\n            var span = virtualdom_1.h.span({ className: 'p-Menu-itemMnemonic' }, char);\r\n            // Return the content parts.\r\n            return [prefix, span, suffix];\r\n        };\r\n        /**\r\n         * Create the render content for the shortcut node.\r\n         *\r\n         * @param data - The data to use for the shortcut content.\r\n         *\r\n         * @returns The content to add to the shortcut node.\r\n         */\r\n        Renderer.prototype.formatShortcut = function (data) {\r\n            var kb = data.item.keyBinding;\r\n            return kb ? kb.keys.map(Private.formatKeystroke).join(', ') : null;\r\n        };\r\n        return Renderer;\r\n    }());\r\n    Menu.Renderer = Renderer;\r\n    /**\r\n     * The default `Renderer` instance.\r\n     */\r\n    Menu.defaultRenderer = new Renderer();\r\n})(Menu = exports.Menu || (exports.Menu = {}));\r\nexports.Menu = Menu;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The ms delay for opening and closing a submenu.\r\n     */\r\n    Private.TIMER_DELAY = 300;\r\n    /**\r\n     * The horizontal pixel overlap for an open submenu.\r\n     */\r\n    Private.SUBMENU_OVERLAP = 3;\r\n    /**\r\n     * Create the DOM node for a menu.\r\n     */\r\n    function createNode() {\r\n        var node = document.createElement('div');\r\n        var content = document.createElement('ul');\r\n        content.className = 'p-Menu-content';\r\n        node.appendChild(content);\r\n        node.tabIndex = -1;\r\n        return node;\r\n    }\r\n    Private.createNode = createNode;\r\n    /**\r\n     * Test whether a menu item can be activated.\r\n     */\r\n    function canActivate(item) {\r\n        return item.type !== 'separator' && item.isEnabled && item.isVisible;\r\n    }\r\n    Private.canActivate = canActivate;\r\n    /**\r\n     * Create a new menu item for an owner menu.\r\n     */\r\n    function createItem(owner, options) {\r\n        return new MenuItem(owner.commands, options);\r\n    }\r\n    Private.createItem = createItem;\r\n    /**\r\n     * Format a keystroke for display on the local system.\r\n     */\r\n    function formatKeystroke(keystroke) {\r\n        var mods = '';\r\n        var parts = commands_1.CommandRegistry.parseKeystroke(keystroke);\r\n        if (domutils_1.Platform.IS_MAC) {\r\n            if (parts.ctrl) {\r\n                mods += '\\u2303 ';\r\n            }\r\n            if (parts.alt) {\r\n                mods += '\\u2325 ';\r\n            }\r\n            if (parts.shift) {\r\n                mods += '\\u21E7 ';\r\n            }\r\n            if (parts.cmd) {\r\n                mods += '\\u2318 ';\r\n            }\r\n        }\r\n        else {\r\n            if (parts.ctrl) {\r\n                mods += 'Ctrl+';\r\n            }\r\n            if (parts.alt) {\r\n                mods += 'Alt+';\r\n            }\r\n            if (parts.shift) {\r\n                mods += 'Shift+';\r\n            }\r\n        }\r\n        return mods + parts.key;\r\n    }\r\n    Private.formatKeystroke = formatKeystroke;\r\n    /**\r\n     * Hit test a menu hierarchy starting at the given root.\r\n     */\r\n    function hitTestMenus(menu, x, y) {\r\n        for (var temp = menu; temp; temp = temp.childMenu) {\r\n            if (domutils_1.ElementExt.hitTest(temp.node, x, y)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    Private.hitTestMenus = hitTestMenus;\r\n    /**\r\n     * Compute which extra separator items should be collapsed.\r\n     */\r\n    function computeCollapsed(items) {\r\n        // Allocate the return array and fill it with `false`.\r\n        var result = new Array(items.length);\r\n        algorithm_1.ArrayExt.fill(result, false);\r\n        // Collapse the leading separators.\r\n        var k1 = 0;\r\n        var n = items.length;\r\n        for (; k1 < n; ++k1) {\r\n            var item = items[k1];\r\n            if (!item.isVisible) {\r\n                continue;\r\n            }\r\n            if (item.type !== 'separator') {\r\n                break;\r\n            }\r\n            result[k1] = true;\r\n        }\r\n        // Hide the trailing separators.\r\n        var k2 = n - 1;\r\n        for (; k2 >= 0; --k2) {\r\n            var item = items[k2];\r\n            if (!item.isVisible) {\r\n                continue;\r\n            }\r\n            if (item.type !== 'separator') {\r\n                break;\r\n            }\r\n            result[k2] = true;\r\n        }\r\n        // Hide the remaining consecutive separators.\r\n        var hide = false;\r\n        while (++k1 < k2) {\r\n            var item = items[k1];\r\n            if (!item.isVisible) {\r\n                continue;\r\n            }\r\n            if (item.type !== 'separator') {\r\n                hide = false;\r\n            }\r\n            else if (hide) {\r\n                result[k1] = true;\r\n            }\r\n            else {\r\n                hide = true;\r\n            }\r\n        }\r\n        // Return the resulting flags.\r\n        return result;\r\n    }\r\n    Private.computeCollapsed = computeCollapsed;\r\n    /**\r\n     * Open a menu as a root menu at the target location.\r\n     */\r\n    function openRootMenu(menu, x, y, forceX, forceY) {\r\n        // Ensure the menu is updated before attaching and measuring.\r\n        messaging_1.MessageLoop.sendMessage(menu, widget_1.Widget.Msg.UpdateRequest);\r\n        // Get the current position and size of the main viewport.\r\n        var px = window.pageXOffset;\r\n        var py = window.pageYOffset;\r\n        var cw = document.documentElement.clientWidth;\r\n        var ch = document.documentElement.clientHeight;\r\n        // Compute the maximum allowed height for the menu.\r\n        var maxHeight = ch - (forceY ? y : 0);\r\n        // Fetch common variables.\r\n        var node = menu.node;\r\n        var style = node.style;\r\n        // Clear the menu geometry and prepare it for measuring.\r\n        style.top = '';\r\n        style.left = '';\r\n        style.width = '';\r\n        style.height = '';\r\n        style.visibility = 'hidden';\r\n        style.maxHeight = maxHeight + \"px\";\r\n        // Attach the menu to the document.\r\n        widget_1.Widget.attach(menu, document.body);\r\n        // Measure the size of the menu.\r\n        var _a = node.getBoundingClientRect(), width = _a.width, height = _a.height;\r\n        // Adjust the X position of the menu to fit on-screen.\r\n        if (!forceX && (x + width > px + cw)) {\r\n            x = px + cw - width;\r\n        }\r\n        // Adjust the Y position of the menu to fit on-screen.\r\n        if (!forceY && (y + height > py + ch)) {\r\n            if (y > py + ch) {\r\n                y = py + ch - height;\r\n            }\r\n            else {\r\n                y = y - height;\r\n            }\r\n        }\r\n        // Update the position of the menu to the computed position.\r\n        style.top = Math.max(0, y) + \"px\";\r\n        style.left = Math.max(0, x) + \"px\";\r\n        // Finally, make the menu visible on the screen.\r\n        style.visibility = '';\r\n    }\r\n    Private.openRootMenu = openRootMenu;\r\n    /**\r\n     * Open a menu as a submenu using an item node for positioning.\r\n     */\r\n    function openSubmenu(submenu, itemNode) {\r\n        // Ensure the menu is updated before opening.\r\n        messaging_1.MessageLoop.sendMessage(submenu, widget_1.Widget.Msg.UpdateRequest);\r\n        // Get the current position and size of the main viewport.\r\n        var px = window.pageXOffset;\r\n        var py = window.pageYOffset;\r\n        var cw = document.documentElement.clientWidth;\r\n        var ch = document.documentElement.clientHeight;\r\n        // Compute the maximum allowed height for the menu.\r\n        var maxHeight = ch;\r\n        // Fetch common variables.\r\n        var node = submenu.node;\r\n        var style = node.style;\r\n        // Clear the menu geometry and prepare it for measuring.\r\n        style.top = '';\r\n        style.left = '';\r\n        style.width = '';\r\n        style.height = '';\r\n        style.visibility = 'hidden';\r\n        style.maxHeight = maxHeight + \"px\";\r\n        // Attach the menu to the document.\r\n        widget_1.Widget.attach(submenu, document.body);\r\n        // Measure the size of the menu.\r\n        var _a = node.getBoundingClientRect(), width = _a.width, height = _a.height;\r\n        // Compute the box sizing for the menu.\r\n        var box = domutils_1.ElementExt.boxSizing(submenu.node);\r\n        // Get the bounding rect for the target item node.\r\n        var itemRect = itemNode.getBoundingClientRect();\r\n        // Compute the target X position.\r\n        var x = itemRect.right - Private.SUBMENU_OVERLAP;\r\n        // Adjust the X position to fit on the screen.\r\n        if (x + width > px + cw) {\r\n            x = itemRect.left + Private.SUBMENU_OVERLAP - width;\r\n        }\r\n        // Compute the target Y position.\r\n        var y = itemRect.top - box.borderTop - box.paddingTop;\r\n        // Adjust the Y position to fit on the screen.\r\n        if (y + height > py + ch) {\r\n            y = itemRect.bottom + box.borderBottom + box.paddingBottom - height;\r\n        }\r\n        // Update the position of the menu to the computed position.\r\n        style.top = Math.max(0, y) + \"px\";\r\n        style.left = Math.max(0, x) + \"px\";\r\n        // Finally, make the menu visible on the screen.\r\n        style.visibility = '';\r\n    }\r\n    Private.openSubmenu = openSubmenu;\r\n    /**\r\n     * Find the best matching mnemonic item.\r\n     *\r\n     * The search starts at the given index and wraps around.\r\n     */\r\n    function findMnemonic(items, key, start) {\r\n        // Setup the result variables.\r\n        var index = -1;\r\n        var auto = -1;\r\n        var multiple = false;\r\n        // Normalize the key to upper case.\r\n        var upperKey = key.toUpperCase();\r\n        // Search the items from the given start index.\r\n        for (var i = 0, n = items.length; i < n; ++i) {\r\n            // Compute the wrapped index.\r\n            var k = (i + start) % n;\r\n            // Lookup the item\r\n            var item = items[k];\r\n            // Ignore items which cannot be activated.\r\n            if (!canActivate(item)) {\r\n                continue;\r\n            }\r\n            // Ignore items with an empty label.\r\n            var label = item.label;\r\n            if (label.length === 0) {\r\n                continue;\r\n            }\r\n            // Lookup the mnemonic index for the label.\r\n            var mn = item.mnemonic;\r\n            // Handle a valid mnemonic index.\r\n            if (mn >= 0 && mn < label.length) {\r\n                if (label[mn].toUpperCase() === upperKey) {\r\n                    if (index === -1) {\r\n                        index = k;\r\n                    }\r\n                    else {\r\n                        multiple = true;\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            // Finally, handle the auto index if possible.\r\n            if (auto === -1 && label[0].toUpperCase() === upperKey) {\r\n                auto = k;\r\n            }\r\n        }\r\n        // Return the search results.\r\n        return { index: index, multiple: multiple, auto: auto };\r\n    }\r\n    Private.findMnemonic = findMnemonic;\r\n    /**\r\n     * A concrete implementation of `Menu.IItem`.\r\n     */\r\n    var MenuItem = (function () {\r\n        /**\r\n         * Construct a new menu item.\r\n         */\r\n        function MenuItem(commands, options) {\r\n            this._commands = commands;\r\n            this.type = options.type || 'command';\r\n            this.command = options.command || '';\r\n            this.args = options.args || coreutils_1.JSONExt.emptyObject;\r\n            this.submenu = options.submenu || null;\r\n        }\r\n        Object.defineProperty(MenuItem.prototype, \"label\", {\r\n            /**\r\n             * The display label for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.label(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu' && this.submenu) {\r\n                    return this.submenu.title.label;\r\n                }\r\n                return '';\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"mnemonic\", {\r\n            /**\r\n             * The mnemonic index for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.mnemonic(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu' && this.submenu) {\r\n                    return this.submenu.title.mnemonic;\r\n                }\r\n                return -1;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"icon\", {\r\n            /**\r\n             * @deprecated Use `iconClass` instead.\r\n             */\r\n            get: function () {\r\n                return this.iconClass;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"iconClass\", {\r\n            /**\r\n             * The icon class for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.iconClass(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu' && this.submenu) {\r\n                    return this.submenu.title.iconClass;\r\n                }\r\n                return '';\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"iconLabel\", {\r\n            /**\r\n             * The icon label for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.iconLabel(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu' && this.submenu) {\r\n                    return this.submenu.title.iconLabel;\r\n                }\r\n                return '';\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"caption\", {\r\n            /**\r\n             * The display caption for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.caption(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu' && this.submenu) {\r\n                    return this.submenu.title.caption;\r\n                }\r\n                return '';\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"className\", {\r\n            /**\r\n             * The extra class name for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.className(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu' && this.submenu) {\r\n                    return this.submenu.title.className;\r\n                }\r\n                return '';\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"dataset\", {\r\n            /**\r\n             * The dataset for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.dataset(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu' && this.submenu) {\r\n                    return this.submenu.title.dataset;\r\n                }\r\n                return {};\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"isEnabled\", {\r\n            /**\r\n             * Whether the menu item is enabled.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.isEnabled(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu') {\r\n                    return this.submenu !== null;\r\n                }\r\n                return true;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"isToggled\", {\r\n            /**\r\n             * Whether the menu item is toggled.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.isToggled(this.command, this.args);\r\n                }\r\n                return false;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"isVisible\", {\r\n            /**\r\n             * Whether the menu item is visible.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    return this._commands.isVisible(this.command, this.args);\r\n                }\r\n                if (this.type === 'submenu') {\r\n                    return this.submenu !== null;\r\n                }\r\n                return true;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MenuItem.prototype, \"keyBinding\", {\r\n            /**\r\n             * The key binding for the menu item.\r\n             */\r\n            get: function () {\r\n                if (this.type === 'command') {\r\n                    var _a = this, command_1 = _a.command, args_1 = _a.args;\r\n                    return algorithm_1.ArrayExt.findLastValue(this._commands.keyBindings, function (kb) {\r\n                        return kb.command === command_1 && coreutils_1.JSONExt.deepEqual(kb.args, args_1);\r\n                    }) || null;\r\n                }\r\n                return null;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        return MenuItem;\r\n    }());\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar keyboard_1 = require(\"@phosphor/keyboard\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar virtualdom_1 = require(\"@phosphor/virtualdom\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A widget which displays menus as a canonical menu bar.\r\n */\r\nvar MenuBar = (function (_super) {\r\n    __extends(MenuBar, _super);\r\n    /**\r\n     * Construct a new menu bar.\r\n     *\r\n     * @param options - The options for initializing the menu bar.\r\n     */\r\n    function MenuBar(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, { node: Private.createNode() }) || this;\r\n        _this._activeIndex = -1;\r\n        _this._menus = [];\r\n        _this._childMenu = null;\r\n        _this.addClass('p-MenuBar');\r\n        _this.setFlag(widget_1.Widget.Flag.DisallowLayout);\r\n        _this.renderer = options.renderer || MenuBar.defaultRenderer;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the widget.\r\n     */\r\n    MenuBar.prototype.dispose = function () {\r\n        this._closeChildMenu();\r\n        this._menus.length = 0;\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(MenuBar.prototype, \"childMenu\", {\r\n        /**\r\n         * The child menu of the menu bar.\r\n         *\r\n         * #### Notes\r\n         * This will be `null` if the menu bar does not have an open menu.\r\n         */\r\n        get: function () {\r\n            return this._childMenu;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MenuBar.prototype, \"contentNode\", {\r\n        /**\r\n         * Get the menu bar content node.\r\n         *\r\n         * #### Notes\r\n         * This is the node which holds the menu title nodes.\r\n         *\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-MenuBar-content')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MenuBar.prototype, \"activeMenu\", {\r\n        /**\r\n         * Get the currently active menu.\r\n         */\r\n        get: function () {\r\n            return this._menus[this._activeIndex] || null;\r\n        },\r\n        /**\r\n         * Set the currently active menu.\r\n         *\r\n         * #### Notes\r\n         * If the menu does not exist, the menu will be set to `null`.\r\n         */\r\n        set: function (value) {\r\n            this.activeIndex = value ? this._menus.indexOf(value) : -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MenuBar.prototype, \"activeIndex\", {\r\n        /**\r\n         * Get the index of the currently active menu.\r\n         *\r\n         * #### Notes\r\n         * This will be `-1` if no menu is active.\r\n         */\r\n        get: function () {\r\n            return this._activeIndex;\r\n        },\r\n        /**\r\n         * Set the index of the currently active menu.\r\n         *\r\n         * #### Notes\r\n         * If the menu cannot be activated, the index will be set to `-1`.\r\n         */\r\n        set: function (value) {\r\n            // Adjust the value for an out of range index.\r\n            if (value < 0 || value >= this._menus.length) {\r\n                value = -1;\r\n            }\r\n            // Bail early if the index will not change.\r\n            if (this._activeIndex === value) {\r\n                return;\r\n            }\r\n            // Update the active index.\r\n            this._activeIndex = value;\r\n            // Schedule an update of the items.\r\n            this.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MenuBar.prototype, \"menus\", {\r\n        /**\r\n         * A read-only array of the menus in the menu bar.\r\n         */\r\n        get: function () {\r\n            return this._menus;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Open the active menu and activate its first menu item.\r\n     *\r\n     * #### Notes\r\n     * If there is no active menu, this is a no-op.\r\n     */\r\n    MenuBar.prototype.openActiveMenu = function () {\r\n        // Bail early if there is no active item.\r\n        if (this._activeIndex === -1) {\r\n            return;\r\n        }\r\n        // Open the child menu.\r\n        this._openChildMenu();\r\n        // Activate the first item in the child menu.\r\n        if (this._childMenu) {\r\n            this._childMenu.activeIndex = -1;\r\n            this._childMenu.activateNextItem();\r\n        }\r\n    };\r\n    /**\r\n     * Add a menu to the end of the menu bar.\r\n     *\r\n     * @param menu - The menu to add to the menu bar.\r\n     *\r\n     * #### Notes\r\n     * If the menu is already added to the menu bar, it will be moved.\r\n     */\r\n    MenuBar.prototype.addMenu = function (menu) {\r\n        this.insertMenu(this._menus.length, menu);\r\n    };\r\n    /**\r\n     * Insert a menu into the menu bar at the specified index.\r\n     *\r\n     * @param index - The index at which to insert the menu.\r\n     *\r\n     * @param menu - The menu to insert into the menu bar.\r\n     *\r\n     * #### Notes\r\n     * The index will be clamped to the bounds of the menus.\r\n     *\r\n     * If the menu is already added to the menu bar, it will be moved.\r\n     */\r\n    MenuBar.prototype.insertMenu = function (index, menu) {\r\n        // Close the child menu before making changes.\r\n        this._closeChildMenu();\r\n        // Look up the index of the menu.\r\n        var i = this._menus.indexOf(menu);\r\n        // Clamp the insert index to the array bounds.\r\n        var j = Math.max(0, Math.min(index, this._menus.length));\r\n        // If the menu is not in the array, insert it.\r\n        if (i === -1) {\r\n            // Insert the menu into the array.\r\n            algorithm_1.ArrayExt.insert(this._menus, j, menu);\r\n            // Add the styling class to the menu.\r\n            menu.addClass('p-MenuBar-menu');\r\n            // Connect to the menu signals.\r\n            menu.aboutToClose.connect(this._onMenuAboutToClose, this);\r\n            menu.menuRequested.connect(this._onMenuMenuRequested, this);\r\n            menu.title.changed.connect(this._onTitleChanged, this);\r\n            // Schedule an update of the items.\r\n            this.update();\r\n            // There is nothing more to do.\r\n            return;\r\n        }\r\n        // Otherwise, the menu exists in the array and should be moved.\r\n        // Adjust the index if the location is at the end of the array.\r\n        if (j === this._menus.length) {\r\n            j--;\r\n        }\r\n        // Bail if there is no effective move.\r\n        if (i === j) {\r\n            return;\r\n        }\r\n        // Move the menu to the new locations.\r\n        algorithm_1.ArrayExt.move(this._menus, i, j);\r\n        // Schedule an update of the items.\r\n        this.update();\r\n    };\r\n    /**\r\n     * Remove a menu from the menu bar.\r\n     *\r\n     * @param menu - The menu to remove from the menu bar.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the menu is not in the menu bar.\r\n     */\r\n    MenuBar.prototype.removeMenu = function (menu) {\r\n        this.removeMenuAt(this._menus.indexOf(menu));\r\n    };\r\n    /**\r\n     * Remove the menu at a given index from the menu bar.\r\n     *\r\n     * @param index - The index of the menu to remove.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the index is out of range.\r\n     */\r\n    MenuBar.prototype.removeMenuAt = function (index) {\r\n        // Close the child menu before making changes.\r\n        this._closeChildMenu();\r\n        // Remove the menu from the array.\r\n        var menu = algorithm_1.ArrayExt.removeAt(this._menus, index);\r\n        // Bail if the index is out of range.\r\n        if (!menu) {\r\n            return;\r\n        }\r\n        // Disconnect from the menu signals.\r\n        menu.aboutToClose.disconnect(this._onMenuAboutToClose, this);\r\n        menu.menuRequested.disconnect(this._onMenuMenuRequested, this);\r\n        menu.title.changed.disconnect(this._onTitleChanged, this);\r\n        // Remove the styling class from the menu.\r\n        menu.removeClass('p-MenuBar-menu');\r\n        // Schedule an update of the items.\r\n        this.update();\r\n    };\r\n    /**\r\n     * Remove all menus from the menu bar.\r\n     */\r\n    MenuBar.prototype.clearMenus = function () {\r\n        // Bail if there is nothing to remove.\r\n        if (this._menus.length === 0) {\r\n            return;\r\n        }\r\n        // Close the child menu before making changes.\r\n        this._closeChildMenu();\r\n        // Disconnect from the menu signals and remove the styling class.\r\n        for (var _i = 0, _a = this._menus; _i < _a.length; _i++) {\r\n            var menu = _a[_i];\r\n            menu.aboutToClose.disconnect(this._onMenuAboutToClose, this);\r\n            menu.menuRequested.disconnect(this._onMenuMenuRequested, this);\r\n            menu.title.changed.disconnect(this._onTitleChanged, this);\r\n            menu.removeClass('p-MenuBar-menu');\r\n        }\r\n        // Clear the menus array.\r\n        this._menus.length = 0;\r\n        // Schedule an update of the items.\r\n        this.update();\r\n    };\r\n    /**\r\n     * Handle the DOM events for the menu bar.\r\n     *\r\n     * @param event - The DOM event sent to the menu bar.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the menu bar's DOM nodes. It\r\n     * should not be called directly by user code.\r\n     */\r\n    MenuBar.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            case 'mousedown':\r\n                this._evtMouseDown(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtMouseMove(event);\r\n                break;\r\n            case 'mouseleave':\r\n                this._evtMouseLeave(event);\r\n                break;\r\n            case 'contextmenu':\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    MenuBar.prototype.onBeforeAttach = function (msg) {\r\n        this.node.addEventListener('keydown', this);\r\n        this.node.addEventListener('mousedown', this);\r\n        this.node.addEventListener('mousemove', this);\r\n        this.node.addEventListener('mouseleave', this);\r\n        this.node.addEventListener('contextmenu', this);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     */\r\n    MenuBar.prototype.onAfterDetach = function (msg) {\r\n        this.node.removeEventListener('keydown', this);\r\n        this.node.removeEventListener('mousedown', this);\r\n        this.node.removeEventListener('mousemove', this);\r\n        this.node.removeEventListener('mouseleave', this);\r\n        this.node.removeEventListener('contextmenu', this);\r\n        this._closeChildMenu();\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'activate-request'` message.\r\n     */\r\n    MenuBar.prototype.onActivateRequest = function (msg) {\r\n        if (this.isAttached) {\r\n            this.node.focus();\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    MenuBar.prototype.onUpdateRequest = function (msg) {\r\n        var menus = this._menus;\r\n        var renderer = this.renderer;\r\n        var activeIndex = this._activeIndex;\r\n        var content = new Array(menus.length);\r\n        for (var i = 0, n = menus.length; i < n; ++i) {\r\n            var title = menus[i].title;\r\n            var active = i === activeIndex;\r\n            content[i] = renderer.renderItem({ title: title, active: active });\r\n        }\r\n        virtualdom_1.VirtualDOM.render(content, this.contentNode);\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the menu bar.\r\n     */\r\n    MenuBar.prototype._evtKeyDown = function (event) {\r\n        // A menu bar handles all keydown events.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Fetch the key code for the event.\r\n        var kc = event.keyCode;\r\n        // Enter, Up Arrow, Down Arrow\r\n        if (kc === 13 || kc === 38 || kc === 40) {\r\n            this.openActiveMenu();\r\n            return;\r\n        }\r\n        // Escape\r\n        if (kc === 27) {\r\n            this._closeChildMenu();\r\n            this.activeIndex = -1;\r\n            this.node.blur();\r\n            return;\r\n        }\r\n        // Left Arrow\r\n        if (kc === 37) {\r\n            var i = this._activeIndex;\r\n            var n = this._menus.length;\r\n            this.activeIndex = i === 0 ? n - 1 : i - 1;\r\n            return;\r\n        }\r\n        // Right Arrow\r\n        if (kc === 39) {\r\n            var i = this._activeIndex;\r\n            var n = this._menus.length;\r\n            this.activeIndex = i === n - 1 ? 0 : i + 1;\r\n            return;\r\n        }\r\n        // Get the pressed key character.\r\n        var key = keyboard_1.getKeyboardLayout().keyForKeydownEvent(event);\r\n        // Bail if the key is not valid.\r\n        if (!key) {\r\n            return;\r\n        }\r\n        // Search for the next best matching mnemonic item.\r\n        var start = this._activeIndex + 1;\r\n        var result = Private.findMnemonic(this._menus, key, start);\r\n        // Handle the requested mnemonic based on the search results.\r\n        // If exactly one mnemonic is matched, that menu is opened.\r\n        // Otherwise, the next mnemonic is activated if available,\r\n        // followed by the auto mnemonic if available.\r\n        if (result.index !== -1 && !result.multiple) {\r\n            this.activeIndex = result.index;\r\n            this.openActiveMenu();\r\n        }\r\n        else if (result.index !== -1) {\r\n            this.activeIndex = result.index;\r\n        }\r\n        else if (result.auto !== -1) {\r\n            this.activeIndex = result.auto;\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousedown'` event for the menu bar.\r\n     */\r\n    MenuBar.prototype._evtMouseDown = function (event) {\r\n        // Bail if the mouse press was not on the menu bar. This can occur\r\n        // when the document listener is installed for an active menu bar.\r\n        if (!domutils_1.ElementExt.hitTest(this.node, event.clientX, event.clientY)) {\r\n            return;\r\n        }\r\n        // Stop the propagation of the event. Immediate propagation is\r\n        // also stopped so that an open menu does not handle the event.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        event.stopImmediatePropagation();\r\n        // Check if the mouse is over one of the menu items.\r\n        var index = algorithm_1.ArrayExt.findFirstIndex(this.contentNode.children, function (node) {\r\n            return domutils_1.ElementExt.hitTest(node, event.clientX, event.clientY);\r\n        });\r\n        // If the press was not on an item, close the child menu.\r\n        if (index === -1) {\r\n            this._closeChildMenu();\r\n            return;\r\n        }\r\n        // If the press was not the left mouse button, do nothing further.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Otherwise, toggle the open state of the child menu.\r\n        if (this._childMenu) {\r\n            this._closeChildMenu();\r\n            this.activeIndex = index;\r\n        }\r\n        else {\r\n            this.activeIndex = index;\r\n            this._openChildMenu();\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousemove'` event for the menu bar.\r\n     */\r\n    MenuBar.prototype._evtMouseMove = function (event) {\r\n        // Check if the mouse is over one of the menu items.\r\n        var index = algorithm_1.ArrayExt.findFirstIndex(this.contentNode.children, function (node) {\r\n            return domutils_1.ElementExt.hitTest(node, event.clientX, event.clientY);\r\n        });\r\n        // Bail early if the active index will not change.\r\n        if (index === this._activeIndex) {\r\n            return;\r\n        }\r\n        // Bail early if a child menu is open and the mouse is not over\r\n        // an item. This allows the child menu to be kept open when the\r\n        // mouse is over the empty part of the menu bar.\r\n        if (index === -1 && this._childMenu) {\r\n            return;\r\n        }\r\n        // Update the active index to the hovered item.\r\n        this.activeIndex = index;\r\n        // Open the new menu if a menu is already open.\r\n        if (this._childMenu) {\r\n            this._openChildMenu();\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mouseleave'` event for the menu bar.\r\n     */\r\n    MenuBar.prototype._evtMouseLeave = function (event) {\r\n        // Reset the active index if there is no open menu.\r\n        if (!this._childMenu) {\r\n            this.activeIndex = -1;\r\n        }\r\n    };\r\n    /**\r\n     * Open the child menu at the active index immediately.\r\n     *\r\n     * If a different child menu is already open, it will be closed,\r\n     * even if there is no active menu.\r\n     */\r\n    MenuBar.prototype._openChildMenu = function () {\r\n        // If there is no active menu, close the current menu.\r\n        var newMenu = this.activeMenu;\r\n        if (!newMenu) {\r\n            this._closeChildMenu();\r\n            return;\r\n        }\r\n        // Bail if there is no effective menu change.\r\n        var oldMenu = this._childMenu;\r\n        if (oldMenu === newMenu) {\r\n            return;\r\n        }\r\n        // Swap the internal menu reference.\r\n        this._childMenu = newMenu;\r\n        // Close the current menu, or setup for the new menu.\r\n        if (oldMenu) {\r\n            oldMenu.close();\r\n        }\r\n        else {\r\n            this.addClass('p-mod-active');\r\n            document.addEventListener('mousedown', this, true);\r\n        }\r\n        // Ensure the menu bar is updated and look up the item node.\r\n        messaging_1.MessageLoop.sendMessage(this, widget_1.Widget.Msg.UpdateRequest);\r\n        var itemNode = this.contentNode.children[this._activeIndex];\r\n        // Get the positioning data for the new menu.\r\n        var _a = itemNode.getBoundingClientRect(), left = _a.left, bottom = _a.bottom;\r\n        // Open the new menu at the computed location.\r\n        newMenu.open(left, bottom, { forceX: true, forceY: true });\r\n    };\r\n    /**\r\n     * Close the child menu immediately.\r\n     *\r\n     * This is a no-op if a child menu is not open.\r\n     */\r\n    MenuBar.prototype._closeChildMenu = function () {\r\n        // Bail if no child menu is open.\r\n        if (!this._childMenu) {\r\n            return;\r\n        }\r\n        // Remove the active class from the menu bar.\r\n        this.removeClass('p-mod-active');\r\n        // Remove the document listeners.\r\n        document.removeEventListener('mousedown', this, true);\r\n        // Clear the internal menu reference.\r\n        var menu = this._childMenu;\r\n        this._childMenu = null;\r\n        // Close the menu.\r\n        menu.close();\r\n        // Reset the active index.\r\n        this.activeIndex = -1;\r\n    };\r\n    /**\r\n     * Handle the `aboutToClose` signal of a menu.\r\n     */\r\n    MenuBar.prototype._onMenuAboutToClose = function (sender) {\r\n        // Bail if the sender is not the child menu.\r\n        if (sender !== this._childMenu) {\r\n            return;\r\n        }\r\n        // Remove the active class from the menu bar.\r\n        this.removeClass('p-mod-active');\r\n        // Remove the document listeners.\r\n        document.removeEventListener('mousedown', this, true);\r\n        // Clear the internal menu reference.\r\n        this._childMenu = null;\r\n        // Reset the active index.\r\n        this.activeIndex = -1;\r\n    };\r\n    /**\r\n     * Handle the `menuRequested` signal of a child menu.\r\n     */\r\n    MenuBar.prototype._onMenuMenuRequested = function (sender, args) {\r\n        // Bail if the sender is not the child menu.\r\n        if (sender !== this._childMenu) {\r\n            return;\r\n        }\r\n        // Look up the active index and menu count.\r\n        var i = this._activeIndex;\r\n        var n = this._menus.length;\r\n        // Active the next requested index.\r\n        switch (args) {\r\n            case 'next':\r\n                this.activeIndex = i === n - 1 ? 0 : i + 1;\r\n                break;\r\n            case 'previous':\r\n                this.activeIndex = i === 0 ? n - 1 : i - 1;\r\n                break;\r\n        }\r\n        // Open the active menu.\r\n        this.openActiveMenu();\r\n    };\r\n    /**\r\n     * Handle the `changed` signal of a title object.\r\n     */\r\n    MenuBar.prototype._onTitleChanged = function () {\r\n        this.update();\r\n    };\r\n    return MenuBar;\r\n}(widget_1.Widget));\r\nexports.MenuBar = MenuBar;\r\n/**\r\n * The namespace for the `MenuBar` class statics.\r\n */\r\n(function (MenuBar) {\r\n    /**\r\n     * The default implementation of `IRenderer`.\r\n     *\r\n     * #### Notes\r\n     * Subclasses are free to reimplement rendering methods as needed.\r\n     */\r\n    var Renderer = (function () {\r\n        /**\r\n         * Construct a new renderer.\r\n         */\r\n        function Renderer() {\r\n        }\r\n        /**\r\n         * Render the virtual element for a menu bar item.\r\n         *\r\n         * @param data - The data to use for rendering the item.\r\n         *\r\n         * @returns A virtual element representing the item.\r\n         */\r\n        Renderer.prototype.renderItem = function (data) {\r\n            var className = this.createItemClass(data);\r\n            var dataset = this.createItemDataset(data);\r\n            return (virtualdom_1.h.li({ className: className, dataset: dataset }, this.renderIcon(data), this.renderLabel(data)));\r\n        };\r\n        /**\r\n         * Render the icon element for a menu bar item.\r\n         *\r\n         * @param data - The data to use for rendering the icon.\r\n         *\r\n         * @returns A virtual element representing the item icon.\r\n         */\r\n        Renderer.prototype.renderIcon = function (data) {\r\n            var className = this.createIconClass(data);\r\n            return virtualdom_1.h.div({ className: className }, data.title.iconLabel);\r\n        };\r\n        /**\r\n         * Render the label element for a menu item.\r\n         *\r\n         * @param data - The data to use for rendering the label.\r\n         *\r\n         * @returns A virtual element representing the item label.\r\n         */\r\n        Renderer.prototype.renderLabel = function (data) {\r\n            var content = this.formatLabel(data);\r\n            return virtualdom_1.h.div({ className: 'p-MenuBar-itemLabel' }, content);\r\n        };\r\n        /**\r\n         * Create the class name for the menu bar item.\r\n         *\r\n         * @param data - The data to use for the class name.\r\n         *\r\n         * @returns The full class name for the menu item.\r\n         */\r\n        Renderer.prototype.createItemClass = function (data) {\r\n            var name = 'p-MenuBar-item';\r\n            if (data.title.className) {\r\n                name += \" \" + data.title.className;\r\n            }\r\n            if (data.active) {\r\n                name += ' p-mod-active';\r\n            }\r\n            return name;\r\n        };\r\n        /**\r\n         * Create the dataset for a menu bar item.\r\n         *\r\n         * @param data - The data to use for the item.\r\n         *\r\n         * @returns The dataset for the menu bar item.\r\n         */\r\n        Renderer.prototype.createItemDataset = function (data) {\r\n            return data.title.dataset;\r\n        };\r\n        /**\r\n         * Create the class name for the menu bar item icon.\r\n         *\r\n         * @param data - The data to use for the class name.\r\n         *\r\n         * @returns The full class name for the item icon.\r\n         */\r\n        Renderer.prototype.createIconClass = function (data) {\r\n            var name = 'p-MenuBar-itemIcon';\r\n            var extra = data.title.iconClass;\r\n            return extra ? name + \" \" + extra : name;\r\n        };\r\n        /**\r\n         * Create the render content for the label node.\r\n         *\r\n         * @param data - The data to use for the label content.\r\n         *\r\n         * @returns The content to add to the label node.\r\n         */\r\n        Renderer.prototype.formatLabel = function (data) {\r\n            // Fetch the label text and mnemonic index.\r\n            var _a = data.title, label = _a.label, mnemonic = _a.mnemonic;\r\n            // If the index is out of range, do not modify the label.\r\n            if (mnemonic < 0 || mnemonic >= label.length) {\r\n                return label;\r\n            }\r\n            // Split the label into parts.\r\n            var prefix = label.slice(0, mnemonic);\r\n            var suffix = label.slice(mnemonic + 1);\r\n            var char = label[mnemonic];\r\n            // Wrap the mnemonic character in a span.\r\n            var span = virtualdom_1.h.span({ className: 'p-MenuBar-itemMnemonic' }, char);\r\n            // Return the content parts.\r\n            return [prefix, span, suffix];\r\n        };\r\n        return Renderer;\r\n    }());\r\n    MenuBar.Renderer = Renderer;\r\n    /**\r\n     * The default `Renderer` instance.\r\n     */\r\n    MenuBar.defaultRenderer = new Renderer();\r\n})(MenuBar = exports.MenuBar || (exports.MenuBar = {}));\r\nexports.MenuBar = MenuBar;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create the DOM node for a menu bar.\r\n     */\r\n    function createNode() {\r\n        var node = document.createElement('div');\r\n        var content = document.createElement('ul');\r\n        content.className = 'p-MenuBar-content';\r\n        node.appendChild(content);\r\n        node.tabIndex = -1;\r\n        return node;\r\n    }\r\n    Private.createNode = createNode;\r\n    /**\r\n     * Find the best matching mnemonic item.\r\n     *\r\n     * The search starts at the given index and wraps around.\r\n     */\r\n    function findMnemonic(menus, key, start) {\r\n        // Setup the result variables.\r\n        var index = -1;\r\n        var auto = -1;\r\n        var multiple = false;\r\n        // Normalize the key to upper case.\r\n        var upperKey = key.toUpperCase();\r\n        // Search the items from the given start index.\r\n        for (var i = 0, n = menus.length; i < n; ++i) {\r\n            // Compute the wrapped index.\r\n            var k = (i + start) % n;\r\n            // Look up the menu title.\r\n            var title = menus[k].title;\r\n            // Ignore titles with an empty label.\r\n            if (title.label.length === 0) {\r\n                continue;\r\n            }\r\n            // Look up the mnemonic index for the label.\r\n            var mn = title.mnemonic;\r\n            // Handle a valid mnemonic index.\r\n            if (mn >= 0 && mn < title.label.length) {\r\n                if (title.label[mn].toUpperCase() === upperKey) {\r\n                    if (index === -1) {\r\n                        index = k;\r\n                    }\r\n                    else {\r\n                        multiple = true;\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            // Finally, handle the auto index if possible.\r\n            if (auto === -1 && title.label[0].toUpperCase() === upperKey) {\r\n                auto = k;\r\n            }\r\n        }\r\n        // Return the search results.\r\n        return { index: index, multiple: multiple, auto: auto };\r\n    }\r\n    Private.findMnemonic = findMnemonic;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar panellayout_1 = require(\"./panellayout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A simple and convenient panel widget class.\r\n *\r\n * #### Notes\r\n * This class is suitable as a base class for implementing a variety of\r\n * convenience panel widgets, but can also be used directly with CSS to\r\n * arrange a collection of widgets.\r\n *\r\n * This class provides a convenience wrapper around a [[PanelLayout]].\r\n */\r\nvar Panel = (function (_super) {\r\n    __extends(Panel, _super);\r\n    /**\r\n     * Construct a new panel.\r\n     *\r\n     * @param options - The options for initializing the panel.\r\n     */\r\n    function Panel(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this.addClass('p-Panel');\r\n        _this.layout = Private.createLayout(options);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Panel.prototype, \"widgets\", {\r\n        /**\r\n         * A read-only array of the widgets in the panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.widgets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Add a widget to the end of the panel.\r\n     *\r\n     * @param widget - The widget to add to the panel.\r\n     *\r\n     * #### Notes\r\n     * If the widget is already contained in the panel, it will be moved.\r\n     */\r\n    Panel.prototype.addWidget = function (widget) {\r\n        this.layout.addWidget(widget);\r\n    };\r\n    /**\r\n     * Insert a widget at the specified index.\r\n     *\r\n     * @param index - The index at which to insert the widget.\r\n     *\r\n     * @param widget - The widget to insert into to the panel.\r\n     *\r\n     * #### Notes\r\n     * If the widget is already contained in the panel, it will be moved.\r\n     */\r\n    Panel.prototype.insertWidget = function (index, widget) {\r\n        this.layout.insertWidget(index, widget);\r\n    };\r\n    return Panel;\r\n}(widget_1.Widget));\r\nexports.Panel = Panel;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create a panel layout for the given panel options.\r\n     */\r\n    function createLayout(options) {\r\n        return options.layout || new panellayout_1.PanelLayout();\r\n    }\r\n    Private.createLayout = createLayout;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar layout_1 = require(\"./layout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A concrete layout implementation suitable for many use cases.\r\n *\r\n * #### Notes\r\n * This class is suitable as a base class for implementing a variety of\r\n * layouts, but can also be used directly with standard CSS to layout a\r\n * collection of widgets.\r\n */\r\nvar PanelLayout = (function (_super) {\r\n    __extends(PanelLayout, _super);\r\n    function PanelLayout() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._widgets = [];\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     *\r\n     * #### Notes\r\n     * This will clear and dispose all widgets in the layout.\r\n     *\r\n     * All reimplementations should call the superclass method.\r\n     *\r\n     * This method is called automatically when the parent is disposed.\r\n     */\r\n    PanelLayout.prototype.dispose = function () {\r\n        while (this._widgets.length > 0) {\r\n            this._widgets.pop().dispose();\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(PanelLayout.prototype, \"widgets\", {\r\n        /**\r\n         * A read-only array of the widgets in the layout.\r\n         */\r\n        get: function () {\r\n            return this._widgets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create an iterator over the widgets in the layout.\r\n     *\r\n     * @returns A new iterator over the widgets in the layout.\r\n     */\r\n    PanelLayout.prototype.iter = function () {\r\n        return algorithm_1.iter(this._widgets);\r\n    };\r\n    /**\r\n     * Add a widget to the end of the layout.\r\n     *\r\n     * @param widget - The widget to add to the layout.\r\n     *\r\n     * #### Notes\r\n     * If the widget is already contained in the layout, it will be moved.\r\n     */\r\n    PanelLayout.prototype.addWidget = function (widget) {\r\n        this.insertWidget(this._widgets.length, widget);\r\n    };\r\n    /**\r\n     * Insert a widget into the layout at the specified index.\r\n     *\r\n     * @param index - The index at which to insert the widget.\r\n     *\r\n     * @param widget - The widget to insert into the layout.\r\n     *\r\n     * #### Notes\r\n     * The index will be clamped to the bounds of the widgets.\r\n     *\r\n     * If the widget is already added to the layout, it will be moved.\r\n     *\r\n     * #### Undefined Behavior\r\n     * An `index` which is non-integral.\r\n     */\r\n    PanelLayout.prototype.insertWidget = function (index, widget) {\r\n        // Remove the widget from its current parent. This is a no-op\r\n        // if the widget's parent is already the layout parent widget.\r\n        widget.parent = this.parent;\r\n        // Look up the current index of the widget.\r\n        var i = this._widgets.indexOf(widget);\r\n        // Clamp the insert index to the array bounds.\r\n        var j = Math.max(0, Math.min(index, this._widgets.length));\r\n        // If the widget is not in the array, insert it.\r\n        if (i === -1) {\r\n            // Insert the widget into the array.\r\n            algorithm_1.ArrayExt.insert(this._widgets, j, widget);\r\n            // If the layout is parented, attach the widget to the DOM.\r\n            if (this.parent) {\r\n                this.attachWidget(j, widget);\r\n            }\r\n            // There is nothing more to do.\r\n            return;\r\n        }\r\n        // Otherwise, the widget exists in the array and should be moved.\r\n        // Adjust the index if the location is at the end of the array.\r\n        if (j === this._widgets.length) {\r\n            j--;\r\n        }\r\n        // Bail if there is no effective move.\r\n        if (i === j) {\r\n            return;\r\n        }\r\n        // Move the widget to the new location.\r\n        algorithm_1.ArrayExt.move(this._widgets, i, j);\r\n        // If the layout is parented, move the widget in the DOM.\r\n        if (this.parent) {\r\n            this.moveWidget(i, j, widget);\r\n        }\r\n    };\r\n    /**\r\n     * Remove a widget from the layout.\r\n     *\r\n     * @param widget - The widget to remove from the layout.\r\n     *\r\n     * #### Notes\r\n     * A widget is automatically removed from the layout when its `parent`\r\n     * is set to `null`. This method should only be invoked directly when\r\n     * removing a widget from a layout which has yet to be installed on a\r\n     * parent widget.\r\n     *\r\n     * This method does *not* modify the widget's `parent`.\r\n     */\r\n    PanelLayout.prototype.removeWidget = function (widget) {\r\n        this.removeWidgetAt(this._widgets.indexOf(widget));\r\n    };\r\n    /**\r\n     * Remove the widget at a given index from the layout.\r\n     *\r\n     * @param index - The index of the widget to remove.\r\n     *\r\n     * #### Notes\r\n     * A widget is automatically removed from the layout when its `parent`\r\n     * is set to `null`. This method should only be invoked directly when\r\n     * removing a widget from a layout which has yet to be installed on a\r\n     * parent widget.\r\n     *\r\n     * This method does *not* modify the widget's `parent`.\r\n     *\r\n     * #### Undefined Behavior\r\n     * An `index` which is non-integral.\r\n     */\r\n    PanelLayout.prototype.removeWidgetAt = function (index) {\r\n        // Remove the widget from the array.\r\n        var widget = algorithm_1.ArrayExt.removeAt(this._widgets, index);\r\n        // If the layout is parented, detach the widget from the DOM.\r\n        if (widget && this.parent) {\r\n            this.detachWidget(index, widget);\r\n        }\r\n    };\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    PanelLayout.prototype.init = function () {\r\n        var _this = this;\r\n        _super.prototype.init.call(this);\r\n        algorithm_1.each(this, function (widget, index) {\r\n            _this.attachWidget(index, widget);\r\n        });\r\n    };\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param index - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This method is called automatically by the panel layout at the\r\n     * appropriate time. It should not be called directly by user code.\r\n     *\r\n     * The default implementation adds the widgets's node to the parent's\r\n     * node at the proper location, and sends the appropriate attach\r\n     * messages to the widget if the parent is attached to the DOM.\r\n     *\r\n     * Subclasses may reimplement this method to control how the widget's\r\n     * node is added to the parent's node.\r\n     */\r\n    PanelLayout.prototype.attachWidget = function (index, widget) {\r\n        // Look up the next sibling reference node.\r\n        var ref = this.parent.node.children[index];\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Insert the widget's node before the sibling.\r\n        this.parent.node.insertBefore(widget.node, ref);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n    };\r\n    /**\r\n     * Move a widget in the parent's DOM node.\r\n     *\r\n     * @param fromIndex - The previous index of the widget in the layout.\r\n     *\r\n     * @param toIndex - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to move in the parent.\r\n     *\r\n     * #### Notes\r\n     * This method is called automatically by the panel layout at the\r\n     * appropriate time. It should not be called directly by user code.\r\n     *\r\n     * The default implementation moves the widget's node to the proper\r\n     * location in the parent's node and sends the appropriate attach and\r\n     * detach messages to the widget if the parent is attached to the DOM.\r\n     *\r\n     * Subclasses may reimplement this method to control how the widget's\r\n     * node is moved in the parent's node.\r\n     */\r\n    PanelLayout.prototype.moveWidget = function (fromIndex, toIndex, widget) {\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget's node from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        // Send an `'after-detach'` and  message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n        // Look up the next sibling reference node.\r\n        var ref = this.parent.node.children[toIndex];\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Insert the widget's node before the sibling.\r\n        this.parent.node.insertBefore(widget.node, ref);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n    };\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param index - The previous index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This method is called automatically by the panel layout at the\r\n     * appropriate time. It should not be called directly by user code.\r\n     *\r\n     * The default implementation removes the widget's node from the\r\n     * parent's node, and sends the appropriate detach messages to the\r\n     * widget if the parent is attached to the DOM.\r\n     *\r\n     * Subclasses may reimplement this method to control how the widget's\r\n     * node is removed from the parent's node.\r\n     */\r\n    PanelLayout.prototype.detachWidget = function (index, widget) {\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget's node from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        // Send an `'after-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n    };\r\n    return PanelLayout;\r\n}(layout_1.Layout));\r\nexports.PanelLayout = PanelLayout;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar dragdrop_1 = require(\"@phosphor/dragdrop\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A widget which implements a canonical scroll bar.\r\n */\r\nvar ScrollBar = (function (_super) {\r\n    __extends(ScrollBar, _super);\r\n    /**\r\n     * Construct a new scroll bar.\r\n     *\r\n     * @param options - The options for initializing the scroll bar.\r\n     */\r\n    function ScrollBar(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, { node: Private.createNode() }) || this;\r\n        /**\r\n         * A timeout callback for repeating the mouse press.\r\n         */\r\n        _this._onRepeat = function () {\r\n            // Clear the repeat timer id.\r\n            _this._repeatTimer = -1;\r\n            // Bail if the mouse has been released.\r\n            if (!_this._pressData) {\r\n                return;\r\n            }\r\n            // Look up the part that was pressed.\r\n            var part = _this._pressData.part;\r\n            // Bail if the thumb was pressed.\r\n            if (part === 'thumb') {\r\n                return;\r\n            }\r\n            // Schedule the timer for another repeat.\r\n            _this._repeatTimer = setTimeout(_this._onRepeat, 20);\r\n            // Get the current mouse position.\r\n            var mouseX = _this._pressData.mouseX;\r\n            var mouseY = _this._pressData.mouseY;\r\n            // Handle a decrement button repeat.\r\n            if (part === 'decrement') {\r\n                // Bail if the mouse is not over the button.\r\n                if (!domutils_1.ElementExt.hitTest(_this.decrementNode, mouseX, mouseY)) {\r\n                    return;\r\n                }\r\n                // Emit the step requested signal.\r\n                _this._stepRequested.emit('decrement');\r\n                // Finished.\r\n                return;\r\n            }\r\n            // Handle an increment button repeat.\r\n            if (part === 'increment') {\r\n                // Bail if the mouse is not over the button.\r\n                if (!domutils_1.ElementExt.hitTest(_this.incrementNode, mouseX, mouseY)) {\r\n                    return;\r\n                }\r\n                // Emit the step requested signal.\r\n                _this._stepRequested.emit('increment');\r\n                // Finished.\r\n                return;\r\n            }\r\n            // Handle a track repeat.\r\n            if (part === 'track') {\r\n                // Bail if the mouse is not over the track.\r\n                if (!domutils_1.ElementExt.hitTest(_this.trackNode, mouseX, mouseY)) {\r\n                    return;\r\n                }\r\n                // Fetch the thumb node.\r\n                var thumbNode = _this.thumbNode;\r\n                // Bail if the mouse is over the thumb.\r\n                if (domutils_1.ElementExt.hitTest(thumbNode, mouseX, mouseY)) {\r\n                    return;\r\n                }\r\n                // Fetch the client rect for the thumb.\r\n                var thumbRect = thumbNode.getBoundingClientRect();\r\n                // Determine the direction for the page request.\r\n                var dir = void 0;\r\n                if (_this._orientation === 'horizontal') {\r\n                    dir = mouseX < thumbRect.left ? 'decrement' : 'increment';\r\n                }\r\n                else {\r\n                    dir = mouseY < thumbRect.top ? 'decrement' : 'increment';\r\n                }\r\n                // Emit the page requested signal.\r\n                _this._pageRequested.emit(dir);\r\n                // Finished.\r\n                return;\r\n            }\r\n        };\r\n        _this._value = 0;\r\n        _this._page = 10;\r\n        _this._maximum = 100;\r\n        _this._repeatTimer = -1;\r\n        _this._pressData = null;\r\n        _this._thumbMoved = new signaling_1.Signal(_this);\r\n        _this._stepRequested = new signaling_1.Signal(_this);\r\n        _this._pageRequested = new signaling_1.Signal(_this);\r\n        _this.addClass('p-ScrollBar');\r\n        _this.setFlag(widget_1.Widget.Flag.DisallowLayout);\r\n        // Set the orientation.\r\n        _this._orientation = options.orientation || 'vertical';\r\n        _this.dataset['orientation'] = _this._orientation;\r\n        // Parse the rest of the options.\r\n        if (options.maximum !== undefined) {\r\n            _this._maximum = Math.max(0, options.maximum);\r\n        }\r\n        if (options.page !== undefined) {\r\n            _this._page = Math.max(0, options.page);\r\n        }\r\n        if (options.value !== undefined) {\r\n            _this._value = Math.max(0, Math.min(options.value, _this._maximum));\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ScrollBar.prototype, \"thumbMoved\", {\r\n        /**\r\n         * A signal emitted when the user moves the scroll thumb.\r\n         *\r\n         * #### Notes\r\n         * The payload is the current value of the scroll bar.\r\n         */\r\n        get: function () {\r\n            return this._thumbMoved;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"stepRequested\", {\r\n        /**\r\n         * A signal emitted when the user clicks a step button.\r\n         *\r\n         * #### Notes\r\n         * The payload is whether a decrease or increase is requested.\r\n         */\r\n        get: function () {\r\n            return this._stepRequested;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"pageRequested\", {\r\n        /**\r\n         * A signal emitted when the user clicks the scroll track.\r\n         *\r\n         * #### Notes\r\n         * The payload is whether a decrease or increase is requested.\r\n         */\r\n        get: function () {\r\n            return this._pageRequested;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"orientation\", {\r\n        /**\r\n         * Get the orientation of the scroll bar.\r\n         */\r\n        get: function () {\r\n            return this._orientation;\r\n        },\r\n        /**\r\n         * Set the orientation of the scroll bar.\r\n         */\r\n        set: function (value) {\r\n            // Do nothing if the orientation does not change.\r\n            if (this._orientation === value) {\r\n                return;\r\n            }\r\n            // Release the mouse before making changes.\r\n            this._releaseMouse();\r\n            // Update the internal orientation.\r\n            this._orientation = value;\r\n            this.dataset['orientation'] = value;\r\n            // Schedule an update the scroll bar.\r\n            this.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"value\", {\r\n        /**\r\n         * Get the current value of the scroll bar.\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        /**\r\n         * Set the current value of the scroll bar.\r\n         *\r\n         * #### Notes\r\n         * The value will be clamped to the range `[0, maximum]`.\r\n         */\r\n        set: function (value) {\r\n            // Clamp the value to the allowable range.\r\n            value = Math.max(0, Math.min(value, this._maximum));\r\n            // Do nothing if the value does not change.\r\n            if (this._value === value) {\r\n                return;\r\n            }\r\n            // Update the internal value.\r\n            this._value = value;\r\n            // Schedule an update the scroll bar.\r\n            this.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"page\", {\r\n        /**\r\n         * Get the page size of the scroll bar.\r\n         *\r\n         * #### Notes\r\n         * The page size is the amount of visible content in the scrolled\r\n         * region, expressed in data units. It determines the size of the\r\n         * scroll bar thumb.\r\n         */\r\n        get: function () {\r\n            return this._page;\r\n        },\r\n        /**\r\n         * Set the page size of the scroll bar.\r\n         *\r\n         * #### Notes\r\n         * The page size will be clamped to the range `[0, Infinity]`.\r\n         */\r\n        set: function (value) {\r\n            // Clamp the page size to the allowable range.\r\n            value = Math.max(0, value);\r\n            // Do nothing if the value does not change.\r\n            if (this._page === value) {\r\n                return;\r\n            }\r\n            // Update the internal page size.\r\n            this._page = value;\r\n            // Schedule an update the scroll bar.\r\n            this.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"maximum\", {\r\n        /**\r\n         * Get the maximum value of the scroll bar.\r\n         */\r\n        get: function () {\r\n            return this._maximum;\r\n        },\r\n        /**\r\n         * Set the maximum value of the scroll bar.\r\n         *\r\n         * #### Notes\r\n         * The max size will be clamped to the range `[0, Infinity]`.\r\n         */\r\n        set: function (value) {\r\n            // Clamp the value to the allowable range.\r\n            value = Math.max(0, value);\r\n            // Do nothing if the value does not change.\r\n            if (this._maximum === value) {\r\n                return;\r\n            }\r\n            // Update the internal values.\r\n            this._maximum = value;\r\n            // Clamp the current value to the new range.\r\n            this._value = Math.min(this._value, value);\r\n            // Schedule an update the scroll bar.\r\n            this.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"decrementNode\", {\r\n        /**\r\n         * The scroll bar decrement button node.\r\n         *\r\n         * #### Notes\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-ScrollBar-button')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"incrementNode\", {\r\n        /**\r\n         * The scroll bar increment button node.\r\n         *\r\n         * #### Notes\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-ScrollBar-button')[1];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"trackNode\", {\r\n        /**\r\n         * The scroll bar track node.\r\n         *\r\n         * #### Notes\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-ScrollBar-track')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ScrollBar.prototype, \"thumbNode\", {\r\n        /**\r\n         * The scroll bar thumb node.\r\n         *\r\n         * #### Notes\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-ScrollBar-thumb')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handle the DOM events for the scroll bar.\r\n     *\r\n     * @param event - The DOM event sent to the scroll bar.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the scroll bar's DOM node.\r\n     *\r\n     * This should not be called directly by user code.\r\n     */\r\n    ScrollBar.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'mousedown':\r\n                this._evtMouseDown(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtMouseMove(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtMouseUp(event);\r\n                break;\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            case 'contextmenu':\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * A method invoked on a 'before-attach' message.\r\n     */\r\n    ScrollBar.prototype.onBeforeAttach = function (msg) {\r\n        this.node.addEventListener('mousedown', this);\r\n        this.update();\r\n    };\r\n    /**\r\n     * A method invoked on an 'after-detach' message.\r\n     */\r\n    ScrollBar.prototype.onAfterDetach = function (msg) {\r\n        this.node.removeEventListener('mousedown', this);\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * A method invoked on an 'update-request' message.\r\n     */\r\n    ScrollBar.prototype.onUpdateRequest = function (msg) {\r\n        // Convert the value and page into percentages.\r\n        var value = this._value * 100 / this._maximum;\r\n        var page = this._page * 100 / (this._page + this._maximum);\r\n        // Clamp the value and page to the relevant range.\r\n        value = Math.max(0, Math.min(value, 100));\r\n        page = Math.max(0, Math.min(page, 100));\r\n        // Fetch the thumb style.\r\n        var thumbStyle = this.thumbNode.style;\r\n        // Update the thumb style for the current orientation.\r\n        if (this._orientation === 'horizontal') {\r\n            thumbStyle.top = '';\r\n            thumbStyle.height = '';\r\n            thumbStyle.left = value + \"%\";\r\n            thumbStyle.width = page + \"%\";\r\n            thumbStyle.transform = \"translate(\" + -value + \"%, 0%)\";\r\n        }\r\n        else {\r\n            thumbStyle.left = '';\r\n            thumbStyle.width = '';\r\n            thumbStyle.top = value + \"%\";\r\n            thumbStyle.height = page + \"%\";\r\n            thumbStyle.transform = \"translate(0%, \" + -value + \"%)\";\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the scroll bar.\r\n     */\r\n    ScrollBar.prototype._evtKeyDown = function (event) {\r\n        // Stop all input events during drag.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Ignore anything except the `Escape` key.\r\n        if (event.keyCode !== 27) {\r\n            return;\r\n        }\r\n        // Fetch the previous scroll value.\r\n        var value = this._pressData ? this._pressData.value : -1;\r\n        // Release the mouse.\r\n        this._releaseMouse();\r\n        // Restore the old scroll value if possible.\r\n        if (value !== -1) {\r\n            this._moveThumb(value);\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousedown'` event for the scroll bar.\r\n     */\r\n    ScrollBar.prototype._evtMouseDown = function (event) {\r\n        // Do nothing if it's not a left mouse press.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Do nothing if the mouse is already captured.\r\n        if (this._pressData) {\r\n            return;\r\n        }\r\n        // Find the pressed scroll bar part.\r\n        var part = Private.findPart(this, event.target);\r\n        // Do nothing if the part is not of interest.\r\n        if (!part) {\r\n            return;\r\n        }\r\n        // Stop the event propagation.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Override the mouse cursor.\r\n        var override = dragdrop_1.Drag.overrideCursor('default');\r\n        // Set up the press data.\r\n        this._pressData = {\r\n            part: part, override: override,\r\n            delta: -1, value: -1,\r\n            mouseX: event.clientX,\r\n            mouseY: event.clientY\r\n        };\r\n        // Add the extra event listeners.\r\n        document.addEventListener('mousemove', this, true);\r\n        document.addEventListener('mouseup', this, true);\r\n        document.addEventListener('keydown', this, true);\r\n        document.addEventListener('contextmenu', this, true);\r\n        // Handle a thumb press.\r\n        if (part === 'thumb') {\r\n            // Fetch the thumb node.\r\n            var thumbNode = this.thumbNode;\r\n            // Fetch the client rect for the thumb.\r\n            var thumbRect = thumbNode.getBoundingClientRect();\r\n            // Update the press data delta for the current orientation.\r\n            if (this._orientation === 'horizontal') {\r\n                this._pressData.delta = event.clientX - thumbRect.left;\r\n            }\r\n            else {\r\n                this._pressData.delta = event.clientY - thumbRect.top;\r\n            }\r\n            // Add the active class to the thumb node.\r\n            thumbNode.classList.add('p-mod-active');\r\n            // Store the current value in the press data.\r\n            this._pressData.value = this._value;\r\n            // Finished.\r\n            return;\r\n        }\r\n        // Handle a track press.\r\n        if (part === 'track') {\r\n            // Fetch the client rect for the thumb.\r\n            var thumbRect = this.thumbNode.getBoundingClientRect();\r\n            // Determine the direction for the page request.\r\n            var dir = void 0;\r\n            if (this._orientation === 'horizontal') {\r\n                dir = event.clientX < thumbRect.left ? 'decrement' : 'increment';\r\n            }\r\n            else {\r\n                dir = event.clientY < thumbRect.top ? 'decrement' : 'increment';\r\n            }\r\n            // Start the repeat timer.\r\n            this._repeatTimer = setTimeout(this._onRepeat, 350);\r\n            // Emit the page requested signal.\r\n            this._pageRequested.emit(dir);\r\n            // Finished.\r\n            return;\r\n        }\r\n        // Handle a decrement button press.\r\n        if (part === 'decrement') {\r\n            // Add the active class to the decrement node.\r\n            this.decrementNode.classList.add('p-mod-active');\r\n            // Start the repeat timer.\r\n            this._repeatTimer = setTimeout(this._onRepeat, 350);\r\n            // Emit the step requested signal.\r\n            this._stepRequested.emit('decrement');\r\n            // Finished.\r\n            return;\r\n        }\r\n        // Handle an increment button press.\r\n        if (part === 'increment') {\r\n            // Add the active class to the increment node.\r\n            this.incrementNode.classList.add('p-mod-active');\r\n            // Start the repeat timer.\r\n            this._repeatTimer = setTimeout(this._onRepeat, 350);\r\n            // Emit the step requested signal.\r\n            this._stepRequested.emit('increment');\r\n            // Finished.\r\n            return;\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousemove'` event for the scroll bar.\r\n     */\r\n    ScrollBar.prototype._evtMouseMove = function (event) {\r\n        // Do nothing if no drag is in progress.\r\n        if (!this._pressData) {\r\n            return;\r\n        }\r\n        // Stop the event propagation.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Update the mouse position.\r\n        this._pressData.mouseX = event.clientX;\r\n        this._pressData.mouseY = event.clientY;\r\n        // Bail if the thumb is not being dragged.\r\n        if (this._pressData.part !== 'thumb') {\r\n            return;\r\n        }\r\n        // Get the client rect for the thumb and track.\r\n        var thumbRect = this.thumbNode.getBoundingClientRect();\r\n        var trackRect = this.trackNode.getBoundingClientRect();\r\n        // Fetch the scroll geometry based on the orientation.\r\n        var trackPos;\r\n        var trackSpan;\r\n        if (this._orientation === 'horizontal') {\r\n            trackPos = event.clientX - trackRect.left - this._pressData.delta;\r\n            trackSpan = trackRect.width - thumbRect.width;\r\n        }\r\n        else {\r\n            trackPos = event.clientY - trackRect.top - this._pressData.delta;\r\n            trackSpan = trackRect.height - thumbRect.height;\r\n        }\r\n        // Compute the desired value from the scroll geometry.\r\n        var value = trackSpan === 0 ? 0 : trackPos * this._maximum / trackSpan;\r\n        // Move the thumb to the computed value.\r\n        this._moveThumb(value);\r\n    };\r\n    /**\r\n     * Handle the `'mouseup'` event for the scroll bar.\r\n     */\r\n    ScrollBar.prototype._evtMouseUp = function (event) {\r\n        // Do nothing if it's not a left mouse release.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Stop the event propagation.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Release the mouse.\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * Release the mouse and restore the node states.\r\n     */\r\n    ScrollBar.prototype._releaseMouse = function () {\r\n        // Bail if there is no press data.\r\n        if (!this._pressData) {\r\n            return;\r\n        }\r\n        // Clear the repeat timer.\r\n        clearTimeout(this._repeatTimer);\r\n        this._repeatTimer = -1;\r\n        // Clear the press data.\r\n        this._pressData.override.dispose();\r\n        this._pressData = null;\r\n        // Remove the extra event listeners.\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n        document.removeEventListener('keydown', this, true);\r\n        document.removeEventListener('contextmenu', this, true);\r\n        // Remove the active classes from the nodes.\r\n        this.thumbNode.classList.remove('p-mod-active');\r\n        this.decrementNode.classList.remove('p-mod-active');\r\n        this.incrementNode.classList.remove('p-mod-active');\r\n    };\r\n    /**\r\n     * Move the thumb to the specified position.\r\n     */\r\n    ScrollBar.prototype._moveThumb = function (value) {\r\n        // Clamp the value to the allowed range.\r\n        value = Math.max(0, Math.min(value, this._maximum));\r\n        // Bail if the value does not change.\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n        // Update the internal value.\r\n        this._value = value;\r\n        // Schedule an update of the scroll bar.\r\n        this.update();\r\n        // Emit the thumb moved signal.\r\n        this._thumbMoved.emit(value);\r\n    };\r\n    return ScrollBar;\r\n}(widget_1.Widget));\r\nexports.ScrollBar = ScrollBar;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create the DOM node for a scroll bar.\r\n     */\r\n    function createNode() {\r\n        var node = document.createElement('div');\r\n        var decrement = document.createElement('div');\r\n        var increment = document.createElement('div');\r\n        var track = document.createElement('div');\r\n        var thumb = document.createElement('div');\r\n        decrement.className = 'p-ScrollBar-button';\r\n        increment.className = 'p-ScrollBar-button';\r\n        decrement.dataset['action'] = 'decrement';\r\n        increment.dataset['action'] = 'increment';\r\n        track.className = 'p-ScrollBar-track';\r\n        thumb.className = 'p-ScrollBar-thumb';\r\n        track.appendChild(thumb);\r\n        node.appendChild(decrement);\r\n        node.appendChild(track);\r\n        node.appendChild(increment);\r\n        return node;\r\n    }\r\n    Private.createNode = createNode;\r\n    /**\r\n     * Find the scroll bar part which contains the given target.\r\n     */\r\n    function findPart(scrollBar, target) {\r\n        // Test the thumb.\r\n        if (scrollBar.thumbNode.contains(target)) {\r\n            return 'thumb';\r\n        }\r\n        // Test the track.\r\n        if (scrollBar.trackNode.contains(target)) {\r\n            return 'track';\r\n        }\r\n        // Test the decrement button.\r\n        if (scrollBar.decrementNode.contains(target)) {\r\n            return 'decrement';\r\n        }\r\n        // Test the increment button.\r\n        if (scrollBar.incrementNode.contains(target)) {\r\n            return 'increment';\r\n        }\r\n        // Indicate no match.\r\n        return null;\r\n    }\r\n    Private.findPart = findPart;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar layout_1 = require(\"./layout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A concrete layout implementation which holds a single widget.\r\n *\r\n * #### Notes\r\n * This class is useful for creating simple container widgets which\r\n * hold a single child. The child should be positioned with CSS.\r\n */\r\nvar SingletonLayout = (function (_super) {\r\n    __extends(SingletonLayout, _super);\r\n    function SingletonLayout() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._widget = null;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     */\r\n    SingletonLayout.prototype.dispose = function () {\r\n        if (this._widget) {\r\n            var widget = this._widget;\r\n            this._widget = null;\r\n            widget.dispose();\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(SingletonLayout.prototype, \"widget\", {\r\n        /**\r\n         * Get the child widget for the layout.\r\n         */\r\n        get: function () {\r\n            return this._widget;\r\n        },\r\n        /**\r\n         * Set the child widget for the layout.\r\n         *\r\n         * #### Notes\r\n         * Setting the child widget will cause the old child widget to be\r\n         * automatically disposed. If that is not desired, set the parent\r\n         * of the old child to `null` before assigning a new child.\r\n         */\r\n        set: function (widget) {\r\n            // Bail early if the widget does not change.\r\n            if (this._widget === widget) {\r\n                return;\r\n            }\r\n            // Dispose of the old child widget.\r\n            if (this._widget) {\r\n                this._widget.dispose();\r\n            }\r\n            // Update the internal widget.\r\n            this._widget = widget;\r\n            // Attach the new child widget if needed.\r\n            if (this.parent && widget) {\r\n                this.attachWidget(widget);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create an iterator over the widgets in the layout.\r\n     *\r\n     * @returns A new iterator over the widgets in the layout.\r\n     */\r\n    SingletonLayout.prototype.iter = function () {\r\n        return this._widget ? algorithm_1.once(this._widget) : algorithm_1.empty();\r\n    };\r\n    /**\r\n     * Remove a widget from the layout.\r\n     *\r\n     * @param widget - The widget to remove from the layout.\r\n     *\r\n     * #### Notes\r\n     * A widget is automatically removed from the layout when its `parent`\r\n     * is set to `null`. This method should only be invoked directly when\r\n     * removing a widget from a layout which has yet to be installed on a\r\n     * parent widget.\r\n     *\r\n     * This method does *not* modify the widget's `parent`.\r\n     */\r\n    SingletonLayout.prototype.removeWidget = function (widget) {\r\n        // Bail early if the widget does not exist in the layout.\r\n        if (this._widget !== widget) {\r\n            return;\r\n        }\r\n        // Clear the internal widget.\r\n        this._widget = null;\r\n        // If the layout is parented, detach the widget from the DOM.\r\n        if (this.parent) {\r\n            this.detachWidget(widget);\r\n        }\r\n    };\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    SingletonLayout.prototype.init = function () {\r\n        var _this = this;\r\n        _super.prototype.init.call(this);\r\n        algorithm_1.each(this, function (widget) { _this.attachWidget(widget); });\r\n    };\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param index - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This method is called automatically by the single layout at the\r\n     * appropriate time. It should not be called directly by user code.\r\n     *\r\n     * The default implementation adds the widgets's node to the parent's\r\n     * node at the proper location, and sends the appropriate attach\r\n     * messages to the widget if the parent is attached to the DOM.\r\n     *\r\n     * Subclasses may reimplement this method to control how the widget's\r\n     * node is added to the parent's node.\r\n     */\r\n    SingletonLayout.prototype.attachWidget = function (widget) {\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Add the widget's node to the parent.\r\n        this.parent.node.appendChild(widget.node);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n    };\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This method is called automatically by the single layout at the\r\n     * appropriate time. It should not be called directly by user code.\r\n     *\r\n     * The default implementation removes the widget's node from the\r\n     * parent's node, and sends the appropriate detach messages to the\r\n     * widget if the parent is attached to the DOM.\r\n     *\r\n     * Subclasses may reimplement this method to control how the widget's\r\n     * node is removed from the parent's node.\r\n     */\r\n    SingletonLayout.prototype.detachWidget = function (widget) {\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget's node from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        // Send an `'after-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n    };\r\n    return SingletonLayout;\r\n}(layout_1.Layout));\r\nexports.SingletonLayout = SingletonLayout;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar properties_1 = require(\"@phosphor/properties\");\r\nvar boxengine_1 = require(\"./boxengine\");\r\nvar layout_1 = require(\"./layout\");\r\nvar panellayout_1 = require(\"./panellayout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A layout which arranges its widgets into resizable sections.\r\n */\r\nvar SplitLayout = (function (_super) {\r\n    __extends(SplitLayout, _super);\r\n    /**\r\n     * Construct a new split layout.\r\n     *\r\n     * @param options - The options for initializing the layout.\r\n     */\r\n    function SplitLayout(options) {\r\n        var _this = _super.call(this) || this;\r\n        _this._fixed = 0;\r\n        _this._spacing = 4;\r\n        _this._dirty = false;\r\n        _this._hasNormedSizes = false;\r\n        _this._sizers = [];\r\n        _this._items = [];\r\n        _this._handles = [];\r\n        _this._box = null;\r\n        _this._alignment = 'start';\r\n        _this._orientation = 'horizontal';\r\n        _this.renderer = options.renderer;\r\n        if (options.orientation !== undefined) {\r\n            _this._orientation = options.orientation;\r\n        }\r\n        if (options.alignment !== undefined) {\r\n            _this._alignment = options.alignment;\r\n        }\r\n        if (options.spacing !== undefined) {\r\n            _this._spacing = Private.clampSpacing(options.spacing);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     */\r\n    SplitLayout.prototype.dispose = function () {\r\n        // Dispose of the layout items.\r\n        algorithm_1.each(this._items, function (item) { item.dispose(); });\r\n        // Clear the layout state.\r\n        this._box = null;\r\n        this._items.length = 0;\r\n        this._sizers.length = 0;\r\n        this._handles.length = 0;\r\n        // Dispose of the rest of the layout.\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(SplitLayout.prototype, \"orientation\", {\r\n        /**\r\n         * Get the layout orientation for the split layout.\r\n         */\r\n        get: function () {\r\n            return this._orientation;\r\n        },\r\n        /**\r\n         * Set the layout orientation for the split layout.\r\n         */\r\n        set: function (value) {\r\n            if (this._orientation === value) {\r\n                return;\r\n            }\r\n            this._orientation = value;\r\n            if (!this.parent) {\r\n                return;\r\n            }\r\n            this.parent.dataset['orientation'] = value;\r\n            this.parent.fit();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SplitLayout.prototype, \"alignment\", {\r\n        /**\r\n         * Get the content alignment for the split layout.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand  to fill the\r\n         * entire split layout.\r\n         */\r\n        get: function () {\r\n            return this._alignment;\r\n        },\r\n        /**\r\n         * Set the content alignment for the split layout.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand  to fill the\r\n         * entire split layout.\r\n         */\r\n        set: function (value) {\r\n            if (this._alignment === value) {\r\n                return;\r\n            }\r\n            this._alignment = value;\r\n            if (!this.parent) {\r\n                return;\r\n            }\r\n            this.parent.dataset['alignment'] = value;\r\n            this.parent.update();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SplitLayout.prototype, \"spacing\", {\r\n        /**\r\n         * Get the inter-element spacing for the split layout.\r\n         */\r\n        get: function () {\r\n            return this._spacing;\r\n        },\r\n        /**\r\n         * Set the inter-element spacing for the split layout.\r\n         */\r\n        set: function (value) {\r\n            value = Private.clampSpacing(value);\r\n            if (this._spacing === value) {\r\n                return;\r\n            }\r\n            this._spacing = value;\r\n            if (!this.parent) {\r\n                return;\r\n            }\r\n            this.parent.fit();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SplitLayout.prototype, \"handles\", {\r\n        /**\r\n         * A read-only array of the split handles in the layout.\r\n         */\r\n        get: function () {\r\n            return this._handles;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the relative sizes of the widgets in the layout.\r\n     *\r\n     * @returns A new array of the relative sizes of the widgets.\r\n     *\r\n     * #### Notes\r\n     * The returned sizes reflect the sizes of the widgets normalized\r\n     * relative to their siblings.\r\n     *\r\n     * This method **does not** measure the DOM nodes.\r\n     */\r\n    SplitLayout.prototype.relativeSizes = function () {\r\n        return Private.normalize(this._sizers.map(function (sizer) { return sizer.size; }));\r\n    };\r\n    /**\r\n     * Set the relative sizes for the widgets in the layout.\r\n     *\r\n     * @param sizes - The relative sizes for the widgets in the panel.\r\n     *\r\n     * #### Notes\r\n     * Extra values are ignored, too few will yield an undefined layout.\r\n     *\r\n     * The actual geometry of the DOM nodes is updated asynchronously.\r\n     */\r\n    SplitLayout.prototype.setRelativeSizes = function (sizes) {\r\n        // Copy the sizes and pad with zeros as needed.\r\n        var n = this._sizers.length;\r\n        var temp = sizes.slice(0, n);\r\n        while (temp.length < n) {\r\n            temp.push(0);\r\n        }\r\n        // Normalize the padded sizes.\r\n        var normed = Private.normalize(temp);\r\n        // Apply the normalized sizes to the sizers.\r\n        for (var i = 0; i < n; ++i) {\r\n            var sizer = this._sizers[i];\r\n            sizer.sizeHint = normed[i];\r\n            sizer.size = normed[i];\r\n        }\r\n        // Set the flag indicating the sizes are normalized.\r\n        this._hasNormedSizes = true;\r\n        // Trigger an update of the parent widget.\r\n        if (this.parent) {\r\n            this.parent.update();\r\n        }\r\n    };\r\n    /**\r\n     * Move the offset position of a split handle.\r\n     *\r\n     * @param index - The index of the handle of the interest.\r\n     *\r\n     * @param position - The desired offset position of the handle.\r\n     *\r\n     * #### Notes\r\n     * The position is relative to the offset parent.\r\n     *\r\n     * This will move the handle as close as possible to the desired\r\n     * position. The sibling widgets will be adjusted as necessary.\r\n     */\r\n    SplitLayout.prototype.moveHandle = function (index, position) {\r\n        // Bail if the index is invalid or the handle is hidden.\r\n        var handle = this._handles[index];\r\n        if (!handle || handle.classList.contains('p-mod-hidden')) {\r\n            return;\r\n        }\r\n        // Compute the desired delta movement for the handle.\r\n        var delta;\r\n        if (this._orientation === 'horizontal') {\r\n            delta = position - handle.offsetLeft;\r\n        }\r\n        else {\r\n            delta = position - handle.offsetTop;\r\n        }\r\n        // Bail if there is no handle movement.\r\n        if (delta === 0) {\r\n            return;\r\n        }\r\n        // Prevent widget resizing unless needed.\r\n        for (var _i = 0, _a = this._sizers; _i < _a.length; _i++) {\r\n            var sizer = _a[_i];\r\n            if (sizer.size > 0) {\r\n                sizer.sizeHint = sizer.size;\r\n            }\r\n        }\r\n        // Adjust the sizers to reflect the handle movement.\r\n        boxengine_1.BoxEngine.adjust(this._sizers, index, delta);\r\n        // Update the layout of the widgets.\r\n        if (this.parent) {\r\n            this.parent.update();\r\n        }\r\n    };\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    SplitLayout.prototype.init = function () {\r\n        this.parent.dataset['orientation'] = this.orientation;\r\n        this.parent.dataset['alignment'] = this.alignment;\r\n        _super.prototype.init.call(this);\r\n    };\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param index - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    SplitLayout.prototype.attachWidget = function (index, widget) {\r\n        // Create the item, handle, and sizer for the new widget.\r\n        var item = new layout_1.LayoutItem(widget);\r\n        var handle = Private.createHandle(this.renderer);\r\n        var average = Private.averageSize(this._sizers);\r\n        var sizer = Private.createSizer(average);\r\n        // Insert the item, handle, and sizer into the internal arrays.\r\n        algorithm_1.ArrayExt.insert(this._items, index, item);\r\n        algorithm_1.ArrayExt.insert(this._sizers, index, sizer);\r\n        algorithm_1.ArrayExt.insert(this._handles, index, handle);\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Add the widget and handle nodes to the parent.\r\n        this.parent.node.appendChild(widget.node);\r\n        this.parent.node.appendChild(handle);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Move a widget in the parent's DOM node.\r\n     *\r\n     * @param fromIndex - The previous index of the widget in the layout.\r\n     *\r\n     * @param toIndex - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to move in the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    SplitLayout.prototype.moveWidget = function (fromIndex, toIndex, widget) {\r\n        // Move the item, sizer, and handle for the widget.\r\n        algorithm_1.ArrayExt.move(this._items, fromIndex, toIndex);\r\n        algorithm_1.ArrayExt.move(this._sizers, fromIndex, toIndex);\r\n        algorithm_1.ArrayExt.move(this._handles, fromIndex, toIndex);\r\n        // Post a fit request to the parent to show/hide last handle.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param index - The previous index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    SplitLayout.prototype.detachWidget = function (index, widget) {\r\n        // Remove the item, handle, and sizer for the widget.\r\n        var item = algorithm_1.ArrayExt.removeAt(this._items, index);\r\n        var handle = algorithm_1.ArrayExt.removeAt(this._handles, index);\r\n        algorithm_1.ArrayExt.removeAt(this._sizers, index);\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget and handle nodes from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        this.parent.node.removeChild(handle);\r\n        // Send an `'after-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n        // Dispose of the layout item.\r\n        item.dispose();\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-show'` message.\r\n     */\r\n    SplitLayout.prototype.onBeforeShow = function (msg) {\r\n        _super.prototype.onBeforeShow.call(this, msg);\r\n        this.parent.update();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    SplitLayout.prototype.onBeforeAttach = function (msg) {\r\n        _super.prototype.onBeforeAttach.call(this, msg);\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     */\r\n    SplitLayout.prototype.onChildShown = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     */\r\n    SplitLayout.prototype.onChildHidden = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     */\r\n    SplitLayout.prototype.onResize = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(msg.width, msg.height);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    SplitLayout.prototype.onUpdateRequest = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(-1, -1);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     */\r\n    SplitLayout.prototype.onFitRequest = function (msg) {\r\n        if (this.parent.isAttached) {\r\n            this._fit();\r\n        }\r\n    };\r\n    /**\r\n     * Fit the layout to the total size required by the widgets.\r\n     */\r\n    SplitLayout.prototype._fit = function () {\r\n        // Update the handles and track the visible widget count.\r\n        var nVisible = 0;\r\n        var lastHandleIndex = -1;\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            if (this._items[i].isHidden) {\r\n                this._handles[i].classList.add('p-mod-hidden');\r\n            }\r\n            else {\r\n                this._handles[i].classList.remove('p-mod-hidden');\r\n                lastHandleIndex = i;\r\n                nVisible++;\r\n            }\r\n        }\r\n        // Hide the handle for the last visible widget.\r\n        if (lastHandleIndex !== -1) {\r\n            this._handles[lastHandleIndex].classList.add('p-mod-hidden');\r\n        }\r\n        // Update the fixed space for the visible items.\r\n        this._fixed = this._spacing * Math.max(0, nVisible - 1);\r\n        // Setup the computed minimum size.\r\n        var horz = this._orientation === 'horizontal';\r\n        var minW = horz ? this._fixed : 0;\r\n        var minH = horz ? 0 : this._fixed;\r\n        // Update the sizers and computed size limits.\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            // Fetch the item and corresponding box sizer.\r\n            var item = this._items[i];\r\n            var sizer = this._sizers[i];\r\n            // Prevent resizing unless necessary.\r\n            if (sizer.size > 0) {\r\n                sizer.sizeHint = sizer.size;\r\n            }\r\n            // If the item is hidden, it should consume zero size.\r\n            if (item.isHidden) {\r\n                sizer.minSize = 0;\r\n                sizer.maxSize = 0;\r\n                continue;\r\n            }\r\n            // Update the size limits for the item.\r\n            item.fit();\r\n            // Update the stretch factor.\r\n            sizer.stretch = SplitLayout.getStretch(item.widget);\r\n            // Update the sizer limits and computed min size.\r\n            if (horz) {\r\n                sizer.minSize = item.minWidth;\r\n                sizer.maxSize = item.maxWidth;\r\n                minW += item.minWidth;\r\n                minH = Math.max(minH, item.minHeight);\r\n            }\r\n            else {\r\n                sizer.minSize = item.minHeight;\r\n                sizer.maxSize = item.maxHeight;\r\n                minH += item.minHeight;\r\n                minW = Math.max(minW, item.minWidth);\r\n            }\r\n        }\r\n        // Update the box sizing and add it to the computed min size.\r\n        var box = this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        minW += box.horizontalSum;\r\n        minH += box.verticalSum;\r\n        // Update the parent's min size constraints.\r\n        var style = this.parent.node.style;\r\n        style.minWidth = minW + \"px\";\r\n        style.minHeight = minH + \"px\";\r\n        // Set the dirty flag to ensure only a single update occurs.\r\n        this._dirty = true;\r\n        // Notify the ancestor that it should fit immediately. This may\r\n        // cause a resize of the parent, fulfilling the required update.\r\n        if (this.parent.parent) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent.parent, widget_1.Widget.Msg.FitRequest);\r\n        }\r\n        // If the dirty flag is still set, the parent was not resized.\r\n        // Trigger the required update on the parent widget immediately.\r\n        if (this._dirty) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widget_1.Widget.Msg.UpdateRequest);\r\n        }\r\n    };\r\n    /**\r\n     * Update the layout position and size of the widgets.\r\n     *\r\n     * The parent offset dimensions should be `-1` if unknown.\r\n     */\r\n    SplitLayout.prototype._update = function (offsetWidth, offsetHeight) {\r\n        // Clear the dirty flag to indicate the update occurred.\r\n        this._dirty = false;\r\n        // Compute the visible item count.\r\n        var nVisible = 0;\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            nVisible += +!this._items[i].isHidden;\r\n        }\r\n        // Bail early if there are no visible items to layout.\r\n        if (nVisible === 0) {\r\n            return;\r\n        }\r\n        // Measure the parent if the offset dimensions are unknown.\r\n        if (offsetWidth < 0) {\r\n            offsetWidth = this.parent.node.offsetWidth;\r\n        }\r\n        if (offsetHeight < 0) {\r\n            offsetHeight = this.parent.node.offsetHeight;\r\n        }\r\n        // Ensure the parent box sizing data is computed.\r\n        if (!this._box) {\r\n            this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        }\r\n        // Compute the actual layout bounds adjusted for border and padding.\r\n        var top = this._box.paddingTop;\r\n        var left = this._box.paddingLeft;\r\n        var width = offsetWidth - this._box.horizontalSum;\r\n        var height = offsetHeight - this._box.verticalSum;\r\n        // Compute the adjusted layout space.\r\n        var space;\r\n        var horz = this._orientation === 'horizontal';\r\n        if (horz) {\r\n            space = Math.max(0, width - this._fixed);\r\n        }\r\n        else {\r\n            space = Math.max(0, height - this._fixed);\r\n        }\r\n        // Scale the size hints if they are normalized.\r\n        if (this._hasNormedSizes) {\r\n            for (var _i = 0, _a = this._sizers; _i < _a.length; _i++) {\r\n                var sizer = _a[_i];\r\n                sizer.sizeHint *= space;\r\n            }\r\n            this._hasNormedSizes = false;\r\n        }\r\n        // Distribute the layout space to the box sizers.\r\n        var delta = boxengine_1.BoxEngine.calc(this._sizers, space);\r\n        // Set up the variables for justification and alignment offset.\r\n        var extra = 0;\r\n        var offset = 0;\r\n        // Account for alignment if there is extra layout space.\r\n        if (delta > 0) {\r\n            switch (this._alignment) {\r\n                case 'start':\r\n                    break;\r\n                case 'center':\r\n                    extra = 0;\r\n                    offset = delta / 2;\r\n                    break;\r\n                case 'end':\r\n                    extra = 0;\r\n                    offset = delta;\r\n                    break;\r\n                case 'justify':\r\n                    extra = delta / nVisible;\r\n                    offset = 0;\r\n                    break;\r\n                default:\r\n                    throw 'unreachable';\r\n            }\r\n        }\r\n        // Layout the items using the computed box sizes.\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            // Fetch the item.\r\n            var item = this._items[i];\r\n            // Ignore hidden items.\r\n            if (item.isHidden) {\r\n                continue;\r\n            }\r\n            // Fetch the computed size for the widget.\r\n            var size = this._sizers[i].size;\r\n            // Fetch the style for the handle.\r\n            var handleStyle = this._handles[i].style;\r\n            // Update the widget and handle, and advance the relevant edge.\r\n            if (horz) {\r\n                item.update(left + offset, top, size + extra, height);\r\n                left += size + extra;\r\n                handleStyle.top = top + \"px\";\r\n                handleStyle.left = left + offset + \"px\";\r\n                handleStyle.width = this._spacing + \"px\";\r\n                handleStyle.height = height + \"px\";\r\n                left += this._spacing;\r\n            }\r\n            else {\r\n                item.update(left, top + offset, width, size + extra);\r\n                top += size + extra;\r\n                handleStyle.top = top + offset + \"px\";\r\n                handleStyle.left = left + \"px\";\r\n                handleStyle.width = width + \"px\";\r\n                handleStyle.height = this._spacing + \"px\";\r\n                top += this._spacing;\r\n            }\r\n        }\r\n    };\r\n    return SplitLayout;\r\n}(panellayout_1.PanelLayout));\r\nexports.SplitLayout = SplitLayout;\r\n/**\r\n * The namespace for the `SplitLayout` class statics.\r\n */\r\n(function (SplitLayout) {\r\n    /**\r\n     * Get the split layout stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The split layout stretch factor for the widget.\r\n     */\r\n    function getStretch(widget) {\r\n        return Private.stretchProperty.get(widget);\r\n    }\r\n    SplitLayout.getStretch = getStretch;\r\n    /**\r\n     * Set the split layout stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the stretch factor.\r\n     */\r\n    function setStretch(widget, value) {\r\n        Private.stretchProperty.set(widget, value);\r\n    }\r\n    SplitLayout.setStretch = setStretch;\r\n})(SplitLayout = exports.SplitLayout || (exports.SplitLayout = {}));\r\nexports.SplitLayout = SplitLayout;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The property descriptor for a widget stretch factor.\r\n     */\r\n    Private.stretchProperty = new properties_1.AttachedProperty({\r\n        name: 'stretch',\r\n        create: function () { return 0; },\r\n        coerce: function (owner, value) { return Math.max(0, Math.floor(value)); },\r\n        changed: onChildSizingChanged\r\n    });\r\n    /**\r\n     * Create a new box sizer with the given size hint.\r\n     */\r\n    function createSizer(size) {\r\n        var sizer = new boxengine_1.BoxSizer();\r\n        sizer.sizeHint = Math.floor(size);\r\n        return sizer;\r\n    }\r\n    Private.createSizer = createSizer;\r\n    /**\r\n     * Create a new split handle node using the given renderer.\r\n     */\r\n    function createHandle(renderer) {\r\n        var handle = renderer.createHandle();\r\n        handle.style.position = 'absolute';\r\n        return handle;\r\n    }\r\n    Private.createHandle = createHandle;\r\n    /**\r\n     * Clamp a spacing value to an integer >= 0.\r\n     */\r\n    function clampSpacing(value) {\r\n        return Math.max(0, Math.floor(value));\r\n    }\r\n    Private.clampSpacing = clampSpacing;\r\n    /**\r\n     * Compute the average size of an array of box sizers.\r\n     */\r\n    function averageSize(sizers) {\r\n        return sizers.reduce(function (v, s) { return v + s.size; }, 0) / sizers.length || 0;\r\n    }\r\n    Private.averageSize = averageSize;\r\n    /**\r\n     * Normalize an array of values.\r\n     */\r\n    function normalize(values) {\r\n        var n = values.length;\r\n        if (n === 0) {\r\n            return [];\r\n        }\r\n        var sum = values.reduce(function (a, b) { return a + Math.abs(b); }, 0);\r\n        return sum === 0 ? values.map(function (v) { return 1 / n; }) : values.map(function (v) { return v / sum; });\r\n    }\r\n    Private.normalize = normalize;\r\n    /**\r\n     * The change handler for the attached sizing properties.\r\n     */\r\n    function onChildSizingChanged(child) {\r\n        if (child.parent && child.parent.layout instanceof SplitLayout) {\r\n            child.parent.fit();\r\n        }\r\n    }\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar dragdrop_1 = require(\"@phosphor/dragdrop\");\r\nvar panel_1 = require(\"./panel\");\r\nvar splitlayout_1 = require(\"./splitlayout\");\r\n/**\r\n * A panel which arranges its widgets into resizable sections.\r\n *\r\n * #### Notes\r\n * This class provides a convenience wrapper around a [[SplitLayout]].\r\n */\r\nvar SplitPanel = (function (_super) {\r\n    __extends(SplitPanel, _super);\r\n    /**\r\n     * Construct a new split panel.\r\n     *\r\n     * @param options - The options for initializing the split panel.\r\n     */\r\n    function SplitPanel(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, { layout: Private.createLayout(options) }) || this;\r\n        _this._pressData = null;\r\n        _this.addClass('p-SplitPanel');\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the panel.\r\n     */\r\n    SplitPanel.prototype.dispose = function () {\r\n        this._releaseMouse();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(SplitPanel.prototype, \"orientation\", {\r\n        /**\r\n         * Get the layout orientation for the split panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.orientation;\r\n        },\r\n        /**\r\n         * Set the layout orientation for the split panel.\r\n         */\r\n        set: function (value) {\r\n            this.layout.orientation = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SplitPanel.prototype, \"alignment\", {\r\n        /**\r\n         * Get the content alignment for the split panel.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand to fill the\r\n         * entire split panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.alignment;\r\n        },\r\n        /**\r\n         * Set the content alignment for the split panel.\r\n         *\r\n         * #### Notes\r\n         * This is the alignment of the widgets in the layout direction.\r\n         *\r\n         * The alignment has no effect if the widgets can expand to fill the\r\n         * entire split panel.\r\n         */\r\n        set: function (value) {\r\n            this.layout.alignment = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SplitPanel.prototype, \"spacing\", {\r\n        /**\r\n         * Get the inter-element spacing for the split panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.spacing;\r\n        },\r\n        /**\r\n         * Set the inter-element spacing for the split panel.\r\n         */\r\n        set: function (value) {\r\n            this.layout.spacing = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SplitPanel.prototype, \"renderer\", {\r\n        /**\r\n         * The renderer used by the split panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.renderer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SplitPanel.prototype, \"handles\", {\r\n        /**\r\n         * A read-only array of the split handles in the panel.\r\n         */\r\n        get: function () {\r\n            return this.layout.handles;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the relative sizes of the widgets in the panel.\r\n     *\r\n     * @returns A new array of the relative sizes of the widgets.\r\n     *\r\n     * #### Notes\r\n     * The returned sizes reflect the sizes of the widgets normalized\r\n     * relative to their siblings.\r\n     *\r\n     * This method **does not** measure the DOM nodes.\r\n     */\r\n    SplitPanel.prototype.relativeSizes = function () {\r\n        return this.layout.relativeSizes();\r\n    };\r\n    /**\r\n     * Set the relative sizes for the widgets in the panel.\r\n     *\r\n     * @param sizes - The relative sizes for the widgets in the panel.\r\n     *\r\n     * #### Notes\r\n     * Extra values are ignored, too few will yield an undefined layout.\r\n     *\r\n     * The actual geometry of the DOM nodes is updated asynchronously.\r\n     */\r\n    SplitPanel.prototype.setRelativeSizes = function (sizes) {\r\n        this.layout.setRelativeSizes(sizes);\r\n    };\r\n    /**\r\n     * Handle the DOM events for the split panel.\r\n     *\r\n     * @param event - The DOM event sent to the panel.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the panel's DOM node. It should\r\n     * not be called directly by user code.\r\n     */\r\n    SplitPanel.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'mousedown':\r\n                this._evtMouseDown(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtMouseMove(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtMouseUp(event);\r\n                break;\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            case 'contextmenu':\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    SplitPanel.prototype.onBeforeAttach = function (msg) {\r\n        this.node.addEventListener('mousedown', this);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     */\r\n    SplitPanel.prototype.onAfterDetach = function (msg) {\r\n        this.node.removeEventListener('mousedown', this);\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-added'` message.\r\n     */\r\n    SplitPanel.prototype.onChildAdded = function (msg) {\r\n        msg.child.addClass('p-SplitPanel-child');\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     */\r\n    SplitPanel.prototype.onChildRemoved = function (msg) {\r\n        msg.child.removeClass('p-SplitPanel-child');\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the split panel.\r\n     */\r\n    SplitPanel.prototype._evtKeyDown = function (event) {\r\n        // Stop input events during drag.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Release the mouse if `Escape` is pressed.\r\n        if (event.keyCode === 27) {\r\n            this._releaseMouse();\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousedown'` event for the split panel.\r\n     */\r\n    SplitPanel.prototype._evtMouseDown = function (event) {\r\n        // Do nothing if the left mouse button is not pressed.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Find the handle which contains the mouse target, if any.\r\n        var layout = this.layout;\r\n        var index = algorithm_1.ArrayExt.findFirstIndex(layout.handles, function (handle) {\r\n            return handle.contains(event.target);\r\n        });\r\n        // Bail early if the mouse press was not on a handle.\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        // Stop the event when a split handle is pressed.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Add the extra document listeners.\r\n        document.addEventListener('mouseup', this, true);\r\n        document.addEventListener('mousemove', this, true);\r\n        document.addEventListener('keydown', this, true);\r\n        document.addEventListener('contextmenu', this, true);\r\n        // Compute the offset delta for the handle press.\r\n        var delta;\r\n        var handle = layout.handles[index];\r\n        var rect = handle.getBoundingClientRect();\r\n        if (layout.orientation === 'horizontal') {\r\n            delta = event.clientX - rect.left;\r\n        }\r\n        else {\r\n            delta = event.clientY - rect.top;\r\n        }\r\n        // Override the cursor and store the press data.\r\n        var style = window.getComputedStyle(handle);\r\n        var override = dragdrop_1.Drag.overrideCursor(style.cursor);\r\n        this._pressData = { index: index, delta: delta, override: override };\r\n    };\r\n    /**\r\n     * Handle the `'mousemove'` event for the split panel.\r\n     */\r\n    SplitPanel.prototype._evtMouseMove = function (event) {\r\n        // Stop the event when dragging a split handle.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Compute the desired offset position for the handle.\r\n        var pos;\r\n        var layout = this.layout;\r\n        var rect = this.node.getBoundingClientRect();\r\n        if (layout.orientation === 'horizontal') {\r\n            pos = event.clientX - rect.left - this._pressData.delta;\r\n        }\r\n        else {\r\n            pos = event.clientY - rect.top - this._pressData.delta;\r\n        }\r\n        // Move the handle as close to the desired position as possible.\r\n        layout.moveHandle(this._pressData.index, pos);\r\n    };\r\n    /**\r\n     * Handle the `'mouseup'` event for the split panel.\r\n     */\r\n    SplitPanel.prototype._evtMouseUp = function (event) {\r\n        // Do nothing if the left mouse button is not released.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Stop the event when releasing a handle.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Finalize the mouse release.\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * Release the mouse grab for the split panel.\r\n     */\r\n    SplitPanel.prototype._releaseMouse = function () {\r\n        // Bail early if no drag is in progress.\r\n        if (!this._pressData) {\r\n            return;\r\n        }\r\n        // Clear the override cursor.\r\n        this._pressData.override.dispose();\r\n        this._pressData = null;\r\n        // Remove the extra document listeners.\r\n        document.removeEventListener('mouseup', this, true);\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('keydown', this, true);\r\n        document.removeEventListener('contextmenu', this, true);\r\n    };\r\n    return SplitPanel;\r\n}(panel_1.Panel));\r\nexports.SplitPanel = SplitPanel;\r\n/**\r\n * The namespace for the `SplitPanel` class statics.\r\n */\r\n(function (SplitPanel) {\r\n    /**\r\n     * The default implementation of `IRenderer`.\r\n     */\r\n    var Renderer = (function () {\r\n        function Renderer() {\r\n        }\r\n        /**\r\n         * Create a new handle for use with a split panel.\r\n         *\r\n         * @returns A new handle element for a split panel.\r\n         */\r\n        Renderer.prototype.createHandle = function () {\r\n            var handle = document.createElement('div');\r\n            handle.className = 'p-SplitPanel-handle';\r\n            return handle;\r\n        };\r\n        return Renderer;\r\n    }());\r\n    SplitPanel.Renderer = Renderer;\r\n    /**\r\n     * The default `Renderer` instance.\r\n     */\r\n    SplitPanel.defaultRenderer = new Renderer();\r\n    /**\r\n     * Get the split panel stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The split panel stretch factor for the widget.\r\n     */\r\n    function getStretch(widget) {\r\n        return splitlayout_1.SplitLayout.getStretch(widget);\r\n    }\r\n    SplitPanel.getStretch = getStretch;\r\n    /**\r\n     * Set the split panel stretch factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the stretch factor.\r\n     */\r\n    function setStretch(widget, value) {\r\n        splitlayout_1.SplitLayout.setStretch(widget, value);\r\n    }\r\n    SplitPanel.setStretch = setStretch;\r\n})(SplitPanel = exports.SplitPanel || (exports.SplitPanel = {}));\r\nexports.SplitPanel = SplitPanel;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create a split layout for the given panel options.\r\n     */\r\n    function createLayout(options) {\r\n        return options.layout || new splitlayout_1.SplitLayout({\r\n            renderer: options.renderer || SplitPanel.defaultRenderer,\r\n            orientation: options.orientation,\r\n            alignment: options.alignment,\r\n            spacing: options.spacing\r\n        });\r\n    }\r\n    Private.createLayout = createLayout;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar layout_1 = require(\"./layout\");\r\nvar panellayout_1 = require(\"./panellayout\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A layout where visible widgets are stacked atop one another.\r\n *\r\n * #### Notes\r\n * The Z-order of the visible widgets follows their layout order.\r\n */\r\nvar StackedLayout = (function (_super) {\r\n    __extends(StackedLayout, _super);\r\n    function StackedLayout() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._dirty = false;\r\n        _this._items = [];\r\n        _this._box = null;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the layout.\r\n     */\r\n    StackedLayout.prototype.dispose = function () {\r\n        // Dispose of the layout items.\r\n        algorithm_1.each(this._items, function (item) { item.dispose(); });\r\n        // Clear the layout state.\r\n        this._box = null;\r\n        this._items.length = 0;\r\n        // Dispose of the rest of the layout.\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param index - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    StackedLayout.prototype.attachWidget = function (index, widget) {\r\n        // Create and add a new layout item for the widget.\r\n        algorithm_1.ArrayExt.insert(this._items, index, new layout_1.LayoutItem(widget));\r\n        // Send a `'before-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeAttach);\r\n        }\r\n        // Add the widget's node to the parent.\r\n        this.parent.node.appendChild(widget.node);\r\n        // Send an `'after-attach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterAttach);\r\n        }\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * Move a widget in the parent's DOM node.\r\n     *\r\n     * @param fromIndex - The previous index of the widget in the layout.\r\n     *\r\n     * @param toIndex - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to move in the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    StackedLayout.prototype.moveWidget = function (fromIndex, toIndex, widget) {\r\n        // Move the layout item for the widget.\r\n        algorithm_1.ArrayExt.move(this._items, fromIndex, toIndex);\r\n        // Post an update request for the parent widget.\r\n        this.parent.update();\r\n    };\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param index - The previous index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    StackedLayout.prototype.detachWidget = function (index, widget) {\r\n        // Remove the layout item for the widget.\r\n        var item = algorithm_1.ArrayExt.removeAt(this._items, index);\r\n        // Send a `'before-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.BeforeDetach);\r\n        }\r\n        // Remove the widget's node from the parent.\r\n        this.parent.node.removeChild(widget.node);\r\n        // Send an `'after-detach'` message if the parent is attached.\r\n        if (this.parent.isAttached) {\r\n            messaging_1.MessageLoop.sendMessage(widget, widget_1.Widget.Msg.AfterDetach);\r\n        }\r\n        // Reset the z-index for the widget.\r\n        item.widget.node.style.zIndex = '';\r\n        // Dispose of the layout item.\r\n        item.dispose();\r\n        // Post a fit request for the parent widget.\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-show'` message.\r\n     */\r\n    StackedLayout.prototype.onBeforeShow = function (msg) {\r\n        _super.prototype.onBeforeShow.call(this, msg);\r\n        this.parent.update();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    StackedLayout.prototype.onBeforeAttach = function (msg) {\r\n        _super.prototype.onBeforeAttach.call(this, msg);\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     */\r\n    StackedLayout.prototype.onChildShown = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     */\r\n    StackedLayout.prototype.onChildHidden = function (msg) {\r\n        this.parent.fit();\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     */\r\n    StackedLayout.prototype.onResize = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(msg.width, msg.height);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    StackedLayout.prototype.onUpdateRequest = function (msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update(-1, -1);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     */\r\n    StackedLayout.prototype.onFitRequest = function (msg) {\r\n        if (this.parent.isAttached) {\r\n            this._fit();\r\n        }\r\n    };\r\n    /**\r\n     * Fit the layout to the total size required by the widgets.\r\n     */\r\n    StackedLayout.prototype._fit = function () {\r\n        // Set up the computed minimum size.\r\n        var minW = 0;\r\n        var minH = 0;\r\n        // Update the computed minimum size.\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            // Fetch the item.\r\n            var item = this._items[i];\r\n            // Ignore hidden items.\r\n            if (item.isHidden) {\r\n                continue;\r\n            }\r\n            // Update the size limits for the item.\r\n            item.fit();\r\n            // Update the computed minimum size.\r\n            minW = Math.max(minW, item.minWidth);\r\n            minH = Math.max(minH, item.minHeight);\r\n        }\r\n        // Update the box sizing and add it to the computed min size.\r\n        var box = this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        minW += box.horizontalSum;\r\n        minH += box.verticalSum;\r\n        // Update the parent's min size constraints.\r\n        var style = this.parent.node.style;\r\n        style.minWidth = minW + \"px\";\r\n        style.minHeight = minH + \"px\";\r\n        // Set the dirty flag to ensure only a single update occurs.\r\n        this._dirty = true;\r\n        // Notify the ancestor that it should fit immediately. This may\r\n        // cause a resize of the parent, fulfilling the required update.\r\n        if (this.parent.parent) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent.parent, widget_1.Widget.Msg.FitRequest);\r\n        }\r\n        // If the dirty flag is still set, the parent was not resized.\r\n        // Trigger the required update on the parent widget immediately.\r\n        if (this._dirty) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widget_1.Widget.Msg.UpdateRequest);\r\n        }\r\n    };\r\n    /**\r\n     * Update the layout position and size of the widgets.\r\n     *\r\n     * The parent offset dimensions should be `-1` if unknown.\r\n     */\r\n    StackedLayout.prototype._update = function (offsetWidth, offsetHeight) {\r\n        // Clear the dirty flag to indicate the update occurred.\r\n        this._dirty = false;\r\n        // Compute the visible item count.\r\n        var nVisible = 0;\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            nVisible += +!this._items[i].isHidden;\r\n        }\r\n        // Bail early if there are no visible items to layout.\r\n        if (nVisible === 0) {\r\n            return;\r\n        }\r\n        // Measure the parent if the offset dimensions are unknown.\r\n        if (offsetWidth < 0) {\r\n            offsetWidth = this.parent.node.offsetWidth;\r\n        }\r\n        if (offsetHeight < 0) {\r\n            offsetHeight = this.parent.node.offsetHeight;\r\n        }\r\n        // Ensure the parent box sizing data is computed.\r\n        if (!this._box) {\r\n            this._box = domutils_1.ElementExt.boxSizing(this.parent.node);\r\n        }\r\n        // Compute the actual layout bounds adjusted for border and padding.\r\n        var top = this._box.paddingTop;\r\n        var left = this._box.paddingLeft;\r\n        var width = offsetWidth - this._box.horizontalSum;\r\n        var height = offsetHeight - this._box.verticalSum;\r\n        // Update the widget stacking order and layout geometry.\r\n        for (var i = 0, n = this._items.length; i < n; ++i) {\r\n            // Fetch the item.\r\n            var item = this._items[i];\r\n            // Ignore hidden items.\r\n            if (item.isHidden) {\r\n                continue;\r\n            }\r\n            // Set the z-index for the widget.\r\n            item.widget.node.style.zIndex = \"\" + i;\r\n            // Update the item geometry.\r\n            item.update(left, top, width, height);\r\n        }\r\n    };\r\n    return StackedLayout;\r\n}(panellayout_1.PanelLayout));\r\nexports.StackedLayout = StackedLayout;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar panel_1 = require(\"./panel\");\r\nvar stackedlayout_1 = require(\"./stackedlayout\");\r\n/**\r\n * A panel where visible widgets are stacked atop one another.\r\n *\r\n * #### Notes\r\n * This class provides a convenience wrapper around a [[StackedLayout]].\r\n */\r\nvar StackedPanel = (function (_super) {\r\n    __extends(StackedPanel, _super);\r\n    /**\r\n     * Construct a new stacked panel.\r\n     *\r\n     * @param options - The options for initializing the panel.\r\n     */\r\n    function StackedPanel(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, { layout: Private.createLayout(options) }) || this;\r\n        _this._widgetRemoved = new signaling_1.Signal(_this);\r\n        _this.addClass('p-StackedPanel');\r\n        return _this;\r\n    }\r\n    Object.defineProperty(StackedPanel.prototype, \"widgetRemoved\", {\r\n        /**\r\n         * A signal emitted when a widget is removed from a stacked panel.\r\n         */\r\n        get: function () {\r\n            return this._widgetRemoved;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * A message handler invoked on a `'child-added'` message.\r\n     */\r\n    StackedPanel.prototype.onChildAdded = function (msg) {\r\n        msg.child.addClass('p-StackedPanel-child');\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     */\r\n    StackedPanel.prototype.onChildRemoved = function (msg) {\r\n        msg.child.removeClass('p-StackedPanel-child');\r\n        this._widgetRemoved.emit(msg.child);\r\n    };\r\n    return StackedPanel;\r\n}(panel_1.Panel));\r\nexports.StackedPanel = StackedPanel;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create a stacked layout for the given panel options.\r\n     */\r\n    function createLayout(options) {\r\n        return options.layout || new stackedlayout_1.StackedLayout();\r\n    }\r\n    Private.createLayout = createLayout;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar dragdrop_1 = require(\"@phosphor/dragdrop\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar virtualdom_1 = require(\"@phosphor/virtualdom\");\r\nvar title_1 = require(\"./title\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A widget which displays titles as a single row or column of tabs.\r\n *\r\n * #### Notes\r\n * If CSS transforms are used to rotate nodes for vertically oriented\r\n * text, then tab dragging will not work correctly. The `tabsMovable`\r\n * property should be set to `false` when rotating nodes from CSS.\r\n */\r\nvar TabBar = (function (_super) {\r\n    __extends(TabBar, _super);\r\n    /**\r\n     * Construct a new tab bar.\r\n     *\r\n     * @param options - The options for initializing the tab bar.\r\n     */\r\n    function TabBar(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, { node: Private.createNode() }) || this;\r\n        _this._currentIndex = -1;\r\n        _this._titles = [];\r\n        _this._previousTitle = null;\r\n        _this._dragData = null;\r\n        _this._tabMoved = new signaling_1.Signal(_this);\r\n        _this._currentChanged = new signaling_1.Signal(_this);\r\n        _this._tabCloseRequested = new signaling_1.Signal(_this);\r\n        _this._tabDetachRequested = new signaling_1.Signal(_this);\r\n        _this._tabActivateRequested = new signaling_1.Signal(_this);\r\n        _this.addClass('p-TabBar');\r\n        _this.setFlag(widget_1.Widget.Flag.DisallowLayout);\r\n        _this.tabsMovable = options.tabsMovable || false;\r\n        _this.allowDeselect = options.allowDeselect || false;\r\n        _this.insertBehavior = options.insertBehavior || 'select-tab-if-needed';\r\n        _this.removeBehavior = options.removeBehavior || 'select-tab-after';\r\n        _this.renderer = options.renderer || TabBar.defaultRenderer;\r\n        _this._orientation = options.orientation || 'horizontal';\r\n        _this.dataset['orientation'] = _this._orientation;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the widget.\r\n     */\r\n    TabBar.prototype.dispose = function () {\r\n        this._releaseMouse();\r\n        this._titles.length = 0;\r\n        this._previousTitle = null;\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(TabBar.prototype, \"currentChanged\", {\r\n        /**\r\n         * A signal emitted when the current tab is changed.\r\n         *\r\n         * #### Notes\r\n         * This signal is emitted when the currently selected tab is changed\r\n         * either through user or programmatic interaction.\r\n         *\r\n         * Notably, this signal is not emitted when the index of the current\r\n         * tab changes due to tabs being inserted, removed, or moved. It is\r\n         * only emitted when the actual current tab node is changed.\r\n         */\r\n        get: function () {\r\n            return this._currentChanged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"tabMoved\", {\r\n        /**\r\n         * A signal emitted when a tab is moved by the user.\r\n         *\r\n         * #### Notes\r\n         * This signal is emitted when a tab is moved by user interaction.\r\n         *\r\n         * This signal is not emitted when a tab is moved programmatically.\r\n         */\r\n        get: function () {\r\n            return this._tabMoved;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"tabActivateRequested\", {\r\n        /**\r\n         * A signal emitted when a tab is clicked by the user.\r\n         *\r\n         * #### Notes\r\n         * If the clicked tab is not the current tab, the clicked tab will be\r\n         * made current and the `currentChanged` signal will be emitted first.\r\n         *\r\n         * This signal is emitted even if the clicked tab is the current tab.\r\n         */\r\n        get: function () {\r\n            return this._tabActivateRequested;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"tabCloseRequested\", {\r\n        /**\r\n         * A signal emitted when a tab close icon is clicked.\r\n         *\r\n         * #### Notes\r\n         * This signal is not emitted unless the tab title is `closable`.\r\n         */\r\n        get: function () {\r\n            return this._tabCloseRequested;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"tabDetachRequested\", {\r\n        /**\r\n         * A signal emitted when a tab is dragged beyond the detach threshold.\r\n         *\r\n         * #### Notes\r\n         * This signal is emitted when the user drags a tab with the mouse,\r\n         * and mouse is dragged beyond the detach threshold.\r\n         *\r\n         * The consumer of the signal should call `releaseMouse` and remove\r\n         * the tab in order to complete the detach.\r\n         *\r\n         * This signal is only emitted once per drag cycle.\r\n         */\r\n        get: function () {\r\n            return this._tabDetachRequested;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"currentTitle\", {\r\n        /**\r\n         * Get the currently selected title.\r\n         *\r\n         * #### Notes\r\n         * This will be `null` if no tab is selected.\r\n         */\r\n        get: function () {\r\n            return this._titles[this._currentIndex] || null;\r\n        },\r\n        /**\r\n         * Set the currently selected title.\r\n         *\r\n         * #### Notes\r\n         * If the title does not exist, the title will be set to `null`.\r\n         */\r\n        set: function (value) {\r\n            this.currentIndex = value ? this._titles.indexOf(value) : -1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"currentIndex\", {\r\n        /**\r\n         * Get the index of the currently selected tab.\r\n         *\r\n         * #### Notes\r\n         * This will be `-1` if no tab is selected.\r\n         */\r\n        get: function () {\r\n            return this._currentIndex;\r\n        },\r\n        /**\r\n         * Set the index of the currently selected tab.\r\n         *\r\n         * #### Notes\r\n         * If the value is out of range, the index will be set to `-1`.\r\n         */\r\n        set: function (value) {\r\n            // Adjust for an out of range index.\r\n            if (value < 0 || value >= this._titles.length) {\r\n                value = -1;\r\n            }\r\n            // Bail early if the index will not change.\r\n            if (this._currentIndex === value) {\r\n                return;\r\n            }\r\n            // Look up the previous index and title.\r\n            var pi = this._currentIndex;\r\n            var pt = this._titles[pi] || null;\r\n            // Look up the current index and title.\r\n            var ci = value;\r\n            var ct = this._titles[ci] || null;\r\n            // Update the current index and previous title.\r\n            this._currentIndex = ci;\r\n            this._previousTitle = pt;\r\n            // Schedule an update of the tabs.\r\n            this.update();\r\n            // Emit the current changed signal.\r\n            this._currentChanged.emit({\r\n                previousIndex: pi, previousTitle: pt,\r\n                currentIndex: ci, currentTitle: ct\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"orientation\", {\r\n        /**\r\n         * Get the orientation of the tab bar.\r\n         *\r\n         * #### Notes\r\n         * This controls whether the tabs are arranged in a row or column.\r\n         */\r\n        get: function () {\r\n            return this._orientation;\r\n        },\r\n        /**\r\n         * Set the orientation of the tab bar.\r\n         *\r\n         * #### Notes\r\n         * This controls whether the tabs are arranged in a row or column.\r\n         */\r\n        set: function (value) {\r\n            // Do nothing if the orientation does not change.\r\n            if (this._orientation === value) {\r\n                return;\r\n            }\r\n            // Release the mouse before making any changes.\r\n            this._releaseMouse();\r\n            // Toggle the orientation values.\r\n            this._orientation = value;\r\n            this.dataset['orientation'] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"titles\", {\r\n        /**\r\n         * A read-only array of the titles in the tab bar.\r\n         */\r\n        get: function () {\r\n            return this._titles;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabBar.prototype, \"contentNode\", {\r\n        /**\r\n         * The tab bar content node.\r\n         *\r\n         * #### Notes\r\n         * This is the node which holds the tab nodes.\r\n         *\r\n         * Modifying this node directly can lead to undefined behavior.\r\n         */\r\n        get: function () {\r\n            return this.node.getElementsByClassName('p-TabBar-content')[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Add a tab to the end of the tab bar.\r\n     *\r\n     * @param value - The title which holds the data for the tab,\r\n     *   or an options object to convert to a title.\r\n     *\r\n     * @returns The title object added to the tab bar.\r\n     *\r\n     * #### Notes\r\n     * If the title is already added to the tab bar, it will be moved.\r\n     */\r\n    TabBar.prototype.addTab = function (value) {\r\n        return this.insertTab(this._titles.length, value);\r\n    };\r\n    /**\r\n     * Insert a tab into the tab bar at the specified index.\r\n     *\r\n     * @param index - The index at which to insert the tab.\r\n     *\r\n     * @param value - The title which holds the data for the tab,\r\n     *   or an options object to convert to a title.\r\n     *\r\n     * @returns The title object added to the tab bar.\r\n     *\r\n     * #### Notes\r\n     * The index will be clamped to the bounds of the tabs.\r\n     *\r\n     * If the title is already added to the tab bar, it will be moved.\r\n     */\r\n    TabBar.prototype.insertTab = function (index, value) {\r\n        // Release the mouse before making any changes.\r\n        this._releaseMouse();\r\n        // Coerce the value to a title.\r\n        var title = Private.asTitle(value);\r\n        // Look up the index of the title.\r\n        var i = this._titles.indexOf(title);\r\n        // Clamp the insert index to the array bounds.\r\n        var j = Math.max(0, Math.min(index, this._titles.length));\r\n        // If the title is not in the array, insert it.\r\n        if (i === -1) {\r\n            // Insert the title into the array.\r\n            algorithm_1.ArrayExt.insert(this._titles, j, title);\r\n            // Connect to the title changed signal.\r\n            title.changed.connect(this._onTitleChanged, this);\r\n            // Schedule an update of the tabs.\r\n            this.update();\r\n            // Adjust the current index for the insert.\r\n            this._adjustCurrentForInsert(j, title);\r\n            // Return the title added to the tab bar.\r\n            return title;\r\n        }\r\n        // Otherwise, the title exists in the array and should be moved.\r\n        // Adjust the index if the location is at the end of the array.\r\n        if (j === this._titles.length) {\r\n            j--;\r\n        }\r\n        // Bail if there is no effective move.\r\n        if (i === j) {\r\n            return title;\r\n        }\r\n        // Move the title to the new location.\r\n        algorithm_1.ArrayExt.move(this._titles, i, j);\r\n        // Schedule an update of the tabs.\r\n        this.update();\r\n        // Adjust the current index for the move.\r\n        this._adjustCurrentForMove(i, j);\r\n        // Return the title added to the tab bar.\r\n        return title;\r\n    };\r\n    /**\r\n     * Remove a tab from the tab bar.\r\n     *\r\n     * @param title - The title for the tab to remove.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the title is not in the tab bar.\r\n     */\r\n    TabBar.prototype.removeTab = function (title) {\r\n        this.removeTabAt(this._titles.indexOf(title));\r\n    };\r\n    /**\r\n     * Remove the tab at a given index from the tab bar.\r\n     *\r\n     * @param index - The index of the tab to remove.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the index is out of range.\r\n     */\r\n    TabBar.prototype.removeTabAt = function (index) {\r\n        // Release the mouse before making any changes.\r\n        this._releaseMouse();\r\n        // Remove the title from the array.\r\n        var title = algorithm_1.ArrayExt.removeAt(this._titles, index);\r\n        // Bail if the index is out of range.\r\n        if (!title) {\r\n            return;\r\n        }\r\n        // Disconnect from the title changed signal.\r\n        title.changed.disconnect(this._onTitleChanged, this);\r\n        // Clear the previous title if it's being removed.\r\n        if (title === this._previousTitle) {\r\n            this._previousTitle = null;\r\n        }\r\n        // Schedule an update of the tabs.\r\n        this.update();\r\n        // Adjust the current index for the remove.\r\n        this._adjustCurrentForRemove(index, title);\r\n    };\r\n    /**\r\n     * Remove all tabs from the tab bar.\r\n     */\r\n    TabBar.prototype.clearTabs = function () {\r\n        // Bail if there is nothing to remove.\r\n        if (this._titles.length === 0) {\r\n            return;\r\n        }\r\n        // Release the mouse before making any changes.\r\n        this._releaseMouse();\r\n        // Disconnect from the title changed signals.\r\n        for (var _i = 0, _a = this._titles; _i < _a.length; _i++) {\r\n            var title = _a[_i];\r\n            title.changed.disconnect(this._onTitleChanged, this);\r\n        }\r\n        // Get the current index and title.\r\n        var pi = this.currentIndex;\r\n        var pt = this.currentTitle;\r\n        // Reset the current index and previous title.\r\n        this._currentIndex = -1;\r\n        this._previousTitle = null;\r\n        // Clear the title array.\r\n        this._titles.length = 0;\r\n        // Schedule an update of the tabs.\r\n        this.update();\r\n        // If no tab was selected, there's nothing else to do.\r\n        if (pi === -1) {\r\n            return;\r\n        }\r\n        // Emit the current changed signal.\r\n        this._currentChanged.emit({\r\n            previousIndex: pi, previousTitle: pt,\r\n            currentIndex: -1, currentTitle: null\r\n        });\r\n    };\r\n    /**\r\n     * Release the mouse and restore the non-dragged tab positions.\r\n     *\r\n     * #### Notes\r\n     * This will cause the tab bar to stop handling mouse events and to\r\n     * restore the tabs to their non-dragged positions.\r\n     */\r\n    TabBar.prototype.releaseMouse = function () {\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * Handle the DOM events for the tab bar.\r\n     *\r\n     * @param event - The DOM event sent to the tab bar.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the tab bar's DOM node.\r\n     *\r\n     * This should not be called directly by user code.\r\n     */\r\n    TabBar.prototype.handleEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'mousedown':\r\n                this._evtMouseDown(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtMouseMove(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtMouseUp(event);\r\n                break;\r\n            case 'keydown':\r\n                this._evtKeyDown(event);\r\n                break;\r\n            case 'contextmenu':\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     */\r\n    TabBar.prototype.onBeforeAttach = function (msg) {\r\n        this.node.addEventListener('mousedown', this);\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     */\r\n    TabBar.prototype.onAfterDetach = function (msg) {\r\n        this.node.removeEventListener('mousedown', this);\r\n        this._releaseMouse();\r\n    };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    TabBar.prototype.onUpdateRequest = function (msg) {\r\n        var titles = this._titles;\r\n        var renderer = this.renderer;\r\n        var currentTitle = this.currentTitle;\r\n        var content = new Array(titles.length);\r\n        for (var i = 0, n = titles.length; i < n; ++i) {\r\n            var title = titles[i];\r\n            var current = title === currentTitle;\r\n            var zIndex = current ? n : n - i - 1;\r\n            content[i] = renderer.renderTab({ title: title, current: current, zIndex: zIndex });\r\n        }\r\n        virtualdom_1.VirtualDOM.render(content, this.contentNode);\r\n    };\r\n    /**\r\n     * Handle the `'keydown'` event for the tab bar.\r\n     */\r\n    TabBar.prototype._evtKeyDown = function (event) {\r\n        // Stop all input events during drag.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Release the mouse if `Escape` is pressed.\r\n        if (event.keyCode === 27) {\r\n            this._releaseMouse();\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `'mousedown'` event for the tab bar.\r\n     */\r\n    TabBar.prototype._evtMouseDown = function (event) {\r\n        // Do nothing if it's not a left or middle mouse press.\r\n        if (event.button !== 0 && event.button !== 1) {\r\n            return;\r\n        }\r\n        // Do nothing if a drag is in progress.\r\n        if (this._dragData) {\r\n            return;\r\n        }\r\n        // Lookup the tab nodes.\r\n        var tabs = this.contentNode.children;\r\n        // Find the index of the pressed tab.\r\n        var index = algorithm_1.ArrayExt.findFirstIndex(tabs, function (tab) {\r\n            return domutils_1.ElementExt.hitTest(tab, event.clientX, event.clientY);\r\n        });\r\n        // Do nothing if the press is not on a tab.\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        // Pressing on a tab stops the event propagation.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Initialize the non-measured parts of the drag data.\r\n        this._dragData = {\r\n            tab: tabs[index],\r\n            index: index,\r\n            pressX: event.clientX,\r\n            pressY: event.clientY,\r\n            tabPos: -1,\r\n            tabSize: -1,\r\n            tabPressPos: -1,\r\n            targetIndex: -1,\r\n            tabLayout: null,\r\n            contentRect: null,\r\n            override: null,\r\n            dragActive: false,\r\n            dragAborted: false,\r\n            detachRequested: false\r\n        };\r\n        // Add the document mouse up listener.\r\n        document.addEventListener('mouseup', this, true);\r\n        // Do nothing else if the middle button is clicked.\r\n        if (event.button === 1) {\r\n            return;\r\n        }\r\n        // Do nothing else if the close icon is clicked.\r\n        var icon = tabs[index].querySelector(this.renderer.closeIconSelector);\r\n        if (icon && icon.contains(event.target)) {\r\n            return;\r\n        }\r\n        // Add the extra listeners if the tabs are movable.\r\n        if (this.tabsMovable) {\r\n            document.addEventListener('mousemove', this, true);\r\n            document.addEventListener('keydown', this, true);\r\n            document.addEventListener('contextmenu', this, true);\r\n        }\r\n        // Update the current index as appropriate.\r\n        if (this.allowDeselect && this.currentIndex === index) {\r\n            this.currentIndex = -1;\r\n        }\r\n        else {\r\n            this.currentIndex = index;\r\n        }\r\n        // Do nothing else if there is no current tab.\r\n        if (this.currentIndex === -1) {\r\n            return;\r\n        }\r\n        // Emit the tab activate request signal.\r\n        this._tabActivateRequested.emit({\r\n            index: this.currentIndex, title: this.currentTitle\r\n        });\r\n    };\r\n    /**\r\n     * Handle the `'mousemove'` event for the tab bar.\r\n     */\r\n    TabBar.prototype._evtMouseMove = function (event) {\r\n        // Do nothing if no drag is in progress.\r\n        var data = this._dragData;\r\n        if (!data) {\r\n            return;\r\n        }\r\n        // Suppress the event during a drag.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Lookup the tab nodes.\r\n        var tabs = this.contentNode.children;\r\n        // Bail early if the drag threshold has not been met.\r\n        if (!data.dragActive && !Private.dragExceeded(data, event)) {\r\n            return;\r\n        }\r\n        // Activate the drag if necessary.\r\n        if (!data.dragActive) {\r\n            // Fill in the rest of the drag data measurements.\r\n            var tabRect = data.tab.getBoundingClientRect();\r\n            if (this._orientation === 'horizontal') {\r\n                data.tabPos = data.tab.offsetLeft;\r\n                data.tabSize = tabRect.width;\r\n                data.tabPressPos = data.pressX - tabRect.left;\r\n            }\r\n            else {\r\n                data.tabPos = data.tab.offsetTop;\r\n                data.tabSize = tabRect.height;\r\n                data.tabPressPos = data.pressY - tabRect.top;\r\n            }\r\n            data.tabLayout = Private.snapTabLayout(tabs, this._orientation);\r\n            data.contentRect = this.contentNode.getBoundingClientRect();\r\n            data.override = dragdrop_1.Drag.overrideCursor('default');\r\n            // Add the dragging style classes.\r\n            data.tab.classList.add('p-mod-dragging');\r\n            this.addClass('p-mod-dragging');\r\n            // Mark the drag as active.\r\n            data.dragActive = true;\r\n        }\r\n        // Emit the detach requested signal if the threshold is exceeded.\r\n        if (!data.detachRequested && Private.detachExceeded(data, event)) {\r\n            // Only emit the signal once per drag cycle.\r\n            data.detachRequested = true;\r\n            // Setup the arguments for the signal.\r\n            var index = data.index;\r\n            var clientX = event.clientX;\r\n            var clientY = event.clientY;\r\n            var tab = tabs[index];\r\n            var title = this._titles[index];\r\n            // Emit the tab detach requested signal.\r\n            this._tabDetachRequested.emit({ index: index, title: title, tab: tab, clientX: clientX, clientY: clientY });\r\n            // Bail if the signal handler aborted the drag.\r\n            if (data.dragAborted) {\r\n                return;\r\n            }\r\n        }\r\n        // Update the positions of the tabs.\r\n        Private.layoutTabs(tabs, data, event, this._orientation);\r\n    };\r\n    /**\r\n     * Handle the `'mouseup'` event for the document.\r\n     */\r\n    TabBar.prototype._evtMouseUp = function (event) {\r\n        var _this = this;\r\n        // Do nothing if it's not a left or middle mouse release.\r\n        if (event.button !== 0 && event.button !== 1) {\r\n            return;\r\n        }\r\n        // Do nothing if no drag is in progress.\r\n        var data = this._dragData;\r\n        if (!data) {\r\n            return;\r\n        }\r\n        // Stop the event propagation.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Remove the extra mouse event listeners.\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n        document.removeEventListener('keydown', this, true);\r\n        document.removeEventListener('contextmenu', this, true);\r\n        // Handle a release when the drag is not active.\r\n        if (!data.dragActive) {\r\n            // Clear the drag data.\r\n            this._dragData = null;\r\n            // Lookup the tab nodes.\r\n            var tabs = this.contentNode.children;\r\n            // Find the index of the released tab.\r\n            var index = algorithm_1.ArrayExt.findFirstIndex(tabs, function (tab) {\r\n                return domutils_1.ElementExt.hitTest(tab, event.clientX, event.clientY);\r\n            });\r\n            // Do nothing if the release is not on the original pressed tab.\r\n            if (index !== data.index) {\r\n                return;\r\n            }\r\n            // Ignore the release if the title is not closable.\r\n            var title = this._titles[index];\r\n            if (!title.closable) {\r\n                return;\r\n            }\r\n            // Emit the close requested signal if the middle button is released.\r\n            if (event.button === 1) {\r\n                this._tabCloseRequested.emit({ index: index, title: title });\r\n                return;\r\n            }\r\n            // Emit the close requested signal if the close icon was released.\r\n            var icon = tabs[index].querySelector(this.renderer.closeIconSelector);\r\n            if (icon && icon.contains(event.target)) {\r\n                this._tabCloseRequested.emit({ index: index, title: title });\r\n                return;\r\n            }\r\n            // Otherwise, there is nothing left to do.\r\n            return;\r\n        }\r\n        // Do nothing if the left button is not released.\r\n        if (event.button !== 0) {\r\n            return;\r\n        }\r\n        // Position the tab at its final resting position.\r\n        Private.finalizeTabPosition(data, this._orientation);\r\n        // Remove the dragging class from the tab so it can be transitioned.\r\n        data.tab.classList.remove('p-mod-dragging');\r\n        // Parse the transition duration for releasing the tab.\r\n        var duration = Private.parseTransitionDuration(data.tab);\r\n        // Complete the release on a timer to allow the tab to transition.\r\n        setTimeout(function () {\r\n            // Do nothing if the drag has been aborted.\r\n            if (data.dragAborted) {\r\n                return;\r\n            }\r\n            // Clear the drag data reference.\r\n            _this._dragData = null;\r\n            // Reset the positions of the tabs.\r\n            Private.resetTabPositions(_this.contentNode.children, _this._orientation);\r\n            // Clear the cursor grab.\r\n            data.override.dispose();\r\n            // Remove the remaining dragging style.\r\n            _this.removeClass('p-mod-dragging');\r\n            // If the tab was not moved, there is nothing else to do.\r\n            var i = data.index;\r\n            var j = data.targetIndex;\r\n            if (j === -1 || i === j) {\r\n                return;\r\n            }\r\n            // Move the title to the new locations.\r\n            algorithm_1.ArrayExt.move(_this._titles, i, j);\r\n            // Adjust the current index for the move.\r\n            _this._adjustCurrentForMove(i, j);\r\n            // Emit the tab moved signal.\r\n            _this._tabMoved.emit({\r\n                fromIndex: i, toIndex: j, title: _this._titles[j]\r\n            });\r\n            // Update the tabs immediately to prevent flicker.\r\n            messaging_1.MessageLoop.sendMessage(_this, widget_1.Widget.Msg.UpdateRequest);\r\n        }, duration);\r\n    };\r\n    /**\r\n     * Release the mouse and restore the non-dragged tab positions.\r\n     */\r\n    TabBar.prototype._releaseMouse = function () {\r\n        // Do nothing if no drag is in progress.\r\n        var data = this._dragData;\r\n        if (!data) {\r\n            return;\r\n        }\r\n        // Clear the drag data reference.\r\n        this._dragData = null;\r\n        // Remove the extra mouse listeners.\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n        document.removeEventListener('keydown', this, true);\r\n        document.removeEventListener('contextmenu', this, true);\r\n        // Indicate the drag has been aborted. This allows the mouse\r\n        // event handlers to return early when the drag is canceled.\r\n        data.dragAborted = true;\r\n        // If the drag is not active, there's nothing more to do.\r\n        if (!data.dragActive) {\r\n            return;\r\n        }\r\n        // Reset the tabs to their non-dragged positions.\r\n        Private.resetTabPositions(this.contentNode.children, this._orientation);\r\n        // Clear the cursor override.\r\n        data.override.dispose();\r\n        // Clear the dragging style classes.\r\n        data.tab.classList.remove('p-mod-dragging');\r\n        this.removeClass('p-mod-dragging');\r\n    };\r\n    /**\r\n     * Adjust the current index for a tab insert operation.\r\n     *\r\n     * This method accounts for the tab bar's insertion behavior when\r\n     * adjusting the current index and emitting the changed signal.\r\n     */\r\n    TabBar.prototype._adjustCurrentForInsert = function (i, title) {\r\n        // Lookup commonly used variables.\r\n        var ct = this.currentTitle;\r\n        var ci = this._currentIndex;\r\n        var bh = this.insertBehavior;\r\n        // Handle the behavior where the new tab is always selected,\r\n        // or the behavior where the new tab is selected if needed.\r\n        if (bh === 'select-tab' || (bh === 'select-tab-if-needed' && ci === -1)) {\r\n            this._currentIndex = i;\r\n            this._previousTitle = ct;\r\n            this._currentChanged.emit({\r\n                previousIndex: ci, previousTitle: ct,\r\n                currentIndex: i, currentTitle: title\r\n            });\r\n            return;\r\n        }\r\n        // Otherwise, silently adjust the current index if needed.\r\n        if (ci >= i) {\r\n            this._currentIndex++;\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the current index for a tab move operation.\r\n     *\r\n     * This method will not cause the actual current tab to change.\r\n     * It silently adjusts the index to account for the given move.\r\n     */\r\n    TabBar.prototype._adjustCurrentForMove = function (i, j) {\r\n        if (this._currentIndex === i) {\r\n            this._currentIndex = j;\r\n        }\r\n        else if (this._currentIndex < i && this._currentIndex >= j) {\r\n            this._currentIndex++;\r\n        }\r\n        else if (this._currentIndex > i && this._currentIndex <= j) {\r\n            this._currentIndex--;\r\n        }\r\n    };\r\n    /**\r\n     * Adjust the current index for a tab remove operation.\r\n     *\r\n     * This method accounts for the tab bar's remove behavior when\r\n     * adjusting the current index and emitting the changed signal.\r\n     */\r\n    TabBar.prototype._adjustCurrentForRemove = function (i, title) {\r\n        // Lookup commonly used variables.\r\n        var ci = this._currentIndex;\r\n        var bh = this.removeBehavior;\r\n        // Silently adjust the index if the current tab is not removed.\r\n        if (ci !== i) {\r\n            if (ci > i) {\r\n                this._currentIndex--;\r\n            }\r\n            return;\r\n        }\r\n        // No tab gets selected if the tab bar is empty.\r\n        if (this._titles.length === 0) {\r\n            this._currentIndex = -1;\r\n            this._currentChanged.emit({\r\n                previousIndex: i, previousTitle: title,\r\n                currentIndex: -1, currentTitle: null\r\n            });\r\n            return;\r\n        }\r\n        // Handle behavior where the next sibling tab is selected.\r\n        if (bh === 'select-tab-after') {\r\n            this._currentIndex = Math.min(i, this._titles.length - 1);\r\n            this._currentChanged.emit({\r\n                previousIndex: i, previousTitle: title,\r\n                currentIndex: this._currentIndex, currentTitle: this.currentTitle\r\n            });\r\n            return;\r\n        }\r\n        // Handle behavior where the previous sibling tab is selected.\r\n        if (bh === 'select-tab-before') {\r\n            this._currentIndex = Math.max(0, i - 1);\r\n            this._currentChanged.emit({\r\n                previousIndex: i, previousTitle: title,\r\n                currentIndex: this._currentIndex, currentTitle: this.currentTitle\r\n            });\r\n            return;\r\n        }\r\n        // Handle behavior where the previous history tab is selected.\r\n        if (bh === 'select-previous-tab') {\r\n            if (this._previousTitle) {\r\n                this._currentIndex = this._titles.indexOf(this._previousTitle);\r\n                this._previousTitle = null;\r\n            }\r\n            else {\r\n                this._currentIndex = Math.min(i, this._titles.length - 1);\r\n            }\r\n            this._currentChanged.emit({\r\n                previousIndex: i, previousTitle: title,\r\n                currentIndex: this._currentIndex, currentTitle: this.currentTitle\r\n            });\r\n            return;\r\n        }\r\n        // Otherwise, no tab gets selected.\r\n        this._currentIndex = -1;\r\n        this._currentChanged.emit({\r\n            previousIndex: i, previousTitle: title,\r\n            currentIndex: -1, currentTitle: null\r\n        });\r\n    };\r\n    /**\r\n     * Handle the `changed` signal of a title object.\r\n     */\r\n    TabBar.prototype._onTitleChanged = function (sender) {\r\n        this.update();\r\n    };\r\n    return TabBar;\r\n}(widget_1.Widget));\r\nexports.TabBar = TabBar;\r\n/**\r\n * The namespace for the `TabBar` class statics.\r\n */\r\n(function (TabBar) {\r\n    /**\r\n     * The default implementation of `IRenderer`.\r\n     *\r\n     * #### Notes\r\n     * Subclasses are free to reimplement rendering methods as needed.\r\n     */\r\n    var Renderer = (function () {\r\n        /**\r\n         * Construct a new renderer.\r\n         */\r\n        function Renderer() {\r\n            /**\r\n             * A selector which matches the close icon node in a tab.\r\n             */\r\n            this.closeIconSelector = '.p-TabBar-tabCloseIcon';\r\n            this._tabID = 0;\r\n            this._tabKeys = new WeakMap();\r\n        }\r\n        /**\r\n         * Render the virtual element for a tab.\r\n         *\r\n         * @param data - The data to use for rendering the tab.\r\n         *\r\n         * @returns A virtual element representing the tab.\r\n         */\r\n        Renderer.prototype.renderTab = function (data) {\r\n            var title = data.title.caption;\r\n            var key = this.createTabKey(data);\r\n            var style = this.createTabStyle(data);\r\n            var className = this.createTabClass(data);\r\n            var dataset = this.createTabDataset(data);\r\n            return (virtualdom_1.h.li({ key: key, className: className, title: title, style: style, dataset: dataset }, this.renderIcon(data), this.renderLabel(data), this.renderCloseIcon(data)));\r\n        };\r\n        /**\r\n         * Render the icon element for a tab.\r\n         *\r\n         * @param data - The data to use for rendering the tab.\r\n         *\r\n         * @returns A virtual element representing the tab icon.\r\n         */\r\n        Renderer.prototype.renderIcon = function (data) {\r\n            var className = this.createIconClass(data);\r\n            return virtualdom_1.h.div({ className: className }, data.title.iconLabel);\r\n        };\r\n        /**\r\n         * Render the label element for a tab.\r\n         *\r\n         * @param data - The data to use for rendering the tab.\r\n         *\r\n         * @returns A virtual element representing the tab label.\r\n         */\r\n        Renderer.prototype.renderLabel = function (data) {\r\n            return virtualdom_1.h.div({ className: 'p-TabBar-tabLabel' }, data.title.label);\r\n        };\r\n        /**\r\n         * Render the close icon element for a tab.\r\n         *\r\n         * @param data - The data to use for rendering the tab.\r\n         *\r\n         * @returns A virtual element representing the tab close icon.\r\n         */\r\n        Renderer.prototype.renderCloseIcon = function (data) {\r\n            return virtualdom_1.h.div({ className: 'p-TabBar-tabCloseIcon' });\r\n        };\r\n        /**\r\n         * Create a unique render key for the tab.\r\n         *\r\n         * @param data - The data to use for the tab.\r\n         *\r\n         * @returns The unique render key for the tab.\r\n         *\r\n         * #### Notes\r\n         * This method caches the key against the tab title the first time\r\n         * the key is generated. This enables efficient rendering of moved\r\n         * tabs and avoids subtle hover style artifacts.\r\n         */\r\n        Renderer.prototype.createTabKey = function (data) {\r\n            var key = this._tabKeys.get(data.title);\r\n            if (key === undefined) {\r\n                key = \"tab-key-\" + this._tabID++;\r\n                this._tabKeys.set(data.title, key);\r\n            }\r\n            return key;\r\n        };\r\n        /**\r\n         * Create the inline style object for a tab.\r\n         *\r\n         * @param data - The data to use for the tab.\r\n         *\r\n         * @returns The inline style data for the tab.\r\n         */\r\n        Renderer.prototype.createTabStyle = function (data) {\r\n            return { zIndex: \"\" + data.zIndex };\r\n        };\r\n        /**\r\n         * Create the class name for the tab.\r\n         *\r\n         * @param data - The data to use for the tab.\r\n         *\r\n         * @returns The full class name for the tab.\r\n         */\r\n        Renderer.prototype.createTabClass = function (data) {\r\n            var name = 'p-TabBar-tab';\r\n            if (data.title.className) {\r\n                name += \" \" + data.title.className;\r\n            }\r\n            if (data.title.closable) {\r\n                name += ' p-mod-closable';\r\n            }\r\n            if (data.current) {\r\n                name += ' p-mod-current';\r\n            }\r\n            return name;\r\n        };\r\n        /**\r\n         * Create the dataset for a tab.\r\n         *\r\n         * @param data - The data to use for the tab.\r\n         *\r\n         * @returns The dataset for the tab.\r\n         */\r\n        Renderer.prototype.createTabDataset = function (data) {\r\n            return data.title.dataset;\r\n        };\r\n        /**\r\n         * Create the class name for the tab icon.\r\n         *\r\n         * @param data - The data to use for the tab.\r\n         *\r\n         * @returns The full class name for the tab icon.\r\n         */\r\n        Renderer.prototype.createIconClass = function (data) {\r\n            var name = 'p-TabBar-tabIcon';\r\n            var extra = data.title.iconClass;\r\n            return extra ? name + \" \" + extra : name;\r\n        };\r\n        return Renderer;\r\n    }());\r\n    TabBar.Renderer = Renderer;\r\n    /**\r\n     * The default `Renderer` instance.\r\n     */\r\n    TabBar.defaultRenderer = new Renderer();\r\n})(TabBar = exports.TabBar || (exports.TabBar = {}));\r\nexports.TabBar = TabBar;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * The start drag distance threshold.\r\n     */\r\n    Private.DRAG_THRESHOLD = 5;\r\n    /**\r\n     * The detach distance threshold.\r\n     */\r\n    Private.DETACH_THRESHOLD = 20;\r\n    /**\r\n     * Create the DOM node for a tab bar.\r\n     */\r\n    function createNode() {\r\n        var node = document.createElement('div');\r\n        var content = document.createElement('ul');\r\n        content.className = 'p-TabBar-content';\r\n        node.appendChild(content);\r\n        return node;\r\n    }\r\n    Private.createNode = createNode;\r\n    /**\r\n     * Coerce a title or options into a real title.\r\n     */\r\n    function asTitle(value) {\r\n        return value instanceof title_1.Title ? value : new title_1.Title(value);\r\n    }\r\n    Private.asTitle = asTitle;\r\n    /**\r\n     * Parse the transition duration for a tab node.\r\n     */\r\n    function parseTransitionDuration(tab) {\r\n        var style = window.getComputedStyle(tab);\r\n        return 1000 * (parseFloat(style.transitionDuration) || 0);\r\n    }\r\n    Private.parseTransitionDuration = parseTransitionDuration;\r\n    /**\r\n     * Get a snapshot of the current tab layout values.\r\n     */\r\n    function snapTabLayout(tabs, orientation) {\r\n        var layout = new Array(tabs.length);\r\n        for (var i = 0, n = tabs.length; i < n; ++i) {\r\n            var node = tabs[i];\r\n            var style = window.getComputedStyle(node);\r\n            if (orientation === 'horizontal') {\r\n                layout[i] = {\r\n                    pos: node.offsetLeft,\r\n                    size: node.offsetWidth,\r\n                    margin: parseFloat(style.marginLeft) || 0\r\n                };\r\n            }\r\n            else {\r\n                layout[i] = {\r\n                    pos: node.offsetTop,\r\n                    size: node.offsetHeight,\r\n                    margin: parseFloat(style.marginTop) || 0\r\n                };\r\n            }\r\n        }\r\n        return layout;\r\n    }\r\n    Private.snapTabLayout = snapTabLayout;\r\n    /**\r\n     * Test if the event exceeds the drag threshold.\r\n     */\r\n    function dragExceeded(data, event) {\r\n        var dx = Math.abs(event.clientX - data.pressX);\r\n        var dy = Math.abs(event.clientY - data.pressY);\r\n        return dx >= Private.DRAG_THRESHOLD || dy >= Private.DRAG_THRESHOLD;\r\n    }\r\n    Private.dragExceeded = dragExceeded;\r\n    /**\r\n     * Test if the event exceeds the drag detach threshold.\r\n     */\r\n    function detachExceeded(data, event) {\r\n        var rect = data.contentRect;\r\n        return ((event.clientX < rect.left - Private.DETACH_THRESHOLD) ||\r\n            (event.clientX >= rect.right + Private.DETACH_THRESHOLD) ||\r\n            (event.clientY < rect.top - Private.DETACH_THRESHOLD) ||\r\n            (event.clientY >= rect.bottom + Private.DETACH_THRESHOLD));\r\n    }\r\n    Private.detachExceeded = detachExceeded;\r\n    /**\r\n     * Update the relative tab positions and computed target index.\r\n     */\r\n    function layoutTabs(tabs, data, event, orientation) {\r\n        // Compute the orientation-sensitive values.\r\n        var pressPos;\r\n        var localPos;\r\n        var clientPos;\r\n        var clientSize;\r\n        if (orientation === 'horizontal') {\r\n            pressPos = data.pressX;\r\n            localPos = event.clientX - data.contentRect.left;\r\n            clientPos = event.clientX;\r\n            clientSize = data.contentRect.width;\r\n        }\r\n        else {\r\n            pressPos = data.pressY;\r\n            localPos = event.clientY - data.contentRect.top;\r\n            clientPos = event.clientY;\r\n            clientSize = data.contentRect.height;\r\n        }\r\n        // Compute the target data.\r\n        var targetIndex = data.index;\r\n        var targetPos = localPos - data.tabPressPos;\r\n        var targetEnd = targetPos + data.tabSize;\r\n        // Update the relative tab positions.\r\n        for (var i = 0, n = tabs.length; i < n; ++i) {\r\n            var pxPos = void 0;\r\n            var layout = data.tabLayout[i];\r\n            var threshold = layout.pos + (layout.size >> 1);\r\n            if (i < data.index && targetPos < threshold) {\r\n                pxPos = data.tabSize + data.tabLayout[i + 1].margin + \"px\";\r\n                targetIndex = Math.min(targetIndex, i);\r\n            }\r\n            else if (i > data.index && targetEnd > threshold) {\r\n                pxPos = -data.tabSize - layout.margin + \"px\";\r\n                targetIndex = Math.max(targetIndex, i);\r\n            }\r\n            else if (i === data.index) {\r\n                var ideal = clientPos - pressPos;\r\n                var limit = clientSize - (data.tabPos + data.tabSize);\r\n                pxPos = Math.max(-data.tabPos, Math.min(ideal, limit)) + \"px\";\r\n            }\r\n            else {\r\n                pxPos = '';\r\n            }\r\n            if (orientation === 'horizontal') {\r\n                tabs[i].style.left = pxPos;\r\n            }\r\n            else {\r\n                tabs[i].style.top = pxPos;\r\n            }\r\n        }\r\n        // Update the computed target index.\r\n        data.targetIndex = targetIndex;\r\n    }\r\n    Private.layoutTabs = layoutTabs;\r\n    /**\r\n     * Position the drag tab at its final resting relative position.\r\n     */\r\n    function finalizeTabPosition(data, orientation) {\r\n        // Compute the orientation-sensitive client size.\r\n        var clientSize;\r\n        if (orientation === 'horizontal') {\r\n            clientSize = data.contentRect.width;\r\n        }\r\n        else {\r\n            clientSize = data.contentRect.height;\r\n        }\r\n        // Compute the ideal final tab position.\r\n        var ideal;\r\n        if (data.targetIndex === data.index) {\r\n            ideal = 0;\r\n        }\r\n        else if (data.targetIndex > data.index) {\r\n            var tgt = data.tabLayout[data.targetIndex];\r\n            ideal = tgt.pos + tgt.size - data.tabSize - data.tabPos;\r\n        }\r\n        else {\r\n            var tgt = data.tabLayout[data.targetIndex];\r\n            ideal = tgt.pos - data.tabPos;\r\n        }\r\n        // Compute the tab position limit.\r\n        var limit = clientSize - (data.tabPos + data.tabSize);\r\n        var final = Math.max(-data.tabPos, Math.min(ideal, limit));\r\n        // Set the final orientation-sensitive position.\r\n        if (orientation === 'horizontal') {\r\n            data.tab.style.left = final + \"px\";\r\n        }\r\n        else {\r\n            data.tab.style.top = final + \"px\";\r\n        }\r\n    }\r\n    Private.finalizeTabPosition = finalizeTabPosition;\r\n    /**\r\n     * Reset the relative positions of the given tabs.\r\n     */\r\n    function resetTabPositions(tabs, orientation) {\r\n        algorithm_1.each(tabs, function (tab) {\r\n            if (orientation === 'horizontal') {\r\n                tab.style.left = '';\r\n            }\r\n            else {\r\n                tab.style.top = '';\r\n            }\r\n        });\r\n    }\r\n    Private.resetTabPositions = resetTabPositions;\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar domutils_1 = require(\"@phosphor/domutils\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar boxlayout_1 = require(\"./boxlayout\");\r\nvar stackedpanel_1 = require(\"./stackedpanel\");\r\nvar tabbar_1 = require(\"./tabbar\");\r\nvar widget_1 = require(\"./widget\");\r\n/**\r\n * A widget which combines a `TabBar` and a `StackedPanel`.\r\n *\r\n * #### Notes\r\n * This is a simple panel which handles the common case of a tab bar\r\n * placed next to a content area. The selected tab controls the widget\r\n * which is shown in the content area.\r\n *\r\n * For use cases which require more control than is provided by this\r\n * panel, the `TabBar` widget may be used independently.\r\n */\r\nvar TabPanel = (function (_super) {\r\n    __extends(TabPanel, _super);\r\n    /**\r\n     * Construct a new tab panel.\r\n     *\r\n     * @param options - The options for initializing the tab panel.\r\n     */\r\n    function TabPanel(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this._currentChanged = new signaling_1.Signal(_this);\r\n        _this.addClass('p-TabPanel');\r\n        // Create the tab bar and stacked panel.\r\n        _this.tabBar = new tabbar_1.TabBar(options);\r\n        _this.tabBar.addClass('p-TabPanel-tabBar');\r\n        _this.stackedPanel = new stackedpanel_1.StackedPanel();\r\n        _this.stackedPanel.addClass('p-TabPanel-stackedPanel');\r\n        // Connect the tab bar signal handlers.\r\n        _this.tabBar.tabMoved.connect(_this._onTabMoved, _this);\r\n        _this.tabBar.currentChanged.connect(_this._onCurrentChanged, _this);\r\n        _this.tabBar.tabCloseRequested.connect(_this._onTabCloseRequested, _this);\r\n        _this.tabBar.tabActivateRequested.connect(_this._onTabActivateRequested, _this);\r\n        // Connect the stacked panel signal handlers.\r\n        _this.stackedPanel.widgetRemoved.connect(_this._onWidgetRemoved, _this);\r\n        // Get the data related to the placement.\r\n        _this._tabPlacement = options.tabPlacement || 'top';\r\n        var direction = Private.directionFromPlacement(_this._tabPlacement);\r\n        var orientation = Private.orientationFromPlacement(_this._tabPlacement);\r\n        // Configure the tab bar for the placement.\r\n        _this.tabBar.orientation = orientation;\r\n        _this.tabBar.dataset['placement'] = _this._tabPlacement;\r\n        // Create the box layout.\r\n        var layout = new boxlayout_1.BoxLayout({ direction: direction, spacing: 0 });\r\n        // Set the stretch factors for the child widgets.\r\n        boxlayout_1.BoxLayout.setStretch(_this.tabBar, 0);\r\n        boxlayout_1.BoxLayout.setStretch(_this.stackedPanel, 1);\r\n        // Add the child widgets to the layout.\r\n        layout.addWidget(_this.tabBar);\r\n        layout.addWidget(_this.stackedPanel);\r\n        // Install the layout on the tab panel.\r\n        _this.layout = layout;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TabPanel.prototype, \"currentChanged\", {\r\n        /**\r\n         * A signal emitted when the current tab is changed.\r\n         *\r\n         * #### Notes\r\n         * This signal is emitted when the currently selected tab is changed\r\n         * either through user or programmatic interaction.\r\n         *\r\n         * Notably, this signal is not emitted when the index of the current\r\n         * tab changes due to tabs being inserted, removed, or moved. It is\r\n         * only emitted when the actual current tab node is changed.\r\n         */\r\n        get: function () {\r\n            return this._currentChanged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabPanel.prototype, \"currentIndex\", {\r\n        /**\r\n         * Get the index of the currently selected tab.\r\n         *\r\n         * #### Notes\r\n         * This will be `-1` if no tab is selected.\r\n         */\r\n        get: function () {\r\n            return this.tabBar.currentIndex;\r\n        },\r\n        /**\r\n         * Set the index of the currently selected tab.\r\n         *\r\n         * #### Notes\r\n         * If the index is out of range, it will be set to `-1`.\r\n         */\r\n        set: function (value) {\r\n            this.tabBar.currentIndex = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabPanel.prototype, \"currentWidget\", {\r\n        /**\r\n         * Get the currently selected widget.\r\n         *\r\n         * #### Notes\r\n         * This will be `null` if there is no selected tab.\r\n         */\r\n        get: function () {\r\n            var title = this.tabBar.currentTitle;\r\n            return title ? title.owner : null;\r\n        },\r\n        /**\r\n         * Set the currently selected widget.\r\n         *\r\n         * #### Notes\r\n         * If the widget is not in the panel, it will be set to `null`.\r\n         */\r\n        set: function (value) {\r\n            this.tabBar.currentTitle = value ? value.title : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabPanel.prototype, \"tabsMovable\", {\r\n        /**\r\n         * Get the whether the tabs are movable by the user.\r\n         *\r\n         * #### Notes\r\n         * Tabs can always be moved programmatically.\r\n         */\r\n        get: function () {\r\n            return this.tabBar.tabsMovable;\r\n        },\r\n        /**\r\n         * Set the whether the tabs are movable by the user.\r\n         *\r\n         * #### Notes\r\n         * Tabs can always be moved programmatically.\r\n         */\r\n        set: function (value) {\r\n            this.tabBar.tabsMovable = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabPanel.prototype, \"tabPlacement\", {\r\n        /**\r\n         * Get the tab placement for the tab panel.\r\n         *\r\n         * #### Notes\r\n         * This controls the position of the tab bar relative to the content.\r\n         */\r\n        get: function () {\r\n            return this._tabPlacement;\r\n        },\r\n        /**\r\n         * Set the tab placement for the tab panel.\r\n         *\r\n         * #### Notes\r\n         * This controls the position of the tab bar relative to the content.\r\n         */\r\n        set: function (value) {\r\n            // Bail if the placement does not change.\r\n            if (this._tabPlacement === value) {\r\n                return;\r\n            }\r\n            // Update the internal value.\r\n            this._tabPlacement = value;\r\n            // Get the values related to the placement.\r\n            var direction = Private.directionFromPlacement(value);\r\n            var orientation = Private.orientationFromPlacement(value);\r\n            // Configure the tab bar for the placement.\r\n            this.tabBar.orientation = orientation;\r\n            this.tabBar.dataset['placement'] = value;\r\n            // Update the layout direction.\r\n            this.layout.direction = direction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TabPanel.prototype, \"widgets\", {\r\n        /**\r\n         * A read-only array of the widgets in the panel.\r\n         */\r\n        get: function () {\r\n            return this.stackedPanel.widgets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Add a widget to the end of the tab panel.\r\n     *\r\n     * @param widget - The widget to add to the tab panel.\r\n     *\r\n     * #### Notes\r\n     * If the widget is already contained in the panel, it will be moved.\r\n     *\r\n     * The widget's `title` is used to populate the tab.\r\n     */\r\n    TabPanel.prototype.addWidget = function (widget) {\r\n        this.insertWidget(this.widgets.length, widget);\r\n    };\r\n    /**\r\n     * Insert a widget into the tab panel at a specified index.\r\n     *\r\n     * @param index - The index at which to insert the widget.\r\n     *\r\n     * @param widget - The widget to insert into to the tab panel.\r\n     *\r\n     * #### Notes\r\n     * If the widget is already contained in the panel, it will be moved.\r\n     *\r\n     * The widget's `title` is used to populate the tab.\r\n     */\r\n    TabPanel.prototype.insertWidget = function (index, widget) {\r\n        if (widget !== this.currentWidget) {\r\n            widget.hide();\r\n        }\r\n        this.stackedPanel.insertWidget(index, widget);\r\n        this.tabBar.insertTab(index, widget.title);\r\n    };\r\n    /**\r\n     * Handle the `currentChanged` signal from the tab bar.\r\n     */\r\n    TabPanel.prototype._onCurrentChanged = function (sender, args) {\r\n        // Extract the previous and current title from the args.\r\n        var previousIndex = args.previousIndex, previousTitle = args.previousTitle, currentIndex = args.currentIndex, currentTitle = args.currentTitle;\r\n        // Extract the widgets from the titles.\r\n        var previousWidget = previousTitle ? previousTitle.owner : null;\r\n        var currentWidget = currentTitle ? currentTitle.owner : null;\r\n        // Hide the previous widget.\r\n        if (previousWidget) {\r\n            previousWidget.hide();\r\n        }\r\n        // Show the current widget.\r\n        if (currentWidget) {\r\n            currentWidget.show();\r\n        }\r\n        // Emit the `currentChanged` signal for the tab panel.\r\n        this._currentChanged.emit({\r\n            previousIndex: previousIndex, previousWidget: previousWidget, currentIndex: currentIndex, currentWidget: currentWidget\r\n        });\r\n        // Flush the message loop on IE and Edge to prevent flicker.\r\n        if (domutils_1.Platform.IS_EDGE || domutils_1.Platform.IS_IE) {\r\n            messaging_1.MessageLoop.flush();\r\n        }\r\n    };\r\n    /**\r\n     * Handle the `tabActivateRequested` signal from the tab bar.\r\n     */\r\n    TabPanel.prototype._onTabActivateRequested = function (sender, args) {\r\n        args.title.owner.activate();\r\n    };\r\n    /**\r\n     * Handle the `tabCloseRequested` signal from the tab bar.\r\n     */\r\n    TabPanel.prototype._onTabCloseRequested = function (sender, args) {\r\n        args.title.owner.close();\r\n    };\r\n    /**\r\n     * Handle the `tabMoved` signal from the tab bar.\r\n     */\r\n    TabPanel.prototype._onTabMoved = function (sender, args) {\r\n        this.stackedPanel.insertWidget(args.toIndex, args.title.owner);\r\n    };\r\n    /**\r\n     * Handle the `widgetRemoved` signal from the stacked panel.\r\n     */\r\n    TabPanel.prototype._onWidgetRemoved = function (sender, widget) {\r\n        this.tabBar.removeTab(widget.title);\r\n    };\r\n    return TabPanel;\r\n}(widget_1.Widget));\r\nexports.TabPanel = TabPanel;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Convert a tab placement to tab bar orientation.\r\n     */\r\n    function orientationFromPlacement(plc) {\r\n        return placementToOrientationMap[plc];\r\n    }\r\n    Private.orientationFromPlacement = orientationFromPlacement;\r\n    /**\r\n     * Convert a tab placement to a box layout direction.\r\n     */\r\n    function directionFromPlacement(plc) {\r\n        return placementToDirectionMap[plc];\r\n    }\r\n    Private.directionFromPlacement = directionFromPlacement;\r\n    /**\r\n     * A mapping of tab placement to tab bar orientation.\r\n     */\r\n    var placementToOrientationMap = {\r\n        'top': 'horizontal',\r\n        'left': 'vertical',\r\n        'right': 'vertical',\r\n        'bottom': 'horizontal'\r\n    };\r\n    /**\r\n     * A mapping of tab placement to box layout direction.\r\n     */\r\n    var placementToDirectionMap = {\r\n        'top': 'top-to-bottom',\r\n        'left': 'left-to-right',\r\n        'right': 'right-to-left',\r\n        'bottom': 'bottom-to-top'\r\n    };\r\n})(Private || (Private = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\n/**\r\n * An object which holds data related to an object's title.\r\n *\r\n * #### Notes\r\n * A title object is intended to hold the data necessary to display a\r\n * header for a particular object. A common example is the `TabPanel`,\r\n * which uses the widget title to populate the tab for a child widget.\r\n */\r\nvar Title = (function () {\r\n    /**\r\n     * Construct a new title.\r\n     *\r\n     * @param options - The options for initializing the title.\r\n     */\r\n    function Title(options) {\r\n        this._label = '';\r\n        this._caption = '';\r\n        this._mnemonic = -1;\r\n        this._iconClass = '';\r\n        this._iconLabel = '';\r\n        this._className = '';\r\n        this._closable = false;\r\n        this._changed = new signaling_1.Signal(this);\r\n        this.owner = options.owner;\r\n        if (options.label !== undefined) {\r\n            this._label = options.label;\r\n        }\r\n        if (options.mnemonic !== undefined) {\r\n            this._mnemonic = options.mnemonic;\r\n        }\r\n        if (options.icon !== undefined) {\r\n            this._iconClass = options.icon;\r\n        }\r\n        if (options.iconClass !== undefined) {\r\n            this._iconClass = options.iconClass;\r\n        }\r\n        if (options.iconLabel !== undefined) {\r\n            this._iconLabel = options.iconLabel;\r\n        }\r\n        if (options.caption !== undefined) {\r\n            this._caption = options.caption;\r\n        }\r\n        if (options.className !== undefined) {\r\n            this._className = options.className;\r\n        }\r\n        if (options.closable !== undefined) {\r\n            this._closable = options.closable;\r\n        }\r\n        this._dataset = options.dataset || {};\r\n    }\r\n    Object.defineProperty(Title.prototype, \"changed\", {\r\n        /**\r\n         * A signal emitted when the state of the title changes.\r\n         */\r\n        get: function () {\r\n            return this._changed;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"label\", {\r\n        /**\r\n         * Get the label for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is an empty string.\r\n         */\r\n        get: function () {\r\n            return this._label;\r\n        },\r\n        /**\r\n         * Set the label for the title.\r\n         */\r\n        set: function (value) {\r\n            if (this._label === value) {\r\n                return;\r\n            }\r\n            this._label = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"mnemonic\", {\r\n        /**\r\n         * Get the mnemonic index for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is `-1`.\r\n         */\r\n        get: function () {\r\n            return this._mnemonic;\r\n        },\r\n        /**\r\n         * Set the mnemonic index for the title.\r\n         */\r\n        set: function (value) {\r\n            if (this._mnemonic === value) {\r\n                return;\r\n            }\r\n            this._mnemonic = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"icon\", {\r\n        /**\r\n         * @deprecated Use `iconClass` instead.\r\n         */\r\n        get: function () {\r\n            return this.iconClass;\r\n        },\r\n        /**\r\n         * @deprecated Use `iconClass` instead.\r\n         */\r\n        set: function (value) {\r\n            this.iconClass = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"iconClass\", {\r\n        /**\r\n         * Get the icon class name for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is an empty string.\r\n         */\r\n        get: function () {\r\n            return this._iconClass;\r\n        },\r\n        /**\r\n         * Set the icon class name for the title.\r\n         *\r\n         * #### Notes\r\n         * Multiple class names can be separated with whitespace.\r\n         */\r\n        set: function (value) {\r\n            if (this._iconClass === value) {\r\n                return;\r\n            }\r\n            this._iconClass = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"iconLabel\", {\r\n        /**\r\n         * Get the icon label for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is an empty string.\r\n         */\r\n        get: function () {\r\n            return this._iconLabel;\r\n        },\r\n        /**\r\n         * Set the icon label for the title.\r\n         *\r\n         * #### Notes\r\n         * Multiple class names can be separated with whitespace.\r\n         */\r\n        set: function (value) {\r\n            if (this._iconLabel === value) {\r\n                return;\r\n            }\r\n            this._iconLabel = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"caption\", {\r\n        /**\r\n         * Get the caption for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is an empty string.\r\n         */\r\n        get: function () {\r\n            return this._caption;\r\n        },\r\n        /**\r\n         * Set the caption for the title.\r\n         */\r\n        set: function (value) {\r\n            if (this._caption === value) {\r\n                return;\r\n            }\r\n            this._caption = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"className\", {\r\n        /**\r\n         * Get the extra class name for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is an empty string.\r\n         */\r\n        get: function () {\r\n            return this._className;\r\n        },\r\n        /**\r\n         * Set the extra class name for the title.\r\n         *\r\n         * #### Notes\r\n         * Multiple class names can be separated with whitespace.\r\n         */\r\n        set: function (value) {\r\n            if (this._className === value) {\r\n                return;\r\n            }\r\n            this._className = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"closable\", {\r\n        /**\r\n         * Get the closable state for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is `false`.\r\n         */\r\n        get: function () {\r\n            return this._closable;\r\n        },\r\n        /**\r\n         * Set the closable state for the title.\r\n         *\r\n         * #### Notes\r\n         * This controls the presence of a close icon when applicable.\r\n         */\r\n        set: function (value) {\r\n            if (this._closable === value) {\r\n                return;\r\n            }\r\n            this._closable = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Title.prototype, \"dataset\", {\r\n        /**\r\n         * Get the dataset for the title.\r\n         *\r\n         * #### Notes\r\n         * The default value is an empty dataset.\r\n         */\r\n        get: function () {\r\n            return this._dataset;\r\n        },\r\n        /**\r\n         * Set the dataset for the title.\r\n         *\r\n         * #### Notes\r\n         * This controls the data attributes when applicable.\r\n         */\r\n        set: function (value) {\r\n            if (this._dataset === value) {\r\n                return;\r\n            }\r\n            this._dataset = value;\r\n            this._changed.emit(undefined);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Title;\r\n}());\r\nexports.Title = Title;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2017, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nvar algorithm_1 = require(\"@phosphor/algorithm\");\r\nvar messaging_1 = require(\"@phosphor/messaging\");\r\nvar properties_1 = require(\"@phosphor/properties\");\r\nvar signaling_1 = require(\"@phosphor/signaling\");\r\nvar title_1 = require(\"./title\");\r\n/**\r\n * The base class of the Phosphor widget hierarchy.\r\n *\r\n * #### Notes\r\n * This class will typically be subclassed in order to create a useful\r\n * widget. However, it can be used directly to host externally created\r\n * content.\r\n */\r\nvar Widget = (function () {\r\n    /**\r\n     * Construct a new widget.\r\n     *\r\n     * @param options - The options for initializing the widget.\r\n     */\r\n    function Widget(options) {\r\n        if (options === void 0) { options = {}; }\r\n        this._flags = 0;\r\n        this._layout = null;\r\n        this._parent = null;\r\n        this._disposed = new signaling_1.Signal(this);\r\n        this.node = Private.createNode(options);\r\n        this.addClass('p-Widget');\r\n    }\r\n    /**\r\n     * Dispose of the widget and its descendant widgets.\r\n     *\r\n     * #### Notes\r\n     * It is unsafe to use the widget after it has been disposed.\r\n     *\r\n     * All calls made to this method after the first are a no-op.\r\n     */\r\n    Widget.prototype.dispose = function () {\r\n        // Do nothing if the widget is already disposed.\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        // Set the disposed flag and emit the disposed signal.\r\n        this.setFlag(Widget.Flag.IsDisposed);\r\n        this._disposed.emit(undefined);\r\n        // Remove or detach the widget if necessary.\r\n        if (this.parent) {\r\n            this.parent = null;\r\n        }\r\n        else if (this.isAttached) {\r\n            Widget.detach(this);\r\n        }\r\n        // Dispose of the widget layout.\r\n        if (this._layout) {\r\n            this._layout.dispose();\r\n            this._layout = null;\r\n        }\r\n        // Clear the extra data associated with the widget.\r\n        signaling_1.Signal.clearData(this);\r\n        messaging_1.MessageLoop.clearData(this);\r\n        properties_1.AttachedProperty.clearData(this);\r\n    };\r\n    Object.defineProperty(Widget.prototype, \"disposed\", {\r\n        /**\r\n         * A signal emitted when the widget is disposed.\r\n         */\r\n        get: function () {\r\n            return this._disposed;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"isDisposed\", {\r\n        /**\r\n         * Test whether the widget has been disposed.\r\n         */\r\n        get: function () {\r\n            return this.testFlag(Widget.Flag.IsDisposed);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"isAttached\", {\r\n        /**\r\n         * Test whether the widget's node is attached to the DOM.\r\n         */\r\n        get: function () {\r\n            return this.testFlag(Widget.Flag.IsAttached);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"isHidden\", {\r\n        /**\r\n         * Test whether the widget is explicitly hidden.\r\n         */\r\n        get: function () {\r\n            return this.testFlag(Widget.Flag.IsHidden);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"isVisible\", {\r\n        /**\r\n         * Test whether the widget is visible.\r\n         *\r\n         * #### Notes\r\n         * A widget is visible when it is attached to the DOM, is not\r\n         * explicitly hidden, and has no explicitly hidden ancestors.\r\n         */\r\n        get: function () {\r\n            return this.testFlag(Widget.Flag.IsVisible);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"title\", {\r\n        /**\r\n         * The title object for the widget.\r\n         *\r\n         * #### Notes\r\n         * The title object is used by some container widgets when displaying\r\n         * the widget alongside some title, such as a tab panel or side bar.\r\n         *\r\n         * Since not all widgets will use the title, it is created on demand.\r\n         *\r\n         * The `owner` property of the title is set to this widget.\r\n         */\r\n        get: function () {\r\n            return Private.titleProperty.get(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"id\", {\r\n        /**\r\n         * Get the id of the widget's DOM node.\r\n         */\r\n        get: function () {\r\n            return this.node.id;\r\n        },\r\n        /**\r\n         * Set the id of the widget's DOM node.\r\n         */\r\n        set: function (value) {\r\n            this.node.id = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"dataset\", {\r\n        /**\r\n         * The dataset for the widget's DOM node.\r\n         */\r\n        get: function () {\r\n            return this.node.dataset;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"parent\", {\r\n        /**\r\n         * Get the parent of the widget.\r\n         */\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        /**\r\n         * Set the parent of the widget.\r\n         *\r\n         * #### Notes\r\n         * Children are typically added to a widget by using a layout, which\r\n         * means user code will not normally set the parent widget directly.\r\n         *\r\n         * The widget will be automatically removed from its old parent.\r\n         *\r\n         * This is a no-op if there is no effective parent change.\r\n         */\r\n        set: function (value) {\r\n            if (this._parent === value) {\r\n                return;\r\n            }\r\n            if (value && this.contains(value)) {\r\n                throw new Error('Invalid parent widget.');\r\n            }\r\n            if (this._parent && !this._parent.isDisposed) {\r\n                var msg = new Widget.ChildMessage('child-removed', this);\r\n                messaging_1.MessageLoop.sendMessage(this._parent, msg);\r\n            }\r\n            this._parent = value;\r\n            if (this._parent && !this._parent.isDisposed) {\r\n                var msg = new Widget.ChildMessage('child-added', this);\r\n                messaging_1.MessageLoop.sendMessage(this._parent, msg);\r\n            }\r\n            if (!this.isDisposed) {\r\n                messaging_1.MessageLoop.sendMessage(this, Widget.Msg.ParentChanged);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Widget.prototype, \"layout\", {\r\n        /**\r\n         * Get the layout for the widget.\r\n         */\r\n        get: function () {\r\n            return this._layout;\r\n        },\r\n        /**\r\n         * Set the layout for the widget.\r\n         *\r\n         * #### Notes\r\n         * The layout is single-use only. It cannot be changed after the\r\n         * first assignment.\r\n         *\r\n         * The layout is disposed automatically when the widget is disposed.\r\n         */\r\n        set: function (value) {\r\n            if (this._layout === value) {\r\n                return;\r\n            }\r\n            if (this.testFlag(Widget.Flag.DisallowLayout)) {\r\n                throw new Error('Cannot set widget layout.');\r\n            }\r\n            if (this._layout) {\r\n                throw new Error('Cannot change widget layout.');\r\n            }\r\n            if (value.parent) {\r\n                throw new Error('Cannot change layout parent.');\r\n            }\r\n            this._layout = value;\r\n            value.parent = this;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create an iterator over the widget's children.\r\n     *\r\n     * @returns A new iterator over the children of the widget.\r\n     *\r\n     * #### Notes\r\n     * The widget must have a populated layout in order to have children.\r\n     *\r\n     * If a layout is not installed, the returned iterator will be empty.\r\n     */\r\n    Widget.prototype.children = function () {\r\n        return this._layout ? this._layout.iter() : algorithm_1.empty();\r\n    };\r\n    /**\r\n     * Test whether a widget is a descendant of this widget.\r\n     *\r\n     * @param widget - The descendant widget of interest.\r\n     *\r\n     * @returns `true` if the widget is a descendant, `false` otherwise.\r\n     */\r\n    Widget.prototype.contains = function (widget) {\r\n        for (var value = widget; value; value = value._parent) {\r\n            if (value === this) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Test whether the widget's DOM node has the given class name.\r\n     *\r\n     * @param name - The class name of interest.\r\n     *\r\n     * @returns `true` if the node has the class, `false` otherwise.\r\n     */\r\n    Widget.prototype.hasClass = function (name) {\r\n        return this.node.classList.contains(name);\r\n    };\r\n    /**\r\n     * Add a class name to the widget's DOM node.\r\n     *\r\n     * @param name - The class name to add to the node.\r\n     *\r\n     * #### Notes\r\n     * If the class name is already added to the node, this is a no-op.\r\n     *\r\n     * The class name must not contain whitespace.\r\n     */\r\n    Widget.prototype.addClass = function (name) {\r\n        this.node.classList.add(name);\r\n    };\r\n    /**\r\n     * Remove a class name from the widget's DOM node.\r\n     *\r\n     * @param name - The class name to remove from the node.\r\n     *\r\n     * #### Notes\r\n     * If the class name is not yet added to the node, this is a no-op.\r\n     *\r\n     * The class name must not contain whitespace.\r\n     */\r\n    Widget.prototype.removeClass = function (name) {\r\n        this.node.classList.remove(name);\r\n    };\r\n    /**\r\n     * Toggle a class name on the widget's DOM node.\r\n     *\r\n     * @param name - The class name to toggle on the node.\r\n     *\r\n     * @param force - Whether to force add the class (`true`) or force\r\n     *   remove the class (`false`). If not provided, the presence of\r\n     *   the class will be toggled from its current state.\r\n     *\r\n     * @returns `true` if the class is now present, `false` otherwise.\r\n     *\r\n     * #### Notes\r\n     * The class name must not contain whitespace.\r\n     */\r\n    Widget.prototype.toggleClass = function (name, force) {\r\n        if (force === true) {\r\n            this.node.classList.add(name);\r\n            return true;\r\n        }\r\n        if (force === false) {\r\n            this.node.classList.remove(name);\r\n            return false;\r\n        }\r\n        return this.node.classList.toggle(name);\r\n    };\r\n    /**\r\n     * Post an `'update-request'` message to the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a simple convenience method for posting the message.\r\n     */\r\n    Widget.prototype.update = function () {\r\n        messaging_1.MessageLoop.postMessage(this, Widget.Msg.UpdateRequest);\r\n    };\r\n    /**\r\n     * Post a `'fit-request'` message to the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a simple convenience method for posting the message.\r\n     */\r\n    Widget.prototype.fit = function () {\r\n        messaging_1.MessageLoop.postMessage(this, Widget.Msg.FitRequest);\r\n    };\r\n    /**\r\n     * Post an `'activate-request'` message to the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a simple convenience method for posting the message.\r\n     */\r\n    Widget.prototype.activate = function () {\r\n        messaging_1.MessageLoop.postMessage(this, Widget.Msg.ActivateRequest);\r\n    };\r\n    /**\r\n     * Send a `'close-request'` message to the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a simple convenience method for sending the message.\r\n     */\r\n    Widget.prototype.close = function () {\r\n        messaging_1.MessageLoop.sendMessage(this, Widget.Msg.CloseRequest);\r\n    };\r\n    /**\r\n     * Show the widget and make it visible to its parent widget.\r\n     *\r\n     * #### Notes\r\n     * This causes the [[isHidden]] property to be `false`.\r\n     *\r\n     * If the widget is not explicitly hidden, this is a no-op.\r\n     */\r\n    Widget.prototype.show = function () {\r\n        if (!this.testFlag(Widget.Flag.IsHidden)) {\r\n            return;\r\n        }\r\n        if (this.isAttached && (!this.parent || this.parent.isVisible)) {\r\n            messaging_1.MessageLoop.sendMessage(this, Widget.Msg.BeforeShow);\r\n        }\r\n        this.clearFlag(Widget.Flag.IsHidden);\r\n        this.removeClass('p-mod-hidden');\r\n        if (this.isAttached && (!this.parent || this.parent.isVisible)) {\r\n            messaging_1.MessageLoop.sendMessage(this, Widget.Msg.AfterShow);\r\n        }\r\n        if (this.parent) {\r\n            var msg = new Widget.ChildMessage('child-shown', this);\r\n            messaging_1.MessageLoop.sendMessage(this.parent, msg);\r\n        }\r\n    };\r\n    /**\r\n     * Hide the widget and make it hidden to its parent widget.\r\n     *\r\n     * #### Notes\r\n     * This causes the [[isHidden]] property to be `true`.\r\n     *\r\n     * If the widget is explicitly hidden, this is a no-op.\r\n     */\r\n    Widget.prototype.hide = function () {\r\n        if (this.testFlag(Widget.Flag.IsHidden)) {\r\n            return;\r\n        }\r\n        if (this.isAttached && (!this.parent || this.parent.isVisible)) {\r\n            messaging_1.MessageLoop.sendMessage(this, Widget.Msg.BeforeHide);\r\n        }\r\n        this.setFlag(Widget.Flag.IsHidden);\r\n        this.addClass('p-mod-hidden');\r\n        if (this.isAttached && (!this.parent || this.parent.isVisible)) {\r\n            messaging_1.MessageLoop.sendMessage(this, Widget.Msg.AfterHide);\r\n        }\r\n        if (this.parent) {\r\n            var msg = new Widget.ChildMessage('child-hidden', this);\r\n            messaging_1.MessageLoop.sendMessage(this.parent, msg);\r\n        }\r\n    };\r\n    /**\r\n     * Show or hide the widget according to a boolean value.\r\n     *\r\n     * @param hidden - `true` to hide the widget, or `false` to show it.\r\n     *\r\n     * #### Notes\r\n     * This is a convenience method for `hide()` and `show()`.\r\n     */\r\n    Widget.prototype.setHidden = function (hidden) {\r\n        if (hidden) {\r\n            this.hide();\r\n        }\r\n        else {\r\n            this.show();\r\n        }\r\n    };\r\n    /**\r\n     * Test whether the given widget flag is set.\r\n     *\r\n     * #### Notes\r\n     * This will not typically be called directly by user code.\r\n     */\r\n    Widget.prototype.testFlag = function (flag) {\r\n        return (this._flags & flag) !== 0;\r\n    };\r\n    /**\r\n     * Set the given widget flag.\r\n     *\r\n     * #### Notes\r\n     * This will not typically be called directly by user code.\r\n     */\r\n    Widget.prototype.setFlag = function (flag) {\r\n        this._flags |= flag;\r\n    };\r\n    /**\r\n     * Clear the given widget flag.\r\n     *\r\n     * #### Notes\r\n     * This will not typically be called directly by user code.\r\n     */\r\n    Widget.prototype.clearFlag = function (flag) {\r\n        this._flags &= ~flag;\r\n    };\r\n    /**\r\n     * Process a message sent to the widget.\r\n     *\r\n     * @param msg - The message sent to the widget.\r\n     *\r\n     * #### Notes\r\n     * Subclasses may reimplement this method as needed.\r\n     */\r\n    Widget.prototype.processMessage = function (msg) {\r\n        switch (msg.type) {\r\n            case 'resize':\r\n                this.notifyLayout(msg);\r\n                this.onResize(msg);\r\n                break;\r\n            case 'update-request':\r\n                this.notifyLayout(msg);\r\n                this.onUpdateRequest(msg);\r\n                break;\r\n            case 'fit-request':\r\n                this.notifyLayout(msg);\r\n                this.onFitRequest(msg);\r\n                break;\r\n            case 'before-show':\r\n                this.notifyLayout(msg);\r\n                this.onBeforeShow(msg);\r\n                break;\r\n            case 'after-show':\r\n                this.setFlag(Widget.Flag.IsVisible);\r\n                this.notifyLayout(msg);\r\n                this.onAfterShow(msg);\r\n                break;\r\n            case 'before-hide':\r\n                this.notifyLayout(msg);\r\n                this.onBeforeHide(msg);\r\n                break;\r\n            case 'after-hide':\r\n                this.clearFlag(Widget.Flag.IsVisible);\r\n                this.notifyLayout(msg);\r\n                this.onAfterHide(msg);\r\n                break;\r\n            case 'before-attach':\r\n                this.notifyLayout(msg);\r\n                this.onBeforeAttach(msg);\r\n                break;\r\n            case 'after-attach':\r\n                if (!this.isHidden && (!this.parent || this.parent.isVisible)) {\r\n                    this.setFlag(Widget.Flag.IsVisible);\r\n                }\r\n                this.setFlag(Widget.Flag.IsAttached);\r\n                this.notifyLayout(msg);\r\n                this.onAfterAttach(msg);\r\n                break;\r\n            case 'before-detach':\r\n                this.notifyLayout(msg);\r\n                this.onBeforeDetach(msg);\r\n                break;\r\n            case 'after-detach':\r\n                this.clearFlag(Widget.Flag.IsVisible);\r\n                this.clearFlag(Widget.Flag.IsAttached);\r\n                this.notifyLayout(msg);\r\n                this.onAfterDetach(msg);\r\n                break;\r\n            case 'activate-request':\r\n                this.notifyLayout(msg);\r\n                this.onActivateRequest(msg);\r\n                break;\r\n            case 'close-request':\r\n                this.notifyLayout(msg);\r\n                this.onCloseRequest(msg);\r\n                break;\r\n            case 'child-added':\r\n                this.notifyLayout(msg);\r\n                this.onChildAdded(msg);\r\n                break;\r\n            case 'child-removed':\r\n                this.notifyLayout(msg);\r\n                this.onChildRemoved(msg);\r\n                break;\r\n            default:\r\n                this.notifyLayout(msg);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Invoke the message processing routine of the widget's layout.\r\n     *\r\n     * @param msg - The message to dispatch to the layout.\r\n     *\r\n     * #### Notes\r\n     * This is a no-op if the widget does not have a layout.\r\n     *\r\n     * This will not typically be called directly by user code.\r\n     */\r\n    Widget.prototype.notifyLayout = function (msg) {\r\n        if (this._layout) {\r\n            this._layout.processParentMessage(msg);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'close-request'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation unparents or detaches the widget.\r\n     */\r\n    Widget.prototype.onCloseRequest = function (msg) {\r\n        if (this.parent) {\r\n            this.parent = null;\r\n        }\r\n        else if (this.isAttached) {\r\n            Widget.detach(this);\r\n        }\r\n    };\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onResize = function (msg) { };\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onUpdateRequest = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onFitRequest = function (msg) { };\r\n    /**\r\n     * A message handler invoked on an `'activate-request'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onActivateRequest = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'before-show'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onBeforeShow = function (msg) { };\r\n    /**\r\n     * A message handler invoked on an `'after-show'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onAfterShow = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'before-hide'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onBeforeHide = function (msg) { };\r\n    /**\r\n     * A message handler invoked on an `'after-hide'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onAfterHide = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'before-attach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onBeforeAttach = function (msg) { };\r\n    /**\r\n     * A message handler invoked on an `'after-attach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onAfterAttach = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'before-detach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onBeforeDetach = function (msg) { };\r\n    /**\r\n     * A message handler invoked on an `'after-detach'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onAfterDetach = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'child-added'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onChildAdded = function (msg) { };\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     *\r\n     * #### Notes\r\n     * The default implementation of this handler is a no-op.\r\n     */\r\n    Widget.prototype.onChildRemoved = function (msg) { };\r\n    return Widget;\r\n}());\r\nexports.Widget = Widget;\r\n/**\r\n * The namespace for the `Widget` class statics.\r\n */\r\n(function (Widget) {\r\n    /**\r\n     * An enum of widget bit flags.\r\n     */\r\n    var Flag;\r\n    (function (Flag) {\r\n        /**\r\n         * The widget has been disposed.\r\n         */\r\n        Flag[Flag[\"IsDisposed\"] = 1] = \"IsDisposed\";\r\n        /**\r\n         * The widget is attached to the DOM.\r\n         */\r\n        Flag[Flag[\"IsAttached\"] = 2] = \"IsAttached\";\r\n        /**\r\n         * The widget is hidden.\r\n         */\r\n        Flag[Flag[\"IsHidden\"] = 4] = \"IsHidden\";\r\n        /**\r\n         * The widget is visible.\r\n         */\r\n        Flag[Flag[\"IsVisible\"] = 8] = \"IsVisible\";\r\n        /**\r\n         * A layout cannot be set on the widget.\r\n         */\r\n        Flag[Flag[\"DisallowLayout\"] = 16] = \"DisallowLayout\";\r\n    })(Flag = Widget.Flag || (Widget.Flag = {}));\r\n    /**\r\n     * A collection of stateless messages related to widgets.\r\n     */\r\n    var Msg;\r\n    (function (Msg) {\r\n        /**\r\n         * A singleton `'before-show'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget before it becomes visible.\r\n         *\r\n         * This message is **not** sent when the widget is being attached.\r\n         */\r\n        Msg.BeforeShow = new messaging_1.Message('before-show');\r\n        /**\r\n         * A singleton `'after-show'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget after it becomes visible.\r\n         *\r\n         * This message is **not** sent when the widget is being attached.\r\n         */\r\n        Msg.AfterShow = new messaging_1.Message('after-show');\r\n        /**\r\n         * A singleton `'before-hide'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget before it becomes not-visible.\r\n         *\r\n         * This message is **not** sent when the widget is being detached.\r\n         */\r\n        Msg.BeforeHide = new messaging_1.Message('before-hide');\r\n        /**\r\n         * A singleton `'after-hide'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget after it becomes not-visible.\r\n         *\r\n         * This message is **not** sent when the widget is being detached.\r\n         */\r\n        Msg.AfterHide = new messaging_1.Message('after-hide');\r\n        /**\r\n         * A singleton `'before-attach'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget before it is attached.\r\n         */\r\n        Msg.BeforeAttach = new messaging_1.Message('before-attach');\r\n        /**\r\n         * A singleton `'after-attach'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget after it is attached.\r\n         */\r\n        Msg.AfterAttach = new messaging_1.Message('after-attach');\r\n        /**\r\n         * A singleton `'before-detach'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget before it is detached.\r\n         */\r\n        Msg.BeforeDetach = new messaging_1.Message('before-detach');\r\n        /**\r\n         * A singleton `'after-detach'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget after it is detached.\r\n         */\r\n        Msg.AfterDetach = new messaging_1.Message('after-detach');\r\n        /**\r\n         * A singleton `'parent-changed'` message.\r\n         *\r\n         * #### Notes\r\n         * This message is sent to a widget when its parent has changed.\r\n         */\r\n        Msg.ParentChanged = new messaging_1.Message('parent-changed');\r\n        /**\r\n         * A singleton conflatable `'update-request'` message.\r\n         *\r\n         * #### Notes\r\n         * This message can be dispatched to supporting widgets in order to\r\n         * update their content based on the current widget state. Not all\r\n         * widgets will respond to messages of this type.\r\n         *\r\n         * For widgets with a layout, this message will inform the layout to\r\n         * update the position and size of its child widgets.\r\n         */\r\n        Msg.UpdateRequest = new messaging_1.ConflatableMessage('update-request');\r\n        /**\r\n         * A singleton conflatable `'fit-request'` message.\r\n         *\r\n         * #### Notes\r\n         * For widgets with a layout, this message will inform the layout to\r\n         * recalculate its size constraints to fit the space requirements of\r\n         * its child widgets, and to update their position and size. Not all\r\n         * layouts will respond to messages of this type.\r\n         */\r\n        Msg.FitRequest = new messaging_1.ConflatableMessage('fit-request');\r\n        /**\r\n         * A singleton conflatable `'activate-request'` message.\r\n         *\r\n         * #### Notes\r\n         * This message should be dispatched to a widget when it should\r\n         * perform the actions necessary to activate the widget, which\r\n         * may include focusing its node or descendant node.\r\n         */\r\n        Msg.ActivateRequest = new messaging_1.ConflatableMessage('activate-request');\r\n        /**\r\n         * A singleton conflatable `'close-request'` message.\r\n         *\r\n         * #### Notes\r\n         * This message should be dispatched to a widget when it should close\r\n         * and remove itself from the widget hierarchy.\r\n         */\r\n        Msg.CloseRequest = new messaging_1.ConflatableMessage('close-request');\r\n    })(Msg = Widget.Msg || (Widget.Msg = {}));\r\n    /**\r\n     * A message class for child related messages.\r\n     */\r\n    var ChildMessage = (function (_super) {\r\n        __extends(ChildMessage, _super);\r\n        /**\r\n         * Construct a new child message.\r\n         *\r\n         * @param type - The message type.\r\n         *\r\n         * @param child - The child widget for the message.\r\n         */\r\n        function ChildMessage(type, child) {\r\n            var _this = _super.call(this, type) || this;\r\n            _this.child = child;\r\n            return _this;\r\n        }\r\n        return ChildMessage;\r\n    }(messaging_1.Message));\r\n    Widget.ChildMessage = ChildMessage;\r\n    /**\r\n     * A message class for `'resize'` messages.\r\n     */\r\n    var ResizeMessage = (function (_super) {\r\n        __extends(ResizeMessage, _super);\r\n        /**\r\n         * Construct a new resize message.\r\n         *\r\n         * @param width - The **offset width** of the widget, or `-1` if\r\n         *   the width is not known.\r\n         *\r\n         * @param height - The **offset height** of the widget, or `-1` if\r\n         *   the height is not known.\r\n         */\r\n        function ResizeMessage(width, height) {\r\n            var _this = _super.call(this, 'resize') || this;\r\n            _this.width = width;\r\n            _this.height = height;\r\n            return _this;\r\n        }\r\n        return ResizeMessage;\r\n    }(messaging_1.Message));\r\n    Widget.ResizeMessage = ResizeMessage;\r\n    /**\r\n     * The namespace for the `ResizeMessage` class statics.\r\n     */\r\n    (function (ResizeMessage) {\r\n        /**\r\n         * A singleton `'resize'` message with an unknown size.\r\n         */\r\n        ResizeMessage.UnknownSize = new ResizeMessage(-1, -1);\r\n    })(ResizeMessage = Widget.ResizeMessage || (Widget.ResizeMessage = {}));\r\n    /**\r\n     * Attach a widget to a host DOM node.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param host - The DOM node to use as the widget's host.\r\n     *\r\n     * @param ref - The child of `host` to use as the reference element.\r\n     *   If this is provided, the widget will be inserted before this\r\n     *   node in the host. The default is `null`, which will cause the\r\n     *   widget to be added as the last child of the host.\r\n     *\r\n     * #### Notes\r\n     * This will throw an error if the widget is not a root widget, if\r\n     * the widget is already attached, or if the host is not attached\r\n     * to the DOM.\r\n     */\r\n    function attach(widget, host, ref) {\r\n        if (ref === void 0) { ref = null; }\r\n        if (widget.parent) {\r\n            throw new Error('Cannot attach a child widget.');\r\n        }\r\n        if (widget.isAttached || document.body.contains(widget.node)) {\r\n            throw new Error('Widget is already attached.');\r\n        }\r\n        if (!document.body.contains(host)) {\r\n            throw new Error('Host is not attached.');\r\n        }\r\n        messaging_1.MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\r\n        host.insertBefore(widget.node, ref);\r\n        messaging_1.MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\r\n    }\r\n    Widget.attach = attach;\r\n    /**\r\n     * Detach the widget from its host DOM node.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * #### Notes\r\n     * This will throw an error if the widget is not a root widget,\r\n     * or if the widget is not attached to the DOM.\r\n     */\r\n    function detach(widget) {\r\n        if (widget.parent) {\r\n            throw new Error('Cannot detach a child widget.');\r\n        }\r\n        if (!widget.isAttached || !document.body.contains(widget.node)) {\r\n            throw new Error('Widget is not attached.');\r\n        }\r\n        messaging_1.MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\r\n        widget.node.parentNode.removeChild(widget.node);\r\n        messaging_1.MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\r\n    }\r\n    Widget.detach = detach;\r\n})(Widget = exports.Widget || (exports.Widget = {}));\r\nexports.Widget = Widget;\r\n/**\r\n * The namespace for the module implementation details.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * An attached property for the widget title object.\r\n     */\r\n    Private.titleProperty = new properties_1.AttachedProperty({\r\n        name: 'title',\r\n        create: function (owner) { return new title_1.Title({ owner: owner }); },\r\n    });\r\n    /**\r\n     * Create a DOM node for the given widget options.\r\n     */\r\n    function createNode(options) {\r\n        return options.node || document.createElement('div');\r\n    }\r\n    Private.createNode = createNode;\r\n})(Private || (Private = {}));\r\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"body {\\r\\n    font: 11px Segoe UI, Helvetica, Arial, sans-serif;\\r\\n    color: #F0F0F0;\\r\\n    -webkit-touch-callout: none;\\r\\n    /* iOS Safari */\\r\\n    -webkit-user-select: none;\\r\\n    /* Safari */\\r\\n    -khtml-user-select: none;\\r\\n    /* Konqueror HTML */\\r\\n    -moz-user-select: none;\\r\\n    /* Firefox */\\r\\n    -ms-user-select: none;\\r\\n    /* Internet Explorer/Edge */\\r\\n    user-select: none;\\r\\n    /* Non-prefixed version, currently supported by Chrome and Opera */\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n    background: #080808;\\r\\n    overflow: hidden;\\r\\n    filter: blur(0);\\r\\n    -webkit-filter: blur(0);\\r\\n    -webkit-backface-visibility: hidden;\\r\\n    backface-visibility: hidden;\\r\\n}\\r\\n\\r\\n.toolbar {\\r\\n    height: 28px;\\r\\n    background: #222222;\\r\\n    width: 100%;\\r\\n    display: block;\\r\\n}\\r\\n\\r\\n.statusbar {\\r\\n    height: 22px;\\r\\n    background: #3e0636ff;\\r\\n    width: 100%;\\r\\n    display: block;\\r\\n}\\r\\n\\r\\n\\r\\n/* image-rendering: optimizeSpeed;            \\r\\nimage-rendering: -moz-crisp-edges;           Firefox             \\r\\nimage-rendering: -o-crisp-edges;            /* Opera               \\r\\nimage-rendering: -webkit-optimize-contrast; /* Chrome (and Safari) \\r\\nimage-rendering: optimize-contrast;         /* CSS3 Proposed       \\r\\n-ms-interpolation-mode: nearest-neighbor;   IE8+                */\\r\\n\\r\\n/*** Works on common browsers ***/\\r\\n\\r\\n::selection {\\r\\n    background-color: #004580;\\r\\n    color: #fff;\\r\\n}\\r\\n\\r\\n/*** Mozilla based browsers ***/\\r\\n\\r\\n::-moz-selection {\\r\\n    background-color: #004580;\\r\\n    color: #fff;\\r\\n}\\r\\n\\r\\n/***For Other Browsers ***/\\r\\n\\r\\n::-o-selection {\\r\\n    background-color: #004580;\\r\\n    color: #fff;\\r\\n}\\r\\n\\r\\n::-ms-selection {\\r\\n    background-color: #004580;\\r\\n    color: #fff;\\r\\n}\\r\\n\\r\\n/*** For Webkit ***/\\r\\n\\r\\n::-webkit-selection {\\r\\n    background-color: #004580;\\r\\n    color: #fff;\\r\\n}\\r\\n\\r\\nfieldset {\\r\\n    border: none;\\r\\n}\\r\\n\\r\\n#inspector> :nth-child(n) {\\r\\n    margin-bottom: 4px;\\r\\n}\\r\\n\\r\\n.flex-container {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    justify-content: space-between;\\r\\n    align-items: stretch;\\r\\n}\\r\\n\\r\\n.flex-container>.flex-horizontal {\\r\\n    display: inline-flex;\\r\\n    /* min-width: 50%; */\\r\\n    width: auto;\\r\\n}\\r\\n\\r\\n.flex-horizontal {\\r\\n    display: inline-flex;\\r\\n    /* min-width: 50%; */\\r\\n    width: auto;\\r\\n}\\r\\n\\r\\n.horizotal-group {\\r\\n    flex: auto;\\r\\n    display: inline-flex;\\r\\n    /* display: contents;*/\\r\\n    min-width: 0;\\r\\n}\\r\\n\\r\\n/*(an + b)*/\\r\\n\\r\\n.flex-container>.flex-horizontal:nth-child(1n+2) {\\r\\n    margin-left: 4px;\\r\\n    min-width: 0;\\r\\n    /* min-width: calc(50% - 4px); */\\r\\n}\\r\\n\\r\\ninput,\\r\\ninput[type=\\\"number\\\"],\\r\\ninput.checkbox+label {\\r\\n    width: auto;\\r\\n    height: 14px;\\r\\n    /* border: 1px solid #000; */\\r\\n    border: none;\\r\\n    background: #141414;\\r\\n    color: #F0F0F0;\\r\\n    font-size: 11px;\\r\\n}\\r\\n\\r\\nbody.pointerEditing input,\\r\\nbody.pointerEditing label {\\r\\n        cursor: inherit;\\r\\n    }\\r\\n\\r\\n\\r\\ninput.focus {\\r\\n    outline: #004580 solid 1px;\\r\\n}\\r\\n\\r\\ninput:focus,\\r\\ninput[type=\\\"number\\\"]:focus {\\r\\n    outline: #004580 solid 1px;\\r\\n}\\r\\n\\r\\nlabel.focus {\\r\\n    color: #107bd7;\\r\\n}\\r\\n\\r\\n.text-input {\\r\\n    flex: auto;\\r\\n    padding: 3px;\\r\\n    min-width: 0;\\r\\n}\\r\\n\\r\\ninput[type=number]::-webkit-inner-spin-button,\\r\\ninput[type=number]::-webkit-outer-spin-button {\\r\\n    -webkit-appearance: none;\\r\\n    -moz-appearance: none;\\r\\n    appearance: none;\\r\\n    margin: 0;\\r\\n}\\r\\n\\r\\ninput[type=\\\"number\\\"] {\\r\\n    -moz-appearance: textfield;\\r\\n}\\r\\n\\r\\n.text-label {\\r\\n    margin: auto 0;\\r\\n    text-transform: capitalize;\\r\\n}\\r\\n\\r\\n.number {\\r\\n    min-width: 10px;\\r\\n    cursor: col-resize;\\r\\n}\\r\\n\\r\\ninput[type=\\\"checkbox\\\"] {\\r\\n    -webkit-appearance: none;\\r\\n    -moz-appearance: none;\\r\\n    appearance: none;\\r\\n    display: none;\\r\\n    visibility: hidden;\\r\\n    padding: 0;\\r\\n    border: 0\\r\\n}\\r\\n\\r\\n.checkbox-container {\\r\\n    cursor: pointer;\\r\\n    min-width: 20px;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n.checkbox-container .checkbox-indicator {\\r\\n    display: inline-block;\\r\\n    vertical-align: middle;\\r\\n    pointer-events: none;\\r\\n}\\r\\n\\r\\ninput[type=\\\"checkbox\\\"]+label::after {\\r\\n    content: none;\\r\\n}\\r\\n\\r\\ninput.checkbox+.checkbox-indicator {\\r\\n    width: 12px;\\r\\n    height: 12px;\\r\\n    /* cursor: pointer; */\\r\\n    /* text-shadow: 1px 1px 1px rgba(0, 0, 0, .2); */\\r\\n    color: #f3f3f3;\\r\\n    text-align: center;\\r\\n    line-height: 8px;\\r\\n    /* display: inline-block; */\\r\\n}\\r\\n\\r\\ninput[type=\\\"checkbox\\\"]:checked+.checkbox-indicator::after {\\r\\n    content: \\\"\\\\2713\\\";\\r\\n    vertical-align: middle;\\r\\n}\\r\\n\\r\\n.foldout {\\r\\n    border-bottom: #323232 1px solid;\\r\\n}\\r\\n\\r\\n.foldout-header {\\r\\n    height: 20px;\\r\\n    /* padding: 3px 0; */\\r\\n    color: #d4d2d2;\\r\\n    vertical-align: middle;\\r\\n    margin-bottom: 3px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.foldout-label {\\r\\n    font-weight: bold;\\r\\n    display: inline-flex;\\r\\n    margin: auto 0;\\r\\n}\\r\\n\\r\\n.foldout-arrow-container {\\r\\n    width: 20px;\\r\\n    display: flex;\\r\\n    position: relative\\r\\n}\\r\\n\\r\\n.foldout-arrow {\\r\\n    transform: translateX(-50%) translateY(-50%);\\r\\n    /* -webkit-transform: rotate(90deg) translateZ(0) scale(1.0, 1.0); */\\r\\n    transition: 100ms linear;\\r\\n    margin: auto;\\r\\n    top: 50%;\\r\\n    left: 50%;\\r\\n    position: absolute;\\r\\n    line-height: 0;\\r\\n    padding-bottom: 2px;\\r\\n}\\r\\n\\r\\n.foldout.enable .foldout-arrow {\\r\\n    transform: translateX(-50%) translateY(-50%) rotate(90deg);\\r\\n    /* padding-left: 1px; */\\r\\n}\\r\\n\\r\\n.foldout-arrow::after {\\r\\n    content: '\\\\25B6';\\r\\n    /* content: '\\\\9654'; */\\r\\n    font-size: 10px;\\r\\n}\\r\\n\\r\\n.foldout-content {\\r\\n    padding-left: 20px;\\r\\n    /* position: relative; */\\r\\n    overflow: hidden;\\r\\n    transition: height 100ms linear;\\r\\n    padding-top: 1px;\\r\\n    padding-right: 1px;\\r\\n}\\r\\n\\r\\n.foldout::after {\\r\\n    border-bottom: 1px solid #080808ff;\\r\\n}\\r\\n\\r\\n.foldout:not(.enable) .foldout-content {\\r\\n    height: 0;\\r\\n}\\r\\n\\r\\n.false {\\r\\n    color: rgb(75, 75, 75);\\r\\n}\\r\\n\\r\\nul {\\r\\n    list-style: none;\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\n/* \\r\\ninput[type=\\\"checkbox\\\"]:checked+label::after {\\r\\n    content: \\\"\\\\2713\\\";\\r\\n} */\", \"\"]);\n\n// exports\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tvar styleTarget = fn.call(this, selector);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[selector] = styleTarget;\n\t\t}\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton) options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n","\r\n\r\nexport function applyAttributes() {\r\n\r\n}\r\n\r\nfunction applyInlineStyle(element: HTMLElement, style: HTML.CSS) {\r\n    let elemStyle = element.style;\r\n    let name: keyof HTML.CSS;\r\n    for (name in style) {\r\n        elemStyle[name] = style[name];\r\n    }\r\n}\r\n\r\n/**\r\n * Global class for DOM manipulation\r\n */\r\nclass DOMManipulator {\r\n\r\n    private _body: HTMLBodyElement;\r\n\r\n    public get body(): HTMLBodyElement {\r\n        return this._body;\r\n    }\r\n\r\n    constructor() {\r\n        this._body = document.getElementsByTagName(\"BODY\")[0] as HTMLBodyElement;\r\n    }\r\n\r\n    createElement<K extends HTMLTagNames>(tagName: K, attr?: HTML.AttributesTagMap[K]): HTMLElementTagNameMap[K] {\r\n        let node = document.createElement(tagName);\r\n\r\n        console.log(attr)\r\n\r\n        if (attr !== undefined || attr !== null) {\r\n            for (const iterator in attr) {\r\n                const value = attr[iterator];\r\n\r\n                if (typeof (value) !== 'string') {\r\n\r\n                    if (iterator === 'style') {\r\n                        if (value) {\r\n                            applyInlineStyle(node, value);\r\n                        }\r\n                    } else {\r\n\r\n                        node.setAttribute(iterator, value.toString());\r\n                    }\r\n                } else {\r\n                    node.setAttribute(iterator, value);\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n}\r\n\r\nconst DOM = new DOMManipulator();\r\n\r\nexport default DOM;\r\n//DOM.createElement('input', {type:'number', style:{webkitTransformStyle:}} )\r\n\r\n\r\n\r\n","\nimport DOM from \"./dom\";\nimport './style/style.css'\nimport { DockPanel } from \"@phosphor/widgets\";\n\n// import * as React from \"react\";\n// import * as ReactDOM from \"react-dom\";\n// import { Provider } from \"react-redux\";\n\n// // import './index.css';\n// import store from './state/store';\n// import App from './App';\n// //import registerServiceWorker from './registerServiceWorker';\n\nconst rootNode = document.getElementById('root');\n\nconst toolbar = DOM.createElement('div',{class:'toolbar'});\nconst statusbar = DOM.createElement('div',{class:'statusbar'});\nconst dockpanel = new DockPanel();\ndockpanel.id = 'main';\n\n\n\nrootNode.appendChild(toolbar);\nDockPanel.attach(dockpanel,rootNode);\nrootNode.appendChild(statusbar);\n\n// const appNode: JSX.Element = (\n//     <Provider store={store}>\n//         <App />\n//     </Provider>\n// );\n\n// ReactDOM.render(appNode, rootNode);\n// //registerServiceWorker();\n\n\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!./style.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./style.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = require(\"crypto\");"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClvvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACllDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACztEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjrjmj3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjvpvdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrlgghjjdtjjirjikzsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnxwzxwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnpvlrphstFA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAQA;AACA;AACA;AANA;AAAA;AACA;AACA;;;AAAA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACdA;;;;A","sourceRoot":""}